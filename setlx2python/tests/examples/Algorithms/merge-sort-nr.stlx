sort := procedure(rw L) {
    A := L;
    mergeSort(L, A);
};
mergeSort := procedure(rw L, rw A) {
    n := 1;
    while (n < #L) {
        k := 0;
        while (n * (k + 1) + 1 <= #L) {
            merge(L, n * k + 1, n * (k + 1) + 1, min([n * (k + 2), #L]) + 1, A);
            k += 2;    
        }
        n *= 2;
    }
};
merge := procedure(rw L, start, middle, end, rw A) {    
    for (i in [start .. end-1]) {
        A[i] := L[i]; 
    }
    idx1 := start;
    idx2 := middle;
    i    := start;
    while (idx1 < middle && idx2 < end) {
        if (A[idx1] <= A[idx2]) {
            L[i] := A[idx1]; i += 1; idx1 += 1;
        } else {
            L[i] := A[idx2]; i += 1; idx2 += 1;
        }
    }
    while (idx1 < middle) {
        L[i] := A[idx1]; i += 1; idx1 += 1;
    }
    while (idx2 < end) {
        L[i] := A[idx2]; i += 1; idx2 += 1;
    }
};

// code for testing

demo := procedure() {
    L := [ rnd({1 .. 200}) : n in [1 .. 20] ];
    print("L = $L$");
    sort(L);
    print("L = $L$");
};

// n iterations for lists of length k
testSort := procedure(n, k) {
    for (i in [1 .. n]) {
        L := [ rnd({1 .. 200}) : x in [1 .. k] ];
        C := L;  // save a copy
        sort(L);
        isOrdered(L);
        sameElements(C, L);
        print(".");
    }
    print("All tests passed!");    
};

isOrdered := procedure(L) {
    for (i in [1 .. #L-1]) {
        assert(L[i] <= L[i+1], "test L[i] <= L[i+1] failed for i = $i$, L = $L$");
    }
};

sameElements := procedure(L, S) {
    assert(collect(L) == collect(S), "different elements in $L$ and $S$");
};

demo();

testSort(100, 20);

computeTimes := procedure(a, b) {
    n := a;
    while (n <= b) {
        resetRandom();
        time := 0;
        for (i in [1 .. 1]) {
            L := [ rnd(2 * n) : i in [1 .. n] ];
            start := now();
            sort(L);
            stop := now();
            time += stop - start;
        }
        print("n = $n$, t = $0.001*time$, $time / (n * log(n))$, $time / (n ** 2.0)$");
        n := ceil(n * 1.2);
    }
};

computeTimes(10, 100000);

