// Moore's algorithm for computing the shortest path function.
shortestPath := procedure(source, Edges) {
    Distance := { [source, 0] };
    Fringe   := { source };
    while (Fringe != {}) {
        u := from(Fringe);
        for ([v,l] in Edges[u]) {
            if (Distance[v] == om || Distance[u]+l < Distance[v]) {
                Distance[v] := Distance[u] + l;
                Fringe      += { v };
            }
        }
    }
    return Distance;
};
// Code for testing.                                                     
Edges := { ["a", {["b", 2], ["c", 3]}], 
           ["b", {["d", 1]} ],
           ["c", {["e", 3]} ],  
           ["d", {["e", 2], ["f", 4]} ],  
           ["e", {["f", 1]} ],
           ["f", {} ]
         };
M  := { x : [x, _ ] in Edges };
s  := "a";
sp := shortestPath(s, Edges);
for (x in M) {
    print("distance($s$, $x$) = $sp[x]$");
}

