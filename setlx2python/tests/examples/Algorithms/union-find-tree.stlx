// This class implements the union find algorithm.
unionFind := procedure(M, R) {
    Parent := { [x, x] : x in M };
    count  := 1;
    for ([x, y] in R) {
        print("take union of $x$ and $y$");
        count += 1;
        rootX := find(x, Parent);
        rootY := find(y, Parent);
        if (rootX != rootY) {
            Parent[rootY] := rootX;  // create union
        }
    }
    Roots := { x : x in M | Parent[x] == x };
    return { { y : y in M | find(y, Parent) == r } : r in Roots };
};
find := procedure(x, Parent) {
    if (Parent[x] == x) {
        return x;
    }
    return find(Parent[x], Parent);
};

demo := procedure() {
    n := 9;
    M := { 1 .. n };
    R := [ [k+1, k] : k in M | k < n ];
    print("R = $R$");
    P := unionFind(M, R);
    print("P = $P$");
};

demo();

