# Generated from grammar/SetlXgrammar.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


from .types import *

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3a")
        buf.write("\u0418\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\3\2\7")
        buf.write("\2\\\n\2\f\2\16\2_\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3p\n\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\7\3\u0086\n\3\f\3\16\3\u0089\13\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u0091\n\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\7\3\u009d\n\3\f\3\16\3\u00a0\13\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u00a7\n\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00b8\n\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u00ea\n\3\f\3\16\3\u00ed")
        buf.write("\13\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00f8\n")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("\u0106\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u011a\n\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0133\n\3\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u014e\n\4\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0159\n\5\3\5\3\5\3\5")
        buf.write("\3\5\6\5\u015f\n\5\r\5\16\5\u0160\3\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u0168\n\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u0173\n\6\3\6\3\6\6\6\u0177\n\6\r\6\16\6\u0178\3\6\3")
        buf.write("\6\3\6\5\6\u017e\n\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0187")
        buf.write("\n\7\3\7\3\7\5\7\u018b\n\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u0198\n\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\5\t\u01a2\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\7\n\u01af\n\n\f\n\16\n\u01b2\13\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u01bc\n\n\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u01ca\n\r\f\r")
        buf.write("\16\r\u01cd\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\5\16\u01dc\n\16\5\16\u01de")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u01e9\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\7\20\u01f5\n\20\f\20\16\20\u01f8\13\20\5\20\u01fa")
        buf.write("\n\20\3\20\5\20\u01fd\n\20\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u0205\n\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22")
        buf.write("\u020d\n\22\f\22\16\22\u0210\13\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u0218\n\23\f\23\16\23\u021b\13\23\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u023f\n\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\7\25\u024b\n\25\f\25\16\25\u024e\13\25\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\7\26\u0266\n\26\f\26\16\26\u0269\13\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0275\n\27\f")
        buf.write("\27\16\27\u0278\13\27\3\30\3\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u0280\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0292\n")
        buf.write("\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\5\31\u02b9\n\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\7\31\u02c2\n\31\f\31\16\31\u02c5")
        buf.write("\13\31\3\31\3\31\5\31\u02c9\n\31\3\31\3\31\3\31\3\31\5")
        buf.write("\31\u02cf\n\31\5\31\u02d1\n\31\3\32\3\32\5\32\u02d5\n")
        buf.write("\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u02f2\n\33\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\7\34\u02fa\n\34\f\34\16\34\u02fd")
        buf.write("\13\34\3\34\3\34\3\34\3\34\7\34\u0303\n\34\f\34\16\34")
        buf.write("\u0306\13\34\3\34\3\34\3\34\3\34\5\34\u030c\n\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\7\34\u0314\n\34\f\34\16\34\u0317")
        buf.write("\13\34\3\34\3\34\3\34\3\34\5\34\u031d\n\34\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u0323\n\34\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\5\35\u032d\n\35\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \5 \u0347\n \3!\3!\3!\3!\3!\3!\5!\u034f\n!\3")
        buf.write("!\3!\3!\3!\6!\u0355\n!\r!\16!\u0356\3!\3!\3!\5!\u035c")
        buf.write("\n!\3!\3!\3!\3!\5!\u0362\n!\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\5\"\u036b\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u0372\n\"\3#")
        buf.write("\3#\3#\3#\5#\u0378\n#\3#\3#\3#\3#\3#\3#\5#\u0380\n#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5")
        buf.write("#\u0394\n#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\7$\u03a2")
        buf.write("\n$\f$\16$\u03a5\13$\3$\3$\3$\3$\3$\5$\u03ac\n$\5$\u03ae")
        buf.write("\n$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u03ba\n$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\5$\u03c3\n$\5$\u03c5\n$\3%\3%\3%\3%\3%\3")
        buf.write("%\7%\u03cd\n%\f%\16%\u03d0\13%\3&\3&\3&\3&\3&\3\'\3\'")
        buf.write("\3\'\3\'\6\'\u03db\n\'\r\'\16\'\u03dc\3\'\3\'\3\'\3(\3")
        buf.write("(\3(\3(\5(\u03e6\n(\3(\3(\3(\3(\5(\u03ec\n(\3(\3(\3(\5")
        buf.write("(\u03f1\n(\3(\6(\u03f4\n(\r(\16(\u03f5\3(\3(\3(\3)\3)")
        buf.write("\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0405\n)\3*\3*\3*\3+\3+\3")
        buf.write("+\3,\3,\3,\3,\3,\3,\7,\u0413\n,\f,\16,\u0416\13,\3,\2")
        buf.write("\2-\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
        buf.write("\62\64\668:<>@BDFHJLNPRTV\2\2\2\u047c\2]\3\2\2\2\4\u0132")
        buf.write("\3\2\2\2\6\u0134\3\2\2\2\b\u014f\3\2\2\2\n\u016c\3\2\2")
        buf.write("\2\f\u0182\3\2\2\2\16\u0197\3\2\2\2\20\u0199\3\2\2\2\22")
        buf.write("\u01bb\3\2\2\2\24\u01bd\3\2\2\2\26\u01c0\3\2\2\2\30\u01c3")
        buf.write("\3\2\2\2\32\u01dd\3\2\2\2\34\u01df\3\2\2\2\36\u01fc\3")
        buf.write("\2\2\2 \u01fe\3\2\2\2\"\u0206\3\2\2\2$\u0211\3\2\2\2&")
        buf.write("\u021c\3\2\2\2(\u0240\3\2\2\2*\u024f\3\2\2\2,\u026a\3")
        buf.write("\2\2\2.\u0291\3\2\2\2\60\u02d0\3\2\2\2\62\u02d4\3\2\2")
        buf.write("\2\64\u02f1\3\2\2\2\66\u0322\3\2\2\28\u032c\3\2\2\2:\u032e")
        buf.write("\3\2\2\2<\u0333\3\2\2\2>\u0346\3\2\2\2@\u0361\3\2\2\2")
        buf.write("B\u0371\3\2\2\2D\u0393\3\2\2\2F\u0395\3\2\2\2H\u03c6\3")
        buf.write("\2\2\2J\u03d1\3\2\2\2L\u03d6\3\2\2\2N\u03e1\3\2\2\2P\u0404")
        buf.write("\3\2\2\2R\u0406\3\2\2\2T\u0409\3\2\2\2V\u040c\3\2\2\2")
        buf.write("XY\5\4\3\2YZ\b\2\1\2Z\\\3\2\2\2[X\3\2\2\2\\_\3\2\2\2]")
        buf.write("[\3\2\2\2]^\3\2\2\2^`\3\2\2\2_]\3\2\2\2`a\b\2\1\2a\3\3")
        buf.write("\2\2\2bc\7\3\2\2cd\7W\2\2de\7\4\2\2ef\5\66\34\2fg\7\5")
        buf.write("\2\2gh\7\6\2\2ho\5\2\2\2ij\7\7\2\2jk\7\6\2\2kl\5\2\2\2")
        buf.write("lm\7\b\2\2mn\b\3\1\2np\3\2\2\2oi\3\2\2\2op\3\2\2\2pq\3")
        buf.write("\2\2\2qr\7\b\2\2rs\b\3\1\2s\u0133\3\2\2\2tu\7\t\2\2uv")
        buf.write("\7\4\2\2vw\5T+\2wx\7\5\2\2xy\7\6\2\2yz\5\2\2\2z\u0087")
        buf.write("\7\b\2\2{|\7\n\2\2|}\7\t\2\2}~\7\4\2\2~\177\5T+\2\177")
        buf.write("\u0080\7\5\2\2\u0080\u0081\7\6\2\2\u0081\u0082\5\2\2\2")
        buf.write("\u0082\u0083\7\b\2\2\u0083\u0084\b\3\1\2\u0084\u0086\3")
        buf.write("\2\2\2\u0085{\3\2\2\2\u0086\u0089\3\2\2\2\u0087\u0085")
        buf.write("\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u0090\3\2\2\2\u0089")
        buf.write("\u0087\3\2\2\2\u008a\u008b\7\n\2\2\u008b\u008c\7\6\2\2")
        buf.write("\u008c\u008d\5\2\2\2\u008d\u008e\7\b\2\2\u008e\u008f\b")
        buf.write("\3\1\2\u008f\u0091\3\2\2\2\u0090\u008a\3\2\2\2\u0090\u0091")
        buf.write("\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0093\b\3\1\2\u0093")
        buf.write("\u0133\3\2\2\2\u0094\u0095\7\13\2\2\u0095\u009e\7\6\2")
        buf.write("\2\u0096\u0097\7\f\2\2\u0097\u0098\5T+\2\u0098\u0099\7")
        buf.write("\r\2\2\u0099\u009a\5\2\2\2\u009a\u009b\b\3\1\2\u009b\u009d")
        buf.write("\3\2\2\2\u009c\u0096\3\2\2\2\u009d\u00a0\3\2\2\2\u009e")
        buf.write("\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a6\3\2\2\2")
        buf.write("\u00a0\u009e\3\2\2\2\u00a1\u00a2\7\16\2\2\u00a2\u00a3")
        buf.write("\7\r\2\2\u00a3\u00a4\5\2\2\2\u00a4\u00a5\b\3\1\2\u00a5")
        buf.write("\u00a7\3\2\2\2\u00a6\u00a1\3\2\2\2\u00a6\u00a7\3\2\2\2")
        buf.write("\u00a7\u00a8\3\2\2\2\u00a8\u00a9\7\b\2\2\u00a9\u0133\b")
        buf.write("\3\1\2\u00aa\u00ab\5\b\5\2\u00ab\u00ac\b\3\1\2\u00ac\u0133")
        buf.write("\3\2\2\2\u00ad\u00ae\5\n\6\2\u00ae\u00af\b\3\1\2\u00af")
        buf.write("\u0133\3\2\2\2\u00b0\u00b1\7\17\2\2\u00b1\u00b2\7\4\2")
        buf.write("\2\u00b2\u00b7\5H%\2\u00b3\u00b4\7\20\2\2\u00b4\u00b5")
        buf.write("\5T+\2\u00b5\u00b6\b\3\1\2\u00b6\u00b8\3\2\2\2\u00b7\u00b3")
        buf.write("\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9")
        buf.write("\u00ba\7\5\2\2\u00ba\u00bb\7\6\2\2\u00bb\u00bc\5\2\2\2")
        buf.write("\u00bc\u00bd\7\b\2\2\u00bd\u00be\b\3\1\2\u00be\u0133\3")
        buf.write("\2\2\2\u00bf\u00c0\7\21\2\2\u00c0\u00c1\7\4\2\2\u00c1")
        buf.write("\u00c2\5T+\2\u00c2\u00c3\7\5\2\2\u00c3\u00c4\7\6\2\2\u00c4")
        buf.write("\u00c5\5\2\2\2\u00c5\u00c6\7\b\2\2\u00c6\u00c7\b\3\1\2")
        buf.write("\u00c7\u0133\3\2\2\2\u00c8\u00c9\7\22\2\2\u00c9\u00ca")
        buf.write("\7\6\2\2\u00ca\u00cb\5\2\2\2\u00cb\u00cc\7\b\2\2\u00cc")
        buf.write("\u00cd\7\21\2\2\u00cd\u00ce\7\4\2\2\u00ce\u00cf\5T+\2")
        buf.write("\u00cf\u00d0\7\5\2\2\u00d0\u00d1\7\23\2\2\u00d1\u00d2")
        buf.write("\b\3\1\2\u00d2\u0133\3\2\2\2\u00d3\u00d4\7\24\2\2\u00d4")
        buf.write("\u00d5\7\6\2\2\u00d5\u00d6\5\2\2\2\u00d6\u00eb\7\b\2\2")
        buf.write("\u00d7\u00d8\7\25\2\2\u00d8\u00d9\7\4\2\2\u00d9\u00da")
        buf.write("\5\24\13\2\u00da\u00db\7\5\2\2\u00db\u00dc\7\6\2\2\u00dc")
        buf.write("\u00dd\5\2\2\2\u00dd\u00de\7\b\2\2\u00de\u00df\b\3\1\2")
        buf.write("\u00df\u00ea\3\2\2\2\u00e0\u00e1\7\26\2\2\u00e1\u00e2")
        buf.write("\7\4\2\2\u00e2\u00e3\5\24\13\2\u00e3\u00e4\7\5\2\2\u00e4")
        buf.write("\u00e5\7\6\2\2\u00e5\u00e6\5\2\2\2\u00e6\u00e7\7\b\2\2")
        buf.write("\u00e7\u00e8\b\3\1\2\u00e8\u00ea\3\2\2\2\u00e9\u00d7\3")
        buf.write("\2\2\2\u00e9\u00e0\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9")
        buf.write("\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00f7\3\2\2\2\u00ed")
        buf.write("\u00eb\3\2\2\2\u00ee\u00ef\7\27\2\2\u00ef\u00f0\7\4\2")
        buf.write("\2\u00f0\u00f1\5\24\13\2\u00f1\u00f2\7\5\2\2\u00f2\u00f3")
        buf.write("\7\6\2\2\u00f3\u00f4\5\2\2\2\u00f4\u00f5\7\b\2\2\u00f5")
        buf.write("\u00f6\b\3\1\2\u00f6\u00f8\3\2\2\2\u00f7\u00ee\3\2\2\2")
        buf.write("\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa\b")
        buf.write("\3\1\2\u00fa\u0133\3\2\2\2\u00fb\u00fc\7\30\2\2\u00fc")
        buf.write("\u00fd\7\6\2\2\u00fd\u00fe\5\2\2\2\u00fe\u0105\7\b\2\2")
        buf.write("\u00ff\u0100\7\31\2\2\u0100\u0101\7\6\2\2\u0101\u0102")
        buf.write("\5\2\2\2\u0102\u0103\b\3\1\2\u0103\u0104\7\b\2\2\u0104")
        buf.write("\u0106\3\2\2\2\u0105\u00ff\3\2\2\2\u0105\u0106\3\2\2\2")
        buf.write("\u0106\u0107\3\2\2\2\u0107\u0108\b\3\1\2\u0108\u0133\3")
        buf.write("\2\2\2\u0109\u010a\7\32\2\2\u010a\u010b\7\23\2\2\u010b")
        buf.write("\u0133\b\3\1\2\u010c\u010d\7\33\2\2\u010d\u010e\7\23\2")
        buf.write("\2\u010e\u0133\b\3\1\2\u010f\u0110\7\34\2\2\u0110\u0111")
        buf.write("\7\23\2\2\u0111\u0133\b\3\1\2\u0112\u0113\7\35\2\2\u0113")
        buf.write("\u0114\7\23\2\2\u0114\u0133\b\3\1\2\u0115\u0119\7\36\2")
        buf.write("\2\u0116\u0117\5\26\f\2\u0117\u0118\b\3\1\2\u0118\u011a")
        buf.write("\3\2\2\2\u0119\u0116\3\2\2\2\u0119\u011a\3\2\2\2\u011a")
        buf.write("\u011b\3\2\2\2\u011b\u011c\7\23\2\2\u011c\u0133\b\3\1")
        buf.write("\2\u011d\u011e\7\37\2\2\u011e\u011f\7\4\2\2\u011f\u0120")
        buf.write("\5T+\2\u0120\u0121\7 \2\2\u0121\u0122\5\26\f\2\u0122\u0123")
        buf.write("\7\5\2\2\u0123\u0124\7\23\2\2\u0124\u0125\b\3\1\2\u0125")
        buf.write("\u0133\3\2\2\2\u0126\u0127\5\6\4\2\u0127\u0128\7\23\2")
        buf.write("\2\u0128\u0129\b\3\1\2\u0129\u0133\3\2\2\2\u012a\u012b")
        buf.write("\5\16\b\2\u012b\u012c\7\23\2\2\u012c\u012d\b\3\1\2\u012d")
        buf.write("\u0133\3\2\2\2\u012e\u012f\5\26\f\2\u012f\u0130\7\23\2")
        buf.write("\2\u0130\u0131\b\3\1\2\u0131\u0133\3\2\2\2\u0132b\3\2")
        buf.write("\2\2\u0132t\3\2\2\2\u0132\u0094\3\2\2\2\u0132\u00aa\3")
        buf.write("\2\2\2\u0132\u00ad\3\2\2\2\u0132\u00b0\3\2\2\2\u0132\u00bf")
        buf.write("\3\2\2\2\u0132\u00c8\3\2\2\2\u0132\u00d3\3\2\2\2\u0132")
        buf.write("\u00fb\3\2\2\2\u0132\u0109\3\2\2\2\u0132\u010c\3\2\2\2")
        buf.write("\u0132\u010f\3\2\2\2\u0132\u0112\3\2\2\2\u0132\u0115\3")
        buf.write("\2\2\2\u0132\u011d\3\2\2\2\u0132\u0126\3\2\2\2\u0132\u012a")
        buf.write("\3\2\2\2\u0132\u012e\3\2\2\2\u0133\5\3\2\2\2\u0134\u014d")
        buf.write("\5\22\n\2\u0135\u0136\7!\2\2\u0136\u0137\5\26\f\2\u0137")
        buf.write("\u0138\b\4\1\2\u0138\u014e\3\2\2\2\u0139\u013a\7\"\2\2")
        buf.write("\u013a\u013b\5\26\f\2\u013b\u013c\b\4\1\2\u013c\u014e")
        buf.write("\3\2\2\2\u013d\u013e\7#\2\2\u013e\u013f\5\26\f\2\u013f")
        buf.write("\u0140\b\4\1\2\u0140\u014e\3\2\2\2\u0141\u0142\7$\2\2")
        buf.write("\u0142\u0143\5\26\f\2\u0143\u0144\b\4\1\2\u0144\u014e")
        buf.write("\3\2\2\2\u0145\u0146\7%\2\2\u0146\u0147\5\26\f\2\u0147")
        buf.write("\u0148\b\4\1\2\u0148\u014e\3\2\2\2\u0149\u014a\7&\2\2")
        buf.write("\u014a\u014b\5\26\f\2\u014b\u014c\b\4\1\2\u014c\u014e")
        buf.write("\3\2\2\2\u014d\u0135\3\2\2\2\u014d\u0139\3\2\2\2\u014d")
        buf.write("\u013d\3\2\2\2\u014d\u0141\3\2\2\2\u014d\u0145\3\2\2\2")
        buf.write("\u014d\u0149\3\2\2\2\u014e\7\3\2\2\2\u014f\u0150\7\'\2")
        buf.write("\2\u0150\u0151\7\4\2\2\u0151\u0152\5\26\f\2\u0152\u0153")
        buf.write("\7\5\2\2\u0153\u015e\7\6\2\2\u0154\u0155\7\f\2\2\u0155")
        buf.write("\u0158\5\30\r\2\u0156\u0157\7\20\2\2\u0157\u0159\5T+\2")
        buf.write("\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015a\3")
        buf.write("\2\2\2\u015a\u015b\7\r\2\2\u015b\u015c\5\2\2\2\u015c\u015f")
        buf.write("\3\2\2\2\u015d\u015f\5\f\7\2\u015e\u0154\3\2\2\2\u015e")
        buf.write("\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u015e\3\2\2\2")
        buf.write("\u0160\u0161\3\2\2\2\u0161\u0167\3\2\2\2\u0162\u0163\7")
        buf.write("\16\2\2\u0163\u0164\7\r\2\2\u0164\u0165\5\2\2\2\u0165")
        buf.write("\u0166\b\5\1\2\u0166\u0168\3\2\2\2\u0167\u0162\3\2\2\2")
        buf.write("\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016a\7")
        buf.write("\b\2\2\u016a\u016b\b\5\1\2\u016b\t\3\2\2\2\u016c\u016d")
        buf.write("\7(\2\2\u016d\u016e\7\4\2\2\u016e\u016f\5\26\f\2\u016f")
        buf.write("\u0172\7\5\2\2\u0170\u0171\7)\2\2\u0171\u0173\5\24\13")
        buf.write("\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0176\7\6\2\2\u0175\u0177\5\f\7\2\u0176")
        buf.write("\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0176\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179\u017d\3\2\2\2\u017a\u017b\7")
        buf.write("\16\2\2\u017b\u017c\7\r\2\2\u017c\u017e\5\2\2\2\u017d")
        buf.write("\u017a\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f\3\2\2\2")
        buf.write("\u017f\u0180\7\b\2\2\u0180\u0181\b\6\1\2\u0181\13\3\2")
        buf.write("\2\2\u0182\u0183\7*\2\2\u0183\u0186\5\26\f\2\u0184\u0185")
        buf.write("\7+\2\2\u0185\u0187\5\26\f\2\u0186\u0184\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0189\7\20\2")
        buf.write("\2\u0189\u018b\5T+\2\u018a\u0188\3\2\2\2\u018a\u018b\3")
        buf.write("\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\7\r\2\2\u018d\u018e")
        buf.write("\5\2\2\2\u018e\r\3\2\2\2\u018f\u0190\7W\2\2\u0190\u0191")
        buf.write("\7,\2\2\u0191\u0192\5\64\33\2\u0192\u0193\b\b\1\2\u0193")
        buf.write("\u0198\3\2\2\2\u0194\u0195\5\20\t\2\u0195\u0196\b\b\1")
        buf.write("\2\u0196\u0198\3\2\2\2\u0197\u018f\3\2\2\2\u0197\u0194")
        buf.write("\3\2\2\2\u0198\17\3\2\2\2\u0199\u019a\5\22\n\2\u019a\u01a1")
        buf.write("\7,\2\2\u019b\u019c\5\20\t\2\u019c\u019d\b\t\1\2\u019d")
        buf.write("\u01a2\3\2\2\2\u019e\u019f\5\32\16\2\u019f\u01a0\b\t\1")
        buf.write("\2\u01a0\u01a2\3\2\2\2\u01a1\u019b\3\2\2\2\u01a1\u019e")
        buf.write("\3\2\2\2\u01a2\21\3\2\2\2\u01a3\u01a4\5\24\13\2\u01a4")
        buf.write("\u01b0\b\n\1\2\u01a5\u01a6\7-\2\2\u01a6\u01a7\5R*\2\u01a7")
        buf.write("\u01a8\b\n\1\2\u01a8\u01af\3\2\2\2\u01a9\u01aa\7.\2\2")
        buf.write("\u01aa\u01ab\5\30\r\2\u01ab\u01ac\7/\2\2\u01ac\u01ad\b")
        buf.write("\n\1\2\u01ad\u01af\3\2\2\2\u01ae\u01a5\3\2\2\2\u01ae\u01a9")
        buf.write("\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b0")
        buf.write("\u01b1\3\2\2\2\u01b1\u01bc\3\2\2\2\u01b2\u01b0\3\2\2\2")
        buf.write("\u01b3\u01b4\7.\2\2\u01b4\u01b5\5V,\2\u01b5\u01b6\7/\2")
        buf.write("\2\u01b6\u01b7\b\n\1\2\u01b7\u01bc\3\2\2\2\u01b8\u01b9")
        buf.write("\6\n\2\3\u01b9\u01ba\7\60\2\2\u01ba\u01bc\b\n\1\2\u01bb")
        buf.write("\u01a3\3\2\2\2\u01bb\u01b3\3\2\2\2\u01bb\u01b8\3\2\2\2")
        buf.write("\u01bc\23\3\2\2\2\u01bd\u01be\7W\2\2\u01be\u01bf\b\13")
        buf.write("\1\2\u01bf\25\3\2\2\2\u01c0\u01c1\5\32\16\2\u01c1\u01c2")
        buf.write("\b\f\1\2\u01c2\27\3\2\2\2\u01c3\u01c4\5\32\16\2\u01c4")
        buf.write("\u01cb\b\r\1\2\u01c5\u01c6\7 \2\2\u01c6\u01c7\5\32\16")
        buf.write("\2\u01c7\u01c8\b\r\1\2\u01c8\u01ca\3\2\2\2\u01c9\u01c5")
        buf.write("\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\31\3\2\2\2\u01cd\u01cb\3\2\2\2\u01ce")
        buf.write("\u01cf\5\34\17\2\u01cf\u01d0\b\16\1\2\u01d0\u01de\3\2")
        buf.write("\2\2\u01d1\u01d2\5 \21\2\u01d2\u01db\b\16\1\2\u01d3\u01d4")
        buf.write("\7\61\2\2\u01d4\u01d5\5 \21\2\u01d5\u01d6\b\16\1\2\u01d6")
        buf.write("\u01dc\3\2\2\2\u01d7\u01d8\7\62\2\2\u01d8\u01d9\5 \21")
        buf.write("\2\u01d9\u01da\b\16\1\2\u01da\u01dc\3\2\2\2\u01db\u01d3")
        buf.write("\3\2\2\2\u01db\u01d7\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc")
        buf.write("\u01de\3\2\2\2\u01dd\u01ce\3\2\2\2\u01dd\u01d1\3\2\2\2")
        buf.write("\u01de\33\3\2\2\2\u01df\u01e8\5\36\20\2\u01e0\u01e1\7")
        buf.write("\63\2\2\u01e1\u01e2\5\26\f\2\u01e2\u01e3\b\17\1\2\u01e3")
        buf.write("\u01e9\3\2\2\2\u01e4\u01e5\7\64\2\2\u01e5\u01e6\5\26\f")
        buf.write("\2\u01e6\u01e7\b\17\1\2\u01e7\u01e9\3\2\2\2\u01e8\u01e0")
        buf.write("\3\2\2\2\u01e8\u01e4\3\2\2\2\u01e9\35\3\2\2\2\u01ea\u01eb")
        buf.write("\5R*\2\u01eb\u01ec\b\20\1\2\u01ec\u01fd\3\2\2\2\u01ed")
        buf.write("\u01f9\7.\2\2\u01ee\u01ef\5R*\2\u01ef\u01f6\b\20\1\2\u01f0")
        buf.write("\u01f1\7 \2\2\u01f1\u01f2\5R*\2\u01f2\u01f3\b\20\1\2\u01f3")
        buf.write("\u01f5\3\2\2\2\u01f4\u01f0\3\2\2\2\u01f5\u01f8\3\2\2\2")
        buf.write("\u01f6\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01fa\3")
        buf.write("\2\2\2\u01f8\u01f6\3\2\2\2\u01f9\u01ee\3\2\2\2\u01f9\u01fa")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\7/\2\2\u01fc")
        buf.write("\u01ea\3\2\2\2\u01fc\u01ed\3\2\2\2\u01fd\37\3\2\2\2\u01fe")
        buf.write("\u01ff\5\"\22\2\u01ff\u0204\b\21\1\2\u0200\u0201\7\65")
        buf.write("\2\2\u0201\u0202\5 \21\2\u0202\u0203\b\21\1\2\u0203\u0205")
        buf.write("\3\2\2\2\u0204\u0200\3\2\2\2\u0204\u0205\3\2\2\2\u0205")
        buf.write("!\3\2\2\2\u0206\u0207\5$\23\2\u0207\u020e\b\22\1\2\u0208")
        buf.write("\u0209\7\66\2\2\u0209\u020a\5$\23\2\u020a\u020b\b\22\1")
        buf.write("\2\u020b\u020d\3\2\2\2\u020c\u0208\3\2\2\2\u020d\u0210")
        buf.write("\3\2\2\2\u020e\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f")
        buf.write("#\3\2\2\2\u0210\u020e\3\2\2\2\u0211\u0212\5&\24\2\u0212")
        buf.write("\u0219\b\23\1\2\u0213\u0214\7\67\2\2\u0214\u0215\5&\24")
        buf.write("\2\u0215\u0216\b\23\1\2\u0216\u0218\3\2\2\2\u0217\u0213")
        buf.write("\3\2\2\2\u0218\u021b\3\2\2\2\u0219\u0217\3\2\2\2\u0219")
        buf.write("\u021a\3\2\2\2\u021a%\3\2\2\2\u021b\u0219\3\2\2\2\u021c")
        buf.write("\u021d\5(\25\2\u021d\u023e\b\24\1\2\u021e\u021f\78\2\2")
        buf.write("\u021f\u0220\5(\25\2\u0220\u0221\b\24\1\2\u0221\u023f")
        buf.write("\3\2\2\2\u0222\u0223\79\2\2\u0223\u0224\5(\25\2\u0224")
        buf.write("\u0225\b\24\1\2\u0225\u023f\3\2\2\2\u0226\u0227\7:\2\2")
        buf.write("\u0227\u0228\5(\25\2\u0228\u0229\b\24\1\2\u0229\u023f")
        buf.write("\3\2\2\2\u022a\u022b\7;\2\2\u022b\u022c\5(\25\2\u022c")
        buf.write("\u022d\b\24\1\2\u022d\u023f\3\2\2\2\u022e\u022f\7<\2\2")
        buf.write("\u022f\u0230\5(\25\2\u0230\u0231\b\24\1\2\u0231\u023f")
        buf.write("\3\2\2\2\u0232\u0233\7=\2\2\u0233\u0234\5(\25\2\u0234")
        buf.write("\u0235\b\24\1\2\u0235\u023f\3\2\2\2\u0236\u0237\7>\2\2")
        buf.write("\u0237\u0238\5(\25\2\u0238\u0239\b\24\1\2\u0239\u023f")
        buf.write("\3\2\2\2\u023a\u023b\7?\2\2\u023b\u023c\5(\25\2\u023c")
        buf.write("\u023d\b\24\1\2\u023d\u023f\3\2\2\2\u023e\u021e\3\2\2")
        buf.write("\2\u023e\u0222\3\2\2\2\u023e\u0226\3\2\2\2\u023e\u022a")
        buf.write("\3\2\2\2\u023e\u022e\3\2\2\2\u023e\u0232\3\2\2\2\u023e")
        buf.write("\u0236\3\2\2\2\u023e\u023a\3\2\2\2\u023e\u023f\3\2\2\2")
        buf.write("\u023f\'\3\2\2\2\u0240\u0241\5*\26\2\u0241\u024c\b\25")
        buf.write("\1\2\u0242\u0243\7@\2\2\u0243\u0244\5*\26\2\u0244\u0245")
        buf.write("\b\25\1\2\u0245\u024b\3\2\2\2\u0246\u0247\7A\2\2\u0247")
        buf.write("\u0248\5*\26\2\u0248\u0249\b\25\1\2\u0249\u024b\3\2\2")
        buf.write("\2\u024a\u0242\3\2\2\2\u024a\u0246\3\2\2\2\u024b\u024e")
        buf.write("\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024d\3\2\2\2\u024d")
        buf.write(")\3\2\2\2\u024e\u024c\3\2\2\2\u024f\u0250\5,\27\2\u0250")
        buf.write("\u0267\b\26\1\2\u0251\u0252\7B\2\2\u0252\u0253\5,\27\2")
        buf.write("\u0253\u0254\b\26\1\2\u0254\u0266\3\2\2\2\u0255\u0256")
        buf.write("\7C\2\2\u0256\u0257\5,\27\2\u0257\u0258\b\26\1\2\u0258")
        buf.write("\u0266\3\2\2\2\u0259\u025a\7D\2\2\u025a\u025b\5,\27\2")
        buf.write("\u025b\u025c\b\26\1\2\u025c\u0266\3\2\2\2\u025d\u025e")
        buf.write("\7E\2\2\u025e\u025f\5,\27\2\u025f\u0260\b\26\1\2\u0260")
        buf.write("\u0266\3\2\2\2\u0261\u0262\7F\2\2\u0262\u0263\5,\27\2")
        buf.write("\u0263\u0264\b\26\1\2\u0264\u0266\3\2\2\2\u0265\u0251")
        buf.write("\3\2\2\2\u0265\u0255\3\2\2\2\u0265\u0259\3\2\2\2\u0265")
        buf.write("\u025d\3\2\2\2\u0265\u0261\3\2\2\2\u0266\u0269\3\2\2\2")
        buf.write("\u0267\u0265\3\2\2\2\u0267\u0268\3\2\2\2\u0268+\3\2\2")
        buf.write("\2\u0269\u0267\3\2\2\2\u026a\u026b\5.\30\2\u026b\u0276")
        buf.write("\b\27\1\2\u026c\u026d\7G\2\2\u026d\u026e\5.\30\2\u026e")
        buf.write("\u026f\b\27\1\2\u026f\u0275\3\2\2\2\u0270\u0271\7H\2\2")
        buf.write("\u0271\u0272\5.\30\2\u0272\u0273\b\27\1\2\u0273\u0275")
        buf.write("\3\2\2\2\u0274\u026c\3\2\2\2\u0274\u0270\3\2\2\2\u0275")
        buf.write("\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2")
        buf.write("\u0277-\3\2\2\2\u0278\u0276\3\2\2\2\u0279\u027a\5\60\31")
        buf.write("\2\u027a\u027f\b\30\1\2\u027b\u027c\7I\2\2\u027c\u027d")
        buf.write("\5.\30\2\u027d\u027e\b\30\1\2\u027e\u0280\3\2\2\2\u027f")
        buf.write("\u027b\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0292\3\2\2\2")
        buf.write("\u0281\u0282\7G\2\2\u0282\u0283\5.\30\2\u0283\u0284\b")
        buf.write("\30\1\2\u0284\u0292\3\2\2\2\u0285\u0286\7H\2\2\u0286\u0287")
        buf.write("\5.\30\2\u0287\u0288\b\30\1\2\u0288\u0292\3\2\2\2\u0289")
        buf.write("\u028a\7J\2\2\u028a\u028b\5.\30\2\u028b\u028c\b\30\1\2")
        buf.write("\u028c\u0292\3\2\2\2\u028d\u028e\7A\2\2\u028e\u028f\5")
        buf.write(".\30\2\u028f\u0290\b\30\1\2\u0290\u0292\3\2\2\2\u0291")
        buf.write("\u0279\3\2\2\2\u0291\u0281\3\2\2\2\u0291\u0285\3\2\2\2")
        buf.write("\u0291\u0289\3\2\2\2\u0291\u028d\3\2\2\2\u0292/\3\2\2")
        buf.write("\2\u0293\u0294\7K\2\2\u0294\u0295\5\60\31\2\u0295\u0296")
        buf.write("\b\31\1\2\u0296\u02d1\3\2\2\2\u0297\u0298\7X\2\2\u0298")
        buf.write("\u0299\7\4\2\2\u0299\u029a\5\62\32\2\u029a\u029b\7\5\2")
        buf.write("\2\u029b\u029c\b\31\1\2\u029c\u02d1\3\2\2\2\u029d\u029e")
        buf.write("\7L\2\2\u029e\u029f\7\4\2\2\u029f\u02a0\5H%\2\u02a0\u02a1")
        buf.write("\7\20\2\2\u02a1\u02a2\5T+\2\u02a2\u02a3\7\5\2\2\u02a3")
        buf.write("\u02a4\b\31\1\2\u02a4\u02d1\3\2\2\2\u02a5\u02a6\7M\2\2")
        buf.write("\u02a6\u02a7\7\4\2\2\u02a7\u02a8\5H%\2\u02a8\u02a9\7\20")
        buf.write("\2\2\u02a9\u02aa\5T+\2\u02aa\u02ab\7\5\2\2\u02ab\u02ac")
        buf.write("\b\31\1\2\u02ac\u02d1\3\2\2\2\u02ad\u02ae\7\4\2\2\u02ae")
        buf.write("\u02af\5\32\16\2\u02af\u02b0\7\5\2\2\u02b0\u02b1\b\31")
        buf.write("\1\2\u02b1\u02b9\3\2\2\2\u02b2\u02b3\5\64\33\2\u02b3\u02b4")
        buf.write("\b\31\1\2\u02b4\u02b9\3\2\2\2\u02b5\u02b6\5R*\2\u02b6")
        buf.write("\u02b7\b\31\1\2\u02b7\u02b9\3\2\2\2\u02b8\u02ad\3\2\2")
        buf.write("\2\u02b8\u02b2\3\2\2\2\u02b8\u02b5\3\2\2\2\u02b9\u02c3")
        buf.write("\3\2\2\2\u02ba\u02bb\7-\2\2\u02bb\u02bc\5R*\2\u02bc\u02bd")
        buf.write("\b\31\1\2\u02bd\u02c2\3\2\2\2\u02be\u02bf\5> \2\u02bf")
        buf.write("\u02c0\b\31\1\2\u02c0\u02c2\3\2\2\2\u02c1\u02ba\3\2\2")
        buf.write("\2\u02c1\u02be\3\2\2\2\u02c2\u02c5\3\2\2\2\u02c3\u02c1")
        buf.write("\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c8\3\2\2\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c6\u02c7\7K\2\2\u02c7\u02c9\b\31\1\2")
        buf.write("\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02d1\3")
        buf.write("\2\2\2\u02ca\u02cb\5D#\2\u02cb\u02ce\b\31\1\2\u02cc\u02cd")
        buf.write("\7K\2\2\u02cd\u02cf\b\31\1\2\u02ce\u02cc\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u0293\3\2\2\2")
        buf.write("\u02d0\u0297\3\2\2\2\u02d0\u029d\3\2\2\2\u02d0\u02a5\3")
        buf.write("\2\2\2\u02d0\u02b8\3\2\2\2\u02d0\u02ca\3\2\2\2\u02d1\61")
        buf.write("\3\2\2\2\u02d2\u02d5\5\30\r\2\u02d3\u02d5\3\2\2\2\u02d4")
        buf.write("\u02d2\3\2\2\2\u02d4\u02d3\3\2\2\2\u02d5\63\3\2\2\2\u02d6")
        buf.write("\u02d7\7N\2\2\u02d7\u02d8\7\4\2\2\u02d8\u02d9\5\66\34")
        buf.write("\2\u02d9\u02da\7\5\2\2\u02da\u02db\7\6\2\2\u02db\u02dc")
        buf.write("\5\2\2\2\u02dc\u02dd\7\b\2\2\u02dd\u02de\b\33\1\2\u02de")
        buf.write("\u02f2\3\2\2\2\u02df\u02e0\7O\2\2\u02e0\u02e1\7\4\2\2")
        buf.write("\u02e1\u02e2\5\66\34\2\u02e2\u02e3\7\5\2\2\u02e3\u02e4")
        buf.write("\7\6\2\2\u02e4\u02e5\5\2\2\2\u02e5\u02e6\7\b\2\2\u02e6")
        buf.write("\u02e7\b\33\1\2\u02e7\u02f2\3\2\2\2\u02e8\u02e9\7P\2\2")
        buf.write("\u02e9\u02ea\7\4\2\2\u02ea\u02eb\5\66\34\2\u02eb\u02ec")
        buf.write("\7\5\2\2\u02ec\u02ed\7\6\2\2\u02ed\u02ee\5\2\2\2\u02ee")
        buf.write("\u02ef\7\b\2\2\u02ef\u02f0\b\33\1\2\u02f0\u02f2\3\2\2")
        buf.write("\2\u02f1\u02d6\3\2\2\2\u02f1\u02df\3\2\2\2\u02f1\u02e8")
        buf.write("\3\2\2\2\u02f2\65\3\2\2\2\u02f3\u02f4\58\35\2\u02f4\u02fb")
        buf.write("\b\34\1\2\u02f5\u02f6\7 \2\2\u02f6\u02f7\58\35\2\u02f7")
        buf.write("\u02f8\b\34\1\2\u02f8\u02fa\3\2\2\2\u02f9\u02f5\3\2\2")
        buf.write("\2\u02fa\u02fd\3\2\2\2\u02fb\u02f9\3\2\2\2\u02fb\u02fc")
        buf.write("\3\2\2\2\u02fc\u0304\3\2\2\2\u02fd\u02fb\3\2\2\2\u02fe")
        buf.write("\u02ff\7 \2\2\u02ff\u0300\5:\36\2\u0300\u0301\b\34\1\2")
        buf.write("\u0301\u0303\3\2\2\2\u0302\u02fe\3\2\2\2\u0303\u0306\3")
        buf.write("\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u030b")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0307\u0308\7 \2\2\u0308")
        buf.write("\u0309\5<\37\2\u0309\u030a\b\34\1\2\u030a\u030c\3\2\2")
        buf.write("\2\u030b\u0307\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u0323")
        buf.write("\3\2\2\2\u030d\u030e\5:\36\2\u030e\u0315\b\34\1\2\u030f")
        buf.write("\u0310\7 \2\2\u0310\u0311\5:\36\2\u0311\u0312\b\34\1\2")
        buf.write("\u0312\u0314\3\2\2\2\u0313\u030f\3\2\2\2\u0314\u0317\3")
        buf.write("\2\2\2\u0315\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u031c")
        buf.write("\3\2\2\2\u0317\u0315\3\2\2\2\u0318\u0319\7 \2\2\u0319")
        buf.write("\u031a\5<\37\2\u031a\u031b\b\34\1\2\u031b\u031d\3\2\2")
        buf.write("\2\u031c\u0318\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u0323")
        buf.write("\3\2\2\2\u031e\u031f\5<\37\2\u031f\u0320\b\34\1\2\u0320")
        buf.write("\u0323\3\2\2\2\u0321\u0323\3\2\2\2\u0322\u02f3\3\2\2\2")
        buf.write("\u0322\u030d\3\2\2\2\u0322\u031e\3\2\2\2\u0322\u0321\3")
        buf.write("\2\2\2\u0323\67\3\2\2\2\u0324\u0325\6\35\3\3\u0325\u0326")
        buf.write("\7Q\2\2\u0326\u0327\5\24\13\2\u0327\u0328\b\35\1\2\u0328")
        buf.write("\u032d\3\2\2\2\u0329\u032a\5R*\2\u032a\u032b\b\35\1\2")
        buf.write("\u032b\u032d\3\2\2\2\u032c\u0324\3\2\2\2\u032c\u0329\3")
        buf.write("\2\2\2\u032d9\3\2\2\2\u032e\u032f\5\24\13\2\u032f\u0330")
        buf.write("\7,\2\2\u0330\u0331\5\26\f\2\u0331\u0332\b\36\1\2\u0332")
        buf.write(";\3\2\2\2\u0333\u0334\7B\2\2\u0334\u0335\5R*\2\u0335\u0336")
        buf.write("\b\37\1\2\u0336=\3\2\2\2\u0337\u0338\7\4\2\2\u0338\u0339")
        buf.write("\5B\"\2\u0339\u033a\7\5\2\2\u033a\u033b\b \1\2\u033b\u0347")
        buf.write("\3\2\2\2\u033c\u033d\7.\2\2\u033d\u033e\5@!\2\u033e\u033f")
        buf.write("\7/\2\2\u033f\u0340\b \1\2\u0340\u0347\3\2\2\2\u0341\u0342")
        buf.write("\7\6\2\2\u0342\u0343\5\26\f\2\u0343\u0344\7\b\2\2\u0344")
        buf.write("\u0345\b \1\2\u0345\u0347\3\2\2\2\u0346\u0337\3\2\2\2")
        buf.write("\u0346\u033c\3\2\2\2\u0346\u0341\3\2\2\2\u0347?\3\2\2")
        buf.write("\2\u0348\u035b\5\26\f\2\u0349\u034e\7[\2\2\u034a\u034b")
        buf.write("\5\26\f\2\u034b\u034c\b!\1\2\u034c\u034f\3\2\2\2\u034d")
        buf.write("\u034f\b!\1\2\u034e\u034a\3\2\2\2\u034e\u034d\3\2\2\2")
        buf.write("\u034f\u035c\3\2\2\2\u0350\u0351\7 \2\2\u0351\u0352\5")
        buf.write("\26\f\2\u0352\u0353\b!\1\2\u0353\u0355\3\2\2\2\u0354\u0350")
        buf.write("\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0354\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\b!\1\2")
        buf.write("\u0359\u035c\3\2\2\2\u035a\u035c\b!\1\2\u035b\u0349\3")
        buf.write("\2\2\2\u035b\u0354\3\2\2\2\u035b\u035a\3\2\2\2\u035c\u0362")
        buf.write("\3\2\2\2\u035d\u035e\7[\2\2\u035e\u035f\5\26\f\2\u035f")
        buf.write("\u0360\b!\1\2\u0360\u0362\3\2\2\2\u0361\u0348\3\2\2\2")
        buf.write("\u0361\u035d\3\2\2\2\u0362A\3\2\2\2\u0363\u0364\5\30\r")
        buf.write("\2\u0364\u036a\b\"\1\2\u0365\u0366\7 \2\2\u0366\u0367")
        buf.write("\7B\2\2\u0367\u0368\5\32\16\2\u0368\u0369\b\"\1\2\u0369")
        buf.write("\u036b\3\2\2\2\u036a\u0365\3\2\2\2\u036a\u036b\3\2\2\2")
        buf.write("\u036b\u0372\3\2\2\2\u036c\u036d\7B\2\2\u036d\u036e\5")
        buf.write("\32\16\2\u036e\u036f\b\"\1\2\u036f\u0372\3\2\2\2\u0370")
        buf.write("\u0372\3\2\2\2\u0371\u0363\3\2\2\2\u0371\u036c\3\2\2\2")
        buf.write("\u0371\u0370\3\2\2\2\u0372C\3\2\2\2\u0373\u0377\7.\2\2")
        buf.write("\u0374\u0375\5F$\2\u0375\u0376\b#\1\2\u0376\u0378\3\2")
        buf.write("\2\2\u0377\u0374\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379")
        buf.write("\3\2\2\2\u0379\u037a\7/\2\2\u037a\u0394\b#\1\2\u037b\u037f")
        buf.write("\7\6\2\2\u037c\u037d\5F$\2\u037d\u037e\b#\1\2\u037e\u0380")
        buf.write("\3\2\2\2\u037f\u037c\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u0381\3\2\2\2\u0381\u0382\7\b\2\2\u0382\u0394\b#\1\2")
        buf.write("\u0383\u0384\7\\\2\2\u0384\u0394\b#\1\2\u0385\u0386\7")
        buf.write("]\2\2\u0386\u0394\b#\1\2\u0387\u0388\5L\'\2\u0388\u0389")
        buf.write("\b#\1\2\u0389\u0394\3\2\2\2\u038a\u038b\5N(\2\u038b\u038c")
        buf.write("\b#\1\2\u038c\u0394\3\2\2\2\u038d\u038e\5P)\2\u038e\u038f")
        buf.write("\b#\1\2\u038f\u0394\3\2\2\2\u0390\u0391\6#\4\3\u0391\u0392")
        buf.write("\7\60\2\2\u0392\u0394\b#\1\2\u0393\u0373\3\2\2\2\u0393")
        buf.write("\u037b\3\2\2\2\u0393\u0383\3\2\2\2\u0393\u0385\3\2\2\2")
        buf.write("\u0393\u0387\3\2\2\2\u0393\u038a\3\2\2\2\u0393\u038d\3")
        buf.write("\2\2\2\u0393\u0390\3\2\2\2\u0394E\3\2\2\2\u0395\u03c4")
        buf.write("\5\26\f\2\u0396\u0397\7 \2\2\u0397\u03ad\5\26\f\2\u0398")
        buf.write("\u0399\7[\2\2\u0399\u039a\5\26\f\2\u039a\u039b\b$\1\2")
        buf.write("\u039b\u03ae\3\2\2\2\u039c\u03a3\b$\1\2\u039d\u039e\7")
        buf.write(" \2\2\u039e\u039f\5\26\f\2\u039f\u03a0\b$\1\2\u03a0\u03a2")
        buf.write("\3\2\2\2\u03a1\u039d\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3")
        buf.write("\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03ab\3\2\2\2")
        buf.write("\u03a5\u03a3\3\2\2\2\u03a6\u03a7\7\20\2\2\u03a7\u03a8")
        buf.write("\5\26\f\2\u03a8\u03a9\b$\1\2\u03a9\u03ac\3\2\2\2\u03aa")
        buf.write("\u03ac\b$\1\2\u03ab\u03a6\3\2\2\2\u03ab\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ae\3\2\2\2\u03ad\u0398\3\2\2\2\u03ad\u039c\3")
        buf.write("\2\2\2\u03ae\u03c5\3\2\2\2\u03af\u03b0\7[\2\2\u03b0\u03b1")
        buf.write("\5\26\f\2\u03b1\u03b2\b$\1\2\u03b2\u03c5\3\2\2\2\u03b3")
        buf.write("\u03b9\b$\1\2\u03b4\u03b5\7\20\2\2\u03b5\u03b6\5\26\f")
        buf.write("\2\u03b6\u03b7\b$\1\2\u03b7\u03ba\3\2\2\2\u03b8\u03ba")
        buf.write("\b$\1\2\u03b9\u03b4\3\2\2\2\u03b9\u03b8\3\2\2\2\u03ba")
        buf.write("\u03c5\3\2\2\2\u03bb\u03bc\7\r\2\2\u03bc\u03c2\5H%\2\u03bd")
        buf.write("\u03be\7\20\2\2\u03be\u03bf\5T+\2\u03bf\u03c0\b$\1\2\u03c0")
        buf.write("\u03c3\3\2\2\2\u03c1\u03c3\b$\1\2\u03c2\u03bd\3\2\2\2")
        buf.write("\u03c2\u03c1\3\2\2\2\u03c3\u03c5\3\2\2\2\u03c4\u0396\3")
        buf.write("\2\2\2\u03c4\u03af\3\2\2\2\u03c4\u03b3\3\2\2\2\u03c4\u03bb")
        buf.write("\3\2\2\2\u03c5G\3\2\2\2\u03c6\u03c7\5J&\2\u03c7\u03ce")
        buf.write("\b%\1\2\u03c8\u03c9\7 \2\2\u03c9\u03ca\5J&\2\u03ca\u03cb")
        buf.write("\b%\1\2\u03cb\u03cd\3\2\2\2\u03cc\u03c8\3\2\2\2\u03cd")
        buf.write("\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cfI\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1\u03d2\5\22\n")
        buf.write("\2\u03d2\u03d3\7>\2\2\u03d3\u03d4\5\26\f\2\u03d4\u03d5")
        buf.write("\b&\1\2\u03d5K\3\2\2\2\u03d6\u03da\7R\2\2\u03d7\u03d8")
        buf.write("\5N(\2\u03d8\u03d9\b\'\1\2\u03d9\u03db\3\2\2\2\u03da\u03d7")
        buf.write("\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc")
        buf.write("\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\7S\2\2")
        buf.write("\u03df\u03e0\b\'\1\2\u03e0M\3\2\2\2\u03e1\u03f3\7R\2\2")
        buf.write("\u03e2\u03e3\7A\2\2\u03e3\u03e6\b(\1\2\u03e4\u03e6\b(")
        buf.write("\1\2\u03e5\u03e2\3\2\2\2\u03e5\u03e4\3\2\2\2\u03e6\u03eb")
        buf.write("\3\2\2\2\u03e7\u03e8\7Y\2\2\u03e8\u03ec\b(\1\2\u03e9\u03ea")
        buf.write("\7Z\2\2\u03ea\u03ec\b(\1\2\u03eb\u03e7\3\2\2\2\u03eb\u03e9")
        buf.write("\3\2\2\2\u03ec\u03f0\3\2\2\2\u03ed\u03ee\7C\2\2\u03ee")
        buf.write("\u03ef\7Y\2\2\u03ef\u03f1\b(\1\2\u03f0\u03ed\3\2\2\2\u03f0")
        buf.write("\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\b(\1\2")
        buf.write("\u03f3\u03e5\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f3\3")
        buf.write("\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8")
        buf.write("\7S\2\2\u03f8\u03f9\b(\1\2\u03f9O\3\2\2\2\u03fa\u03fb")
        buf.write("\7Y\2\2\u03fb\u0405\b)\1\2\u03fc\u03fd\7Z\2\2\u03fd\u0405")
        buf.write("\b)\1\2\u03fe\u03ff\7T\2\2\u03ff\u0405\b)\1\2\u0400\u0401")
        buf.write("\7U\2\2\u0401\u0405\b)\1\2\u0402\u0403\7V\2\2\u0403\u0405")
        buf.write("\b)\1\2\u0404\u03fa\3\2\2\2\u0404\u03fc\3\2\2\2\u0404")
        buf.write("\u03fe\3\2\2\2\u0404\u0400\3\2\2\2\u0404\u0402\3\2\2\2")
        buf.write("\u0405Q\3\2\2\2\u0406\u0407\7W\2\2\u0407\u0408\b*\1\2")
        buf.write("\u0408S\3\2\2\2\u0409\u040a\5\26\f\2\u040a\u040b\b+\1")
        buf.write("\2\u040bU\3\2\2\2\u040c\u040d\5\22\n\2\u040d\u0414\b,")
        buf.write("\1\2\u040e\u040f\7 \2\2\u040f\u0410\5\22\n\2\u0410\u0411")
        buf.write("\b,\1\2\u0411\u0413\3\2\2\2\u0412\u040e\3\2\2\2\u0413")
        buf.write("\u0416\3\2\2\2\u0414\u0412\3\2\2\2\u0414\u0415\3\2\2\2")
        buf.write("\u0415W\3\2\2\2\u0416\u0414\3\2\2\2X]o\u0087\u0090\u009e")
        buf.write("\u00a6\u00b7\u00e9\u00eb\u00f7\u0105\u0119\u0132\u014d")
        buf.write("\u0158\u015e\u0160\u0167\u0172\u0178\u017d\u0186\u018a")
        buf.write("\u0197\u01a1\u01ae\u01b0\u01bb\u01cb\u01db\u01dd\u01e8")
        buf.write("\u01f6\u01f9\u01fc\u0204\u020e\u0219\u023e\u024a\u024c")
        buf.write("\u0265\u0267\u0274\u0276\u027f\u0291\u02b8\u02c1\u02c3")
        buf.write("\u02c8\u02ce\u02d0\u02d4\u02f1\u02fb\u0304\u030b\u0315")
        buf.write("\u031c\u0322\u032c\u0346\u034e\u0356\u035b\u0361\u036a")
        buf.write("\u0371\u0377\u037f\u0393\u03a3\u03ab\u03ad\u03b9\u03c2")
        buf.write("\u03c4\u03ce\u03dc\u03e5\u03eb\u03f0\u03f5\u0404\u0414")
        return buf.getvalue()


class SetlXgrammarParser ( Parser ):

    grammarFileName = "SetlXgrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'class'", "'('", "')'", "'{'", "'static'", 
                     "'}'", "'if'", "'else'", "'switch'", "'case'", "':'", 
                     "'default'", "'for'", "'|'", "'while'", "'do'", "';'", 
                     "'try'", "'catchLng'", "'catchUsr'", "'catch'", "'check'", 
                     "'afterBacktrack'", "'backtrack'", "'break'", "'continue'", 
                     "'exit'", "'return'", "'assert'", "','", "'+='", "'-='", 
                     "'*='", "'/='", "'\\='", "'%='", "'match'", "'scan'", 
                     "'using'", "'regex'", "'as'", "':='", "'.'", "'['", 
                     "']'", "'_'", "'<==>'", "'<!=>'", "'|->'", "'|=>'", 
                     "'=>'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'in'", "'notin'", "'+'", "'-'", "'*'", 
                     "'/'", "'\\'", "'%'", "'><'", "'+/'", "'*/'", "'**'", 
                     "'#'", "'!'", "'forall'", "'exists'", "'procedure'", 
                     "'cachedProcedure'", "'closure'", "'rw'", "'<<'", "'>>'", 
                     "'om'", "'true'", "'false'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'..'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ID", "TERM", "NUMBER", "DOUBLE", "RANGE_SIGN", 
                      "STRING", "LITERAL", "LINE_COMMENT", "MULTI_COMMENT", 
                      "WS", "REMAINDER" ]

    RULE_block = 0
    RULE_statement = 1
    RULE_assignmentOther = 2
    RULE_setlxmatch = 3
    RULE_scan = 4
    RULE_regexBranch = 5
    RULE_assignment = 6
    RULE_assignmentDirect = 7
    RULE_assignable = 8
    RULE_assignableVariable = 9
    RULE_expr = 10
    RULE_exprList = 11
    RULE_exprContent = 12
    RULE_lambdaProcedure = 13
    RULE_lambdaParameters = 14
    RULE_implication = 15
    RULE_disjunction = 16
    RULE_conjunction = 17
    RULE_comparison = 18
    RULE_setlxSum = 19
    RULE_product = 20
    RULE_setlxReduce = 21
    RULE_prefixOperation = 22
    RULE_factor = 23
    RULE_termArguments = 24
    RULE_procedure = 25
    RULE_procedureParameters = 26
    RULE_procedureParameter = 27
    RULE_procedureDefaultParameter = 28
    RULE_procedureListParameter = 29
    RULE_call = 30
    RULE_collectionAccessParams = 31
    RULE_callParameters = 32
    RULE_value = 33
    RULE_collectionBuilder = 34
    RULE_iteratorChain = 35
    RULE_iterator = 36
    RULE_matrix = 37
    RULE_vector = 38
    RULE_atomicValue = 39
    RULE_variable = 40
    RULE_condition = 41
    RULE_assignmentList = 42

    ruleNames =  [ "block", "statement", "assignmentOther", "setlxmatch", 
                   "scan", "regexBranch", "assignment", "assignmentDirect", 
                   "assignable", "assignableVariable", "expr", "exprList", 
                   "exprContent", "lambdaProcedure", "lambdaParameters", 
                   "implication", "disjunction", "conjunction", "comparison", 
                   "setlxSum", "product", "setlxReduce", "prefixOperation", 
                   "factor", "termArguments", "procedure", "procedureParameters", 
                   "procedureParameter", "procedureDefaultParameter", "procedureListParameter", 
                   "call", "collectionAccessParams", "callParameters", "value", 
                   "collectionBuilder", "iteratorChain", "iterator", "matrix", 
                   "vector", "atomicValue", "variable", "condition", "assignmentList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    ID=85
    TERM=86
    NUMBER=87
    DOUBLE=88
    RANGE_SIGN=89
    STRING=90
    LITERAL=91
    LINE_COMMENT=92
    MULTI_COMMENT=93
    WS=94
    REMAINDER=95

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blk = None
            self._statement = None # StatementContext

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.StatementContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SetlXgrammarParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_block)

        stmnts = []
            
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 86
                    localctx._statement = self.statement()
                    stmnts.append(localctx._statement.stmnt) 
                self.state = 93
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            localctx.blk = Block(stmnts)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmnt = None
            self._ID = None # Token
            self._procedureParameters = None # ProcedureParametersContext
            self.b1 = None # BlockContext
            self.b2 = None # BlockContext
            self.c1 = None # ConditionContext
            self.c2 = None # ConditionContext
            self.b3 = None # BlockContext
            self._setlxmatch = None # SetlxmatchContext
            self._scan = None # ScanContext
            self._iteratorChain = None # IteratorChainContext
            self._condition = None # ConditionContext
            self._block = None # BlockContext
            self.v1 = None # AssignableVariableContext
            self.v2 = None # AssignableVariableContext
            self._expr = None # ExprContext
            self._assignmentOther = None # AssignmentOtherContext
            self._assignment = None # AssignmentContext

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def procedureParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureParametersContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.BlockContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,i)


        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ConditionContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,i)


        def setlxmatch(self):
            return self.getTypedRuleContext(SetlXgrammarParser.SetlxmatchContext,0)


        def scan(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ScanContext,0)


        def iteratorChain(self):
            return self.getTypedRuleContext(SetlXgrammarParser.IteratorChainContext,0)


        def assignableVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.AssignableVariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,i)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def assignmentOther(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentOtherContext,0)


        def assignment(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SetlXgrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)

        else_list = []
        caseList = []
        tryList = []
        expression = None
        condition = None
        static = None
        block = None
        default = None
            
        self._la = 0 # Token type
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 96
                self.match(SetlXgrammarParser.T__0)
                self.state = 97
                localctx._ID = self.match(SetlXgrammarParser.ID)
                self.state = 98
                self.match(SetlXgrammarParser.T__1)
                self.state = 99
                localctx._procedureParameters = self.procedureParameters(True)
                self.state = 100
                self.match(SetlXgrammarParser.T__2)
                self.state = 101
                self.match(SetlXgrammarParser.T__3)
                self.state = 102
                localctx.b1 = self.block()
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__4:
                    self.state = 103
                    self.match(SetlXgrammarParser.T__4)
                    self.state = 104
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 105
                    localctx.b2 = self.block()
                    self.state = 106
                    self.match(SetlXgrammarParser.T__5)
                    static = localctx.b2.blk


                self.state = 111
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = ClassConstructor((None if localctx._ID is None else localctx._ID.text), localctx._procedureParameters.paramList, localctx.b1.blk, static)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 114
                self.match(SetlXgrammarParser.T__6)
                self.state = 115
                self.match(SetlXgrammarParser.T__1)
                self.state = 116
                localctx.c1 = self.condition()
                self.state = 117
                self.match(SetlXgrammarParser.T__2)
                self.state = 118
                self.match(SetlXgrammarParser.T__3)
                self.state = 119
                localctx.b1 = self.block()
                self.state = 120
                self.match(SetlXgrammarParser.T__5)
                self.state = 133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 121
                        self.match(SetlXgrammarParser.T__7)
                        self.state = 122
                        self.match(SetlXgrammarParser.T__6)
                        self.state = 123
                        self.match(SetlXgrammarParser.T__1)
                        self.state = 124
                        localctx.c2 = self.condition()
                        self.state = 125
                        self.match(SetlXgrammarParser.T__2)
                        self.state = 126
                        self.match(SetlXgrammarParser.T__3)
                        self.state = 127
                        localctx.b2 = self.block()
                        self.state = 128
                        self.match(SetlXgrammarParser.T__5)
                        else_list.append(IfThenBranch(localctx.c2.cnd,localctx.b2.blk,[])) 
                        			 
                    self.state = 135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 142
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 136
                    self.match(SetlXgrammarParser.T__7)
                    self.state = 137
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 138
                    localctx.b3 = self.block()
                    self.state = 139
                    self.match(SetlXgrammarParser.T__5)
                    else_list.append(localctx.b3.blk) 


                localctx.stmnt = IfThen(localctx.c1.cnd,localctx.b1.blk,else_list) 
                		
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 146
                self.match(SetlXgrammarParser.T__8)
                self.state = 147
                self.match(SetlXgrammarParser.T__3)
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SetlXgrammarParser.T__9:
                    self.state = 148
                    self.match(SetlXgrammarParser.T__9)
                    self.state = 149
                    localctx.c1 = self.condition()
                    self.state = 150
                    self.match(SetlXgrammarParser.T__10)
                    self.state = 151
                    localctx.b1 = self.block()
                    caseList.append((localctx.c1.cnd, localctx.b1.blk)) 
                    self.state = 158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__11:
                    self.state = 159
                    self.match(SetlXgrammarParser.T__11)
                    self.state = 160
                    self.match(SetlXgrammarParser.T__10)
                    self.state = 161
                    localctx.b2 = self.block()
                    default = localctx.b2.blk


                self.state = 166
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = Switch(caseList, default) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 168
                localctx._setlxmatch = self.setlxmatch()
                localctx.stmnt = localctx._setlxmatch.m
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 171
                localctx._scan = self.scan()
                localctx.stmnt = localctx._scan.s
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 174
                self.match(SetlXgrammarParser.T__12)
                self.state = 175
                self.match(SetlXgrammarParser.T__1)
                self.state = 176
                localctx._iteratorChain = self.iteratorChain(False)
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__13:
                    self.state = 177
                    self.match(SetlXgrammarParser.T__13)
                    self.state = 178
                    localctx._condition = self.condition()
                    condition = localctx._condition.cnd


                self.state = 183
                self.match(SetlXgrammarParser.T__2)
                self.state = 184
                self.match(SetlXgrammarParser.T__3)
                self.state = 185
                localctx._block = self.block()
                self.state = 186
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = SetlXFor(localctx._iteratorChain.ic, condition, localctx._block.blk) 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 189
                self.match(SetlXgrammarParser.T__14)
                self.state = 190
                self.match(SetlXgrammarParser.T__1)
                self.state = 191
                localctx._condition = self.condition()
                self.state = 192
                self.match(SetlXgrammarParser.T__2)
                self.state = 193
                self.match(SetlXgrammarParser.T__3)
                self.state = 194
                localctx._block = self.block()
                self.state = 195
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = SetlXWhile(localctx._condition.cnd, localctx._block.blk) 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 198
                self.match(SetlXgrammarParser.T__15)
                self.state = 199
                self.match(SetlXgrammarParser.T__3)
                self.state = 200
                localctx._block = self.block()
                self.state = 201
                self.match(SetlXgrammarParser.T__5)
                self.state = 202
                self.match(SetlXgrammarParser.T__14)
                self.state = 203
                self.match(SetlXgrammarParser.T__1)
                self.state = 204
                localctx._condition = self.condition()
                self.state = 205
                self.match(SetlXgrammarParser.T__2)
                self.state = 206
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = DoWhile(localctx._condition.cnd, localctx._block.blk) 
                		
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 209
                self.match(SetlXgrammarParser.T__17)
                self.state = 210
                self.match(SetlXgrammarParser.T__3)
                self.state = 211
                localctx.b1 = self.block()
                self.state = 212
                self.match(SetlXgrammarParser.T__5)
                self.state = 233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 231
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SetlXgrammarParser.T__18]:
                            self.state = 213
                            self.match(SetlXgrammarParser.T__18)
                            self.state = 214
                            self.match(SetlXgrammarParser.T__1)
                            self.state = 215
                            localctx.v1 = self.assignableVariable()
                            self.state = 216
                            self.match(SetlXgrammarParser.T__2)
                            self.state = 217
                            self.match(SetlXgrammarParser.T__3)
                            self.state = 218
                            localctx.b2 = self.block()
                            self.state = 219
                            self.match(SetlXgrammarParser.T__5)
                            tryList.append(TryCatchLngBranch(localctx.v1.v, localctx.b2.blk))
                            pass
                        elif token in [SetlXgrammarParser.T__19]:
                            self.state = 222
                            self.match(SetlXgrammarParser.T__19)
                            self.state = 223
                            self.match(SetlXgrammarParser.T__1)
                            self.state = 224
                            localctx.v1 = self.assignableVariable()
                            self.state = 225
                            self.match(SetlXgrammarParser.T__2)
                            self.state = 226
                            self.match(SetlXgrammarParser.T__3)
                            self.state = 227
                            localctx.b2 = self.block()
                            self.state = 228
                            self.match(SetlXgrammarParser.T__5)
                            tryList.append(TryCatchUsrBranch(localctx.v1.v, localctx.b2.blk))
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 235
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                self.state = 245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 236
                    self.match(SetlXgrammarParser.T__20)
                    self.state = 237
                    self.match(SetlXgrammarParser.T__1)
                    self.state = 238
                    localctx.v2 = self.assignableVariable()
                    self.state = 239
                    self.match(SetlXgrammarParser.T__2)
                    self.state = 240
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 241
                    localctx.b3 = self.block()
                    self.state = 242
                    self.match(SetlXgrammarParser.T__5)
                    tryList.append(TryCatchBranch(localctx.v2.v, localctx.b3.blk)) 


                localctx.stmnt = TryCatch(localctx.b1.blk, tryList) 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 249
                self.match(SetlXgrammarParser.T__21)
                self.state = 250
                self.match(SetlXgrammarParser.T__3)
                self.state = 251
                localctx.b1 = self.block()
                self.state = 252
                self.match(SetlXgrammarParser.T__5)
                self.state = 259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 253
                    self.match(SetlXgrammarParser.T__22)
                    self.state = 254
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 255
                    localctx.b2 = self.block()
                    block = localctx.b2.blk
                    self.state = 257
                    self.match(SetlXgrammarParser.T__5)


                localctx.stmnt = Check(localctx.b1.blk, block) 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 263
                self.match(SetlXgrammarParser.T__23)
                self.state = 264
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = Backtrack() 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 266
                self.match(SetlXgrammarParser.T__24)
                self.state = 267
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXBreak() 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 269
                self.match(SetlXgrammarParser.T__25)
                self.state = 270
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXContinue() 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 272
                self.match(SetlXgrammarParser.T__26)
                self.state = 273
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = Exit() 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 275
                self.match(SetlXgrammarParser.T__27)
                self.state = 279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 276
                    localctx._expr = self.expr(False)
                    expression = localctx._expr.ex 


                self.state = 281
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXReturn(expression) 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 283
                self.match(SetlXgrammarParser.T__28)
                self.state = 284
                self.match(SetlXgrammarParser.T__1)
                self.state = 285
                localctx._condition = self.condition()
                self.state = 286
                self.match(SetlXgrammarParser.T__29)
                self.state = 287
                localctx._expr = self.expr(False)
                self.state = 288
                self.match(SetlXgrammarParser.T__2)
                self.state = 289
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXAssert(localctx._condition.cnd, localctx._expr.ex)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 292
                localctx._assignmentOther = self.assignmentOther()
                self.state = 293
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = localctx._assignmentOther.assign 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 296
                localctx._assignment = self.assignment()
                self.state = 297
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = localctx._assignment.assign 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 300
                localctx._expr = self.expr(False)
                self.state = 301
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = localctx._expr.ex
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOtherContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None
            self._assignable = None # AssignableContext
            self.e = None # ExprContext

        def assignable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignmentOther

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOther" ):
                listener.enterAssignmentOther(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOther" ):
                listener.exitAssignmentOther(self)




    def assignmentOther(self):

        localctx = SetlXgrammarParser.AssignmentOtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_assignmentOther)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            localctx._assignable = self.assignable(False)
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__30]:
                self.state = 307
                self.match(SetlXgrammarParser.T__30)
                self.state = 308
                localctx.e = self.expr(False)
                localctx.assign = SumAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__31]:
                self.state = 311
                self.match(SetlXgrammarParser.T__31)
                self.state = 312
                localctx.e = self.expr(False)
                localctx.assign = DifferenceAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__32]:
                self.state = 315
                self.match(SetlXgrammarParser.T__32)
                self.state = 316
                localctx.e = self.expr(False)
                localctx.assign = ProductAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__33]:
                self.state = 319
                self.match(SetlXgrammarParser.T__33)
                self.state = 320
                localctx.e = self.expr(False)
                localctx.assign = QuotientAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__34]:
                self.state = 323
                self.match(SetlXgrammarParser.T__34)
                self.state = 324
                localctx.e = self.expr(False)
                localctx.assign = IntegerDivisionAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__35]:
                self.state = 327
                self.match(SetlXgrammarParser.T__35)
                self.state = 328
                localctx.e = self.expr(False)
                localctx.assign = ModuloAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetlxmatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None
            self.c1 = None # ConditionContext
            self.b1 = None # BlockContext
            self.b4 = None # BlockContext

        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprListContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,i)


        def regexBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.RegexBranchContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.RegexBranchContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.BlockContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,i)


        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ConditionContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_setlxmatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetlxmatch" ):
                listener.enterSetlxmatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetlxmatch" ):
                listener.exitSetlxmatch(self)




    def setlxmatch(self):

        localctx = SetlXgrammarParser.SetlxmatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_setlxmatch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(SetlXgrammarParser.T__36)
            self.state = 334
            self.match(SetlXgrammarParser.T__1)
            self.state = 335
            self.expr(False)
            self.state = 336
            self.match(SetlXgrammarParser.T__2)
            self.state = 337
            self.match(SetlXgrammarParser.T__3)
            self.state = 348 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 348
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__9]:
                    self.state = 338
                    self.match(SetlXgrammarParser.T__9)
                    self.state = 339
                    self.exprList(True)
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SetlXgrammarParser.T__13:
                        self.state = 340
                        self.match(SetlXgrammarParser.T__13)
                        self.state = 341
                        localctx.c1 = self.condition()


                    self.state = 344
                    self.match(SetlXgrammarParser.T__10)
                    self.state = 345
                    localctx.b1 = self.block()
                    pass
                elif token in [SetlXgrammarParser.T__39]:
                    self.state = 347
                    self.regexBranch()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 350 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SetlXgrammarParser.T__9 or _la==SetlXgrammarParser.T__39):
                    break

            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__11:
                self.state = 352
                self.match(SetlXgrammarParser.T__11)
                self.state = 353
                self.match(SetlXgrammarParser.T__10)
                self.state = 354
                localctx.b4 = self.block()



            self.state = 359
            self.match(SetlXgrammarParser.T__5)
            localctx.m = Match()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def regexBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.RegexBranchContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.RegexBranchContext,i)


        def block(self):
            return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_scan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScan" ):
                listener.enterScan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScan" ):
                listener.exitScan(self)




    def scan(self):

        localctx = SetlXgrammarParser.ScanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_scan)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(SetlXgrammarParser.T__37)
            self.state = 363
            self.match(SetlXgrammarParser.T__1)
            self.state = 364
            self.expr(False)
            self.state = 365
            self.match(SetlXgrammarParser.T__2)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__38:
                self.state = 366
                self.match(SetlXgrammarParser.T__38)
                self.state = 367
                self.assignableVariable()


            self.state = 370
            self.match(SetlXgrammarParser.T__3)
            self.state = 372 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 371
                self.regexBranch()
                self.state = 374 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SetlXgrammarParser.T__39):
                    break

            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__11:
                self.state = 376
                self.match(SetlXgrammarParser.T__11)
                self.state = 377
                self.match(SetlXgrammarParser.T__10)
                self.state = 378
                self.block()


            self.state = 381
            self.match(SetlXgrammarParser.T__5)
            localctx.s = Scan()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RegexBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rb = None

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,i)


        def block(self):
            return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,0)


        def condition(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_regexBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexBranch" ):
                listener.enterRegexBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexBranch" ):
                listener.exitRegexBranch(self)




    def regexBranch(self):

        localctx = SetlXgrammarParser.RegexBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_regexBranch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(SetlXgrammarParser.T__39)
            self.state = 385
            self.expr(False)
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__40:
                self.state = 386
                self.match(SetlXgrammarParser.T__40)
                self.state = 387
                self.expr(True)


            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__13:
                self.state = 390
                self.match(SetlXgrammarParser.T__13)
                self.state = 391
                self.condition()


            self.state = 394
            self.match(SetlXgrammarParser.T__10)
            self.state = 395
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None
            self._ID = None # Token
            self._procedure = None # ProcedureContext
            self._assignmentDirect = None # AssignmentDirectContext

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def procedure(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureContext,0)


        def assignmentDirect(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentDirectContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = SetlXgrammarParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_assignment)
        try:
            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                localctx._ID = self.match(SetlXgrammarParser.ID)
                self.state = 398
                self.match(SetlXgrammarParser.T__41)
                self.state = 399
                localctx._procedure = self.procedure()
                localctx.assign = ProcedureDefinition(localctx._procedure.pd, (None if localctx._ID is None else localctx._ID.text))
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                localctx._assignmentDirect = self.assignmentDirect()
                localctx.assign = localctx._assignmentDirect.assign
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentDirectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None
            self._assignable = None # AssignableContext
            self._assignmentDirect = None # AssignmentDirectContext
            self._exprContent = None # ExprContentContext

        def assignable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,0)


        def assignmentDirect(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentDirectContext,0)


        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignmentDirect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentDirect" ):
                listener.enterAssignmentDirect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentDirect" ):
                listener.exitAssignmentDirect(self)




    def assignmentDirect(self):

        localctx = SetlXgrammarParser.AssignmentDirectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assignmentDirect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            localctx._assignable = self.assignable(False)
            self.state = 408
            self.match(SetlXgrammarParser.T__41)
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 409
                localctx._assignmentDirect = self.assignmentDirect()
                localctx.assign = Assignment([localctx._assignable.a]+localctx._assignmentDirect.assign.assignables, localctx._assignmentDirect.assign.right_hand_side) 
                pass

            elif la_ == 2:
                self.state = 412
                localctx._exprContent = self.exprContent(False)
                localctx.assign = Assignment([localctx._assignable.a], localctx._exprContent.ex) 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.a = None
            self._assignableVariable = None # AssignableVariableContext
            self._variable = None # VariableContext
            self._exprList = None # ExprListContext
            self._assignmentList = None # AssignmentListContext
            self.enableIgnore = enableIgnore

        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprListContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,i)


        def assignmentList(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)




    def assignable(self, enableIgnore):

        localctx = SetlXgrammarParser.AssignableContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 16, self.RULE_assignable)
        self._la = 0 # Token type
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                localctx._assignableVariable = self.assignableVariable()
                localctx.a = localctx._assignableVariable.v
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SetlXgrammarParser.T__42 or _la==SetlXgrammarParser.T__43:
                    self.state = 428
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SetlXgrammarParser.T__42]:
                        self.state = 419
                        self.match(SetlXgrammarParser.T__42)
                        self.state = 420
                        localctx._variable = self.variable()
                        localctx.a = AssignableMember(localctx.a, localctx._variable.v)
                        pass
                    elif token in [SetlXgrammarParser.T__43]:
                        self.state = 423
                        self.match(SetlXgrammarParser.T__43)
                        self.state = 424
                        localctx._exprList = self.exprList(False)
                        self.state = 425
                        self.match(SetlXgrammarParser.T__44)
                        localctx.a = AssignableCollectionAccess(localctx.a, localctx._exprList.exprs)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(SetlXgrammarParser.T__43)
                self.state = 434
                localctx._assignmentList = self.assignmentList()
                self.state = 435
                self.match(SetlXgrammarParser.T__44)
                localctx.a = AssignableList(localctx._assignmentList.al)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                if not localctx.enableIgnore:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$enableIgnore")
                self.state = 439
                self.match(SetlXgrammarParser.T__45)
                localctx.a = AssignableIgnore()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignableVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.v = None
            self._ID = None # Token

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignableVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableVariable" ):
                listener.enterAssignableVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableVariable" ):
                listener.exitAssignableVariable(self)




    def assignableVariable(self):

        localctx = SetlXgrammarParser.AssignableVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_assignableVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            localctx._ID = self.match(SetlXgrammarParser.ID)
            localctx.v = AssignableVariable((None if localctx._ID is None else localctx._ID.text)) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.ex = None
            self._exprContent = None # ExprContentContext
            self.enableIgnore = enableIgnore

        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self, enableIgnore):

        localctx = SetlXgrammarParser.ExprContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 20, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            localctx._exprContent = self.exprContent(localctx.enableIgnore)
            localctx.ex = localctx._exprContent.ex 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.exprs = None
            self._exprContent = None # ExprContentContext
            self.enableIgnore = enableIgnore

        def exprContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContentContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self, enableIgnore):

        localctx = SetlXgrammarParser.ExprListContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 22, self.RULE_exprList)

        localctx.exprs = []
            
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            localctx._exprContent = self.exprContent(localctx.enableIgnore)
            localctx.exprs.append(localctx._exprContent.ex)
            self.state = 457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 452
                    localctx._exprContent = self.exprContent(localctx.enableIgnore)
                    localctx.exprs.append(localctx._exprContent.ex) 
                self.state = 459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.ex = None
            self._lambdaProcedure = None # LambdaProcedureContext
            self._implication = None # ImplicationContext
            self.enableIgnore = enableIgnore

        def lambdaProcedure(self):
            return self.getTypedRuleContext(SetlXgrammarParser.LambdaProcedureContext,0)


        def implication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ImplicationContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ImplicationContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_exprContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprContent" ):
                listener.enterExprContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprContent" ):
                listener.exitExprContent(self)




    def exprContent(self, enableIgnore):

        localctx = SetlXgrammarParser.ExprContentContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 24, self.RULE_exprContent)
        try:
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                localctx._lambdaProcedure = self.lambdaProcedure()
                localctx.ex = localctx._lambdaProcedure.lp 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                localctx._implication = self.implication(localctx.enableIgnore)
                localctx.ex = localctx._implication.i
                self.state = 473
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__46]:
                    self.state = 465
                    self.match(SetlXgrammarParser.T__46)
                    self.state = 466
                    localctx._implication = self.implication(localctx.enableIgnore)
                    localctx.ex = BooleanEqual(localctx.ex,localctx._implication.i) 
                    pass
                elif token in [SetlXgrammarParser.T__47]:
                    self.state = 469
                    self.match(SetlXgrammarParser.T__47)
                    self.state = 470
                    localctx._implication = self.implication(localctx.enableIgnore)
                    localctx.ex = BooleanNotEqual(localctx.ex,localctx._implication.i) 
                    pass
                elif token in [SetlXgrammarParser.T__2, SetlXgrammarParser.T__5, SetlXgrammarParser.T__10, SetlXgrammarParser.T__13, SetlXgrammarParser.T__16, SetlXgrammarParser.T__29, SetlXgrammarParser.T__40, SetlXgrammarParser.T__44, SetlXgrammarParser.RANGE_SIGN]:
                    pass
                else:
                    pass
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lp = None
            self._lambdaParameters = None # LambdaParametersContext
            self._expr = None # ExprContext

        def lambdaParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.LambdaParametersContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_lambdaProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaProcedure" ):
                listener.enterLambdaProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaProcedure" ):
                listener.exitLambdaProcedure(self)




    def lambdaProcedure(self):

        localctx = SetlXgrammarParser.LambdaProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_lambdaProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            localctx._lambdaParameters = self.lambdaParameters()
            self.state = 486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__48]:
                self.state = 478
                self.match(SetlXgrammarParser.T__48)
                self.state = 479
                localctx._expr = self.expr(False)
                localctx.lp = LambdaProcedure(localctx._lambdaParameters.paramList, localctx._expr.ex)
                pass
            elif token in [SetlXgrammarParser.T__49]:
                self.state = 482
                self.match(SetlXgrammarParser.T__49)
                self.state = 483
                localctx._expr = self.expr(False)
                localctx.lp = LambdaClosure(localctx._lambdaParameters.paramList, localctx._expr.ex)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.paramList = None
            self._variable = None # VariableContext
            self.v1 = None # VariableContext
            self.v2 = None # VariableContext

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = SetlXgrammarParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdaParameters)

        localctx.paramList = []
            
        self._la = 0 # Token type
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 488
                localctx._variable = self.variable()
                localctx.paramList.append(Parameter(localctx._variable.v, None)) 
                pass
            elif token in [SetlXgrammarParser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.match(SetlXgrammarParser.T__43)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.ID:
                    self.state = 492
                    localctx.v1 = self.variable()
                    localctx.paramList.append(Parameter(localctx.v1.v, None))
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SetlXgrammarParser.T__29:
                        self.state = 494
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 495
                        localctx.v2 = self.variable()
                        localctx.paramList.append(Parameter(localctx.v2.v, None))
                        self.state = 502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 505
                self.match(SetlXgrammarParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.i = None
            self._disjunction = None # DisjunctionContext
            self._implication = None # ImplicationContext
            self.enableIgnore = enableIgnore

        def disjunction(self):
            return self.getTypedRuleContext(SetlXgrammarParser.DisjunctionContext,0)


        def implication(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ImplicationContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_implication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplication" ):
                listener.enterImplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplication" ):
                listener.exitImplication(self)




    def implication(self, enableIgnore):

        localctx = SetlXgrammarParser.ImplicationContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 30, self.RULE_implication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            localctx._disjunction = self.disjunction(localctx.enableIgnore)
            localctx.i = localctx._disjunction.d
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__50:
                self.state = 510
                self.match(SetlXgrammarParser.T__50)
                self.state = 511
                localctx._implication = self.implication(localctx.enableIgnore)
                localctx.i = Implication(localctx.i, localctx._implication.i) 


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.d = None
            self._conjunction = None # ConjunctionContext
            self.enableIgnore = enableIgnore

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ConjunctionContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self, enableIgnore):

        localctx = SetlXgrammarParser.DisjunctionContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 32, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            localctx._conjunction = self.conjunction(localctx.enableIgnore)
            localctx.d = localctx._conjunction.c
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__51:
                self.state = 518
                self.match(SetlXgrammarParser.T__51)
                self.state = 519
                localctx._conjunction = self.conjunction(localctx.enableIgnore)
                localctx.d = Disjunction(localctx.d, localctx._conjunction.c) 
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.c = None
            self._comparison = None # ComparisonContext
            self.enableIgnore = enableIgnore

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ComparisonContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self, enableIgnore):

        localctx = SetlXgrammarParser.ConjunctionContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 34, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            localctx._comparison = self.comparison(localctx.enableIgnore)
            localctx.c = localctx._comparison.c
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__52:
                self.state = 529
                self.match(SetlXgrammarParser.T__52)
                self.state = 530
                localctx._comparison = self.comparison(localctx.enableIgnore)
                localctx.c = Conjunction(localctx.c, localctx._comparison.c) 
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.c = None
            self.s1 = None # SetlxSumContext
            self.s2 = None # SetlxSumContext
            self.enableIgnore = enableIgnore

        def setlxSum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.SetlxSumContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.SetlxSumContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self, enableIgnore):

        localctx = SetlXgrammarParser.ComparisonContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 36, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            localctx.s1 = self.setlxSum(localctx.enableIgnore)
            localctx.c = localctx.s1.s 
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__53]:
                self.state = 540
                self.match(SetlXgrammarParser.T__53)
                self.state = 541
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = Equal(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__54]:
                self.state = 544
                self.match(SetlXgrammarParser.T__54)
                self.state = 545
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = NotEqual(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__55]:
                self.state = 548
                self.match(SetlXgrammarParser.T__55)
                self.state = 549
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = LessThan(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__56]:
                self.state = 552
                self.match(SetlXgrammarParser.T__56)
                self.state = 553
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = LessOrEqual(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__57]:
                self.state = 556
                self.match(SetlXgrammarParser.T__57)
                self.state = 557
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = GreaterThan(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__58]:
                self.state = 560
                self.match(SetlXgrammarParser.T__58)
                self.state = 561
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = GreaterOrEqual(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__59]:
                self.state = 564
                self.match(SetlXgrammarParser.T__59)
                self.state = 565
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = SetlXIn(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__60]:
                self.state = 568
                self.match(SetlXgrammarParser.T__60)
                self.state = 569
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = NotIn(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__2, SetlXgrammarParser.T__5, SetlXgrammarParser.T__10, SetlXgrammarParser.T__13, SetlXgrammarParser.T__16, SetlXgrammarParser.T__29, SetlXgrammarParser.T__40, SetlXgrammarParser.T__44, SetlXgrammarParser.T__46, SetlXgrammarParser.T__47, SetlXgrammarParser.T__50, SetlXgrammarParser.T__51, SetlXgrammarParser.T__52, SetlXgrammarParser.RANGE_SIGN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetlxSumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.s = None
            self.p1 = None # ProductContext
            self.p2 = None # ProductContext
            self.enableIgnore = enableIgnore

        def product(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ProductContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ProductContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_setlxSum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetlxSum" ):
                listener.enterSetlxSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetlxSum" ):
                listener.exitSetlxSum(self)




    def setlxSum(self, enableIgnore):

        localctx = SetlXgrammarParser.SetlxSumContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 38, self.RULE_setlxSum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            localctx.p1 = self.product(localctx.enableIgnore)
            localctx.s = localctx.p1.p
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__61 or _la==SetlXgrammarParser.T__62:
                self.state = 584
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__61]:
                    self.state = 576
                    self.match(SetlXgrammarParser.T__61)
                    self.state = 577
                    localctx.p2 = self.product(localctx.enableIgnore)
                    localctx.s = Sum(localctx.s,localctx.p2.p) 
                    pass
                elif token in [SetlXgrammarParser.T__62]:
                    self.state = 580
                    self.match(SetlXgrammarParser.T__62)
                    self.state = 581
                    localctx.p2 = self.product(localctx.enableIgnore)
                    localctx.s = Difference(localctx.s,localctx.p2.p) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.p = None
            self.r1 = None # SetlxReduceContext
            self.r2 = None # SetlxReduceContext
            self.enableIgnore = enableIgnore

        def setlxReduce(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.SetlxReduceContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.SetlxReduceContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct" ):
                listener.enterProduct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct" ):
                listener.exitProduct(self)




    def product(self, enableIgnore):

        localctx = SetlXgrammarParser.ProductContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 40, self.RULE_product)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            localctx.r1 = self.setlxReduce(localctx.enableIgnore)
            localctx.p = localctx.r1.r
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SetlXgrammarParser.T__63 - 64)) | (1 << (SetlXgrammarParser.T__64 - 64)) | (1 << (SetlXgrammarParser.T__65 - 64)) | (1 << (SetlXgrammarParser.T__66 - 64)) | (1 << (SetlXgrammarParser.T__67 - 64)))) != 0):
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__63]:
                    self.state = 591
                    self.match(SetlXgrammarParser.T__63)
                    self.state = 592
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = Product(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__64]:
                    self.state = 595
                    self.match(SetlXgrammarParser.T__64)
                    self.state = 596
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = Quotient(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__65]:
                    self.state = 599
                    self.match(SetlXgrammarParser.T__65)
                    self.state = 600
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = IntegerDivision(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__66]:
                    self.state = 603
                    self.match(SetlXgrammarParser.T__66)
                    self.state = 604
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = Modulo(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__67]:
                    self.state = 607
                    self.match(SetlXgrammarParser.T__67)
                    self.state = 608
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = CartesianProduct(localctx.p,localctx.r2.r) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetlxReduceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.r = None
            self.p1 = None # PrefixOperationContext
            self.p2 = None # PrefixOperationContext
            self.enableIgnore = enableIgnore

        def prefixOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.PrefixOperationContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.PrefixOperationContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_setlxReduce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetlxReduce" ):
                listener.enterSetlxReduce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetlxReduce" ):
                listener.exitSetlxReduce(self)




    def setlxReduce(self, enableIgnore):

        localctx = SetlXgrammarParser.SetlxReduceContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 42, self.RULE_setlxReduce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            localctx.p1 = self.prefixOperation(localctx.enableIgnore)
            localctx.r = localctx.p1.p
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__68 or _la==SetlXgrammarParser.T__69:
                self.state = 626
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__68]:
                    self.state = 618
                    self.match(SetlXgrammarParser.T__68)
                    self.state = 619
                    localctx.p2 = self.prefixOperation(localctx.enableIgnore)
                    localctx.r = SumOfMembersBinary(localctx.r,localctx.p2.p) 
                    pass
                elif token in [SetlXgrammarParser.T__69]:
                    self.state = 622
                    self.match(SetlXgrammarParser.T__69)
                    self.state = 623
                    localctx.p2 = self.prefixOperation(localctx.enableIgnore)
                    localctx.r = ProductOfMembersBinary(localctx.r,localctx.p2.p) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.p = None
            self._factor = None # FactorContext
            self._prefixOperation = None # PrefixOperationContext
            self.enableIgnore = enableIgnore

        def factor(self):
            return self.getTypedRuleContext(SetlXgrammarParser.FactorContext,0)


        def prefixOperation(self):
            return self.getTypedRuleContext(SetlXgrammarParser.PrefixOperationContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_prefixOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperation" ):
                listener.enterPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperation" ):
                listener.exitPrefixOperation(self)




    def prefixOperation(self, enableIgnore):

        localctx = SetlXgrammarParser.PrefixOperationContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 44, self.RULE_prefixOperation)
        self._la = 0 # Token type
        try:
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                localctx._factor = self.factor(localctx.enableIgnore)
                localctx.p = localctx._factor.f
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__70:
                    self.state = 633
                    self.match(SetlXgrammarParser.T__70)
                    self.state = 634
                    localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                    localctx.p = Power(localctx.p,localctx._prefixOperation.p) 


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.match(SetlXgrammarParser.T__68)
                self.state = 640
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = SumOfMembers(localctx._prefixOperation.p) 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.match(SetlXgrammarParser.T__69)
                self.state = 644
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = ProductOfMembers(localctx._prefixOperation.p) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.match(SetlXgrammarParser.T__71)
                self.state = 648
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = Cardinality(localctx._prefixOperation.p) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 651
                self.match(SetlXgrammarParser.T__62)
                self.state = 652
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = Minus(localctx._prefixOperation.p)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.f = None
            self._factor = None # FactorContext
            self._iteratorChain = None # IteratorChainContext
            self._condition = None # ConditionContext
            self._exprContent = None # ExprContentContext
            self._procedure = None # ProcedureContext
            self._variable = None # VariableContext
            self._call = None # CallContext
            self._value = None # ValueContext
            self.enableIgnore = enableIgnore

        def factor(self):
            return self.getTypedRuleContext(SetlXgrammarParser.FactorContext,0)


        def TERM(self):
            return self.getToken(SetlXgrammarParser.TERM, 0)

        def termArguments(self):
            return self.getTypedRuleContext(SetlXgrammarParser.TermArgumentsContext,0)


        def iteratorChain(self):
            return self.getTypedRuleContext(SetlXgrammarParser.IteratorChainContext,0)


        def condition(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,0)


        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def procedure(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,i)


        def call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.CallContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.CallContext,i)


        def value(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ValueContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self, enableIgnore):

        localctx = SetlXgrammarParser.FactorContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 46, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.match(SetlXgrammarParser.T__72)
                self.state = 658
                localctx._factor = self.factor(localctx.enableIgnore)
                localctx.f = SetlXNot(localctx._factor.f) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.match(SetlXgrammarParser.TERM)
                self.state = 662
                self.match(SetlXgrammarParser.T__1)
                self.state = 663
                self.termArguments()
                self.state = 664
                self.match(SetlXgrammarParser.T__2)
                localctx.f = Term()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self.match(SetlXgrammarParser.T__73)
                self.state = 668
                self.match(SetlXgrammarParser.T__1)
                self.state = 669
                localctx._iteratorChain = self.iteratorChain(localctx.enableIgnore)
                self.state = 670
                self.match(SetlXgrammarParser.T__13)
                self.state = 671
                localctx._condition = self.condition()
                self.state = 672
                self.match(SetlXgrammarParser.T__2)
                localctx.f = Forall(localctx._iteratorChain.ic,localctx._condition.cnd)
                		
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 675
                self.match(SetlXgrammarParser.T__74)
                self.state = 676
                self.match(SetlXgrammarParser.T__1)
                self.state = 677
                localctx._iteratorChain = self.iteratorChain(localctx.enableIgnore)
                self.state = 678
                self.match(SetlXgrammarParser.T__13)
                self.state = 679
                localctx._condition = self.condition()
                self.state = 680
                self.match(SetlXgrammarParser.T__2)
                localctx.f = Exists(localctx._iteratorChain.ic,localctx._condition.cnd)
                		
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__1]:
                    self.state = 683
                    self.match(SetlXgrammarParser.T__1)
                    self.state = 684
                    localctx._exprContent = self.exprContent(localctx.enableIgnore)
                    self.state = 685
                    self.match(SetlXgrammarParser.T__2)
                    localctx.f = localctx._exprContent.ex 
                    pass
                elif token in [SetlXgrammarParser.T__75, SetlXgrammarParser.T__76, SetlXgrammarParser.T__77]:
                    self.state = 688
                    localctx._procedure = self.procedure()
                    localctx.f = localctx._procedure.pd 
                    pass
                elif token in [SetlXgrammarParser.ID]:
                    self.state = 691
                    localctx._variable = self.variable()
                    localctx.f = localctx._variable.v 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SetlXgrammarParser.T__1) | (1 << SetlXgrammarParser.T__3) | (1 << SetlXgrammarParser.T__42) | (1 << SetlXgrammarParser.T__43))) != 0):
                    self.state = 703
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SetlXgrammarParser.T__42]:
                        self.state = 696
                        self.match(SetlXgrammarParser.T__42)
                        self.state = 697
                        localctx._variable = self.variable()
                        localctx.f = MemberAccess(localctx.f,localctx._variable.v) 
                        pass
                    elif token in [SetlXgrammarParser.T__1, SetlXgrammarParser.T__3, SetlXgrammarParser.T__43]:
                        self.state = 700
                        localctx._call = self.call(localctx.enableIgnore,localctx.f)
                        localctx.f = localctx._call.c 
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__72:
                    self.state = 708
                    self.match(SetlXgrammarParser.T__72)
                    localctx.f = Factorial(localctx.f) 


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 712
                localctx._value = self.value(localctx.enableIgnore)
                localctx.f = localctx._value.v 
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__72:
                    self.state = 714
                    self.match(SetlXgrammarParser.T__72)
                    localctx.f = Factorial(localctx._value.v) 


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None

        def exprList(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_termArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermArguments" ):
                listener.enterTermArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermArguments" ):
                listener.exitTermArguments(self)




    def termArguments(self):

        localctx = SetlXgrammarParser.TermArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_termArguments)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.exprList(True)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pd = None
            self._procedureParameters = None # ProcedureParametersContext
            self._block = None # BlockContext

        def procedureParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure" ):
                listener.enterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure" ):
                listener.exitProcedure(self)




    def procedure(self):

        localctx = SetlXgrammarParser.ProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_procedure)
        try:
            self.state = 751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.match(SetlXgrammarParser.T__75)
                self.state = 725
                self.match(SetlXgrammarParser.T__1)
                self.state = 726
                localctx._procedureParameters = self.procedureParameters(True)
                self.state = 727
                self.match(SetlXgrammarParser.T__2)
                self.state = 728
                self.match(SetlXgrammarParser.T__3)
                self.state = 729
                localctx._block = self.block()
                self.state = 730
                self.match(SetlXgrammarParser.T__5)
                localctx.pd = Procedure(localctx._procedureParameters.paramList, localctx._block.blk) 
                		
                pass
            elif token in [SetlXgrammarParser.T__76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(SetlXgrammarParser.T__76)
                self.state = 734
                self.match(SetlXgrammarParser.T__1)
                self.state = 735
                localctx._procedureParameters = self.procedureParameters(False)
                self.state = 736
                self.match(SetlXgrammarParser.T__2)
                self.state = 737
                self.match(SetlXgrammarParser.T__3)
                self.state = 738
                localctx._block = self.block()
                self.state = 739
                self.match(SetlXgrammarParser.T__5)
                localctx.pd = CachedProcedure(localctx._procedureParameters.paramList, localctx._block.blk) 
                		
                pass
            elif token in [SetlXgrammarParser.T__77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.match(SetlXgrammarParser.T__77)
                self.state = 743
                self.match(SetlXgrammarParser.T__1)
                self.state = 744
                localctx._procedureParameters = self.procedureParameters(True)
                self.state = 745
                self.match(SetlXgrammarParser.T__2)
                self.state = 746
                self.match(SetlXgrammarParser.T__3)
                self.state = 747
                localctx._block = self.block()
                self.state = 748
                self.match(SetlXgrammarParser.T__5)
                localctx.pd = Closure(localctx._procedureParameters.paramList, localctx._block.blk) 
                		
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableRw=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableRw = None
            self.paramList = None
            self.pp1 = None # ProcedureParameterContext
            self.pp2 = None # ProcedureParameterContext
            self.dp1 = None # ProcedureDefaultParameterContext
            self.lp1 = None # ProcedureListParameterContext
            self.dp2 = None # ProcedureDefaultParameterContext
            self.dp3 = None # ProcedureDefaultParameterContext
            self.lp2 = None # ProcedureListParameterContext
            self.lp3 = None # ProcedureListParameterContext
            self.enableRw = enableRw

        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ProcedureParameterContext,i)


        def procedureDefaultParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ProcedureDefaultParameterContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ProcedureDefaultParameterContext,i)


        def procedureListParameter(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureListParameterContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameters" ):
                listener.enterProcedureParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameters" ):
                listener.exitProcedureParameters(self)




    def procedureParameters(self, enableRw):

        localctx = SetlXgrammarParser.ProcedureParametersContext(self, self._ctx, self.state, enableRw)
        self.enterRule(localctx, 52, self.RULE_procedureParameters)

        localctx.paramList = []
            
        self._la = 0 # Token type
        try:
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                localctx.pp1 = self.procedureParameter(localctx.enableRw)
                localctx.paramList.append(localctx.pp1.param) 
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 755
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 756
                        localctx.pp2 = self.procedureParameter(localctx.enableRw)
                        localctx.paramList.append(localctx.pp2.param)  
                    self.state = 763
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 764
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 765
                        localctx.dp1 = self.procedureDefaultParameter()
                        localctx.paramList.append(localctx.dp1.param)  
                    self.state = 772
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__29:
                    self.state = 773
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 774
                    localctx.lp1 = self.procedureListParameter()
                    localctx.paramList.append(localctx.lp1.param) 


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                localctx.dp2 = self.procedureDefaultParameter()
                localctx.paramList.append(localctx.dp2.param) 
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 781
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 782
                        localctx.dp3 = self.procedureDefaultParameter()
                        localctx.paramList.append(localctx.dp3.param)  
                    self.state = 789
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__29:
                    self.state = 790
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 791
                    localctx.lp2 = self.procedureListParameter()
                    localctx.paramList.append(localctx.lp2.param) 


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 796
                localctx.lp3 = self.procedureListParameter()
                localctx.paramList.append(localctx.lp3.param) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableRw=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableRw = None
            self.param = None
            self._assignableVariable = None # AssignableVariableContext
            self._variable = None # VariableContext
            self.enableRw = enableRw

        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def variable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self, enableRw):

        localctx = SetlXgrammarParser.ProcedureParameterContext(self, self._ctx, self.state, enableRw)
        self.enterRule(localctx, 54, self.RULE_procedureParameter)
        try:
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                if not localctx.enableRw:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$enableRw")
                self.state = 803
                self.match(SetlXgrammarParser.T__78)
                self.state = 804
                localctx._assignableVariable = self.assignableVariable()
                localctx.param = ReadWriteParameter(localctx._assignableVariable.v) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                localctx._variable = self.variable()
                localctx.param = Parameter(localctx._variable.v, None) 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDefaultParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None
            self._assignableVariable = None # AssignableVariableContext
            self._expr = None # ExprContext

        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureDefaultParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDefaultParameter" ):
                listener.enterProcedureDefaultParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDefaultParameter" ):
                listener.exitProcedureDefaultParameter(self)




    def procedureDefaultParameter(self):

        localctx = SetlXgrammarParser.ProcedureDefaultParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_procedureDefaultParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            localctx._assignableVariable = self.assignableVariable()
            self.state = 813
            self.match(SetlXgrammarParser.T__41)
            self.state = 814
            localctx._expr = self.expr(False)
            localctx.param = Parameter(localctx._assignableVariable.v, localctx._expr.ex) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureListParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None
            self._variable = None # VariableContext

        def variable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureListParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureListParameter" ):
                listener.enterProcedureListParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureListParameter" ):
                listener.exitProcedureListParameter(self)




    def procedureListParameter(self):

        localctx = SetlXgrammarParser.ProcedureListParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_procedureListParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(SetlXgrammarParser.T__63)
            self.state = 818
            localctx._variable = self.variable()
            localctx.param = ListParameter(localctx._variable.v) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None, callable=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.callable = None
            self.c = None
            self._callParameters = None # CallParametersContext
            self._collectionAccessParams = None # CollectionAccessParamsContext
            self._expr = None # ExprContext
            self.enableIgnore = enableIgnore
            self.callable = callable

        def callParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.CallParametersContext,0)


        def collectionAccessParams(self):
            return self.getTypedRuleContext(SetlXgrammarParser.CollectionAccessParamsContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)




    def call(self, enableIgnore, callable):

        localctx = SetlXgrammarParser.CallContext(self, self._ctx, self.state, enableIgnore, callable)
        self.enterRule(localctx, 60, self.RULE_call)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.match(SetlXgrammarParser.T__1)
                self.state = 822
                localctx._callParameters = self.callParameters(localctx.enableIgnore)
                self.state = 823
                self.match(SetlXgrammarParser.T__2)
                localctx.c = FunctionCall(localctx._callParameters.params,localctx.callable) 
                		
                pass
            elif token in [SetlXgrammarParser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.match(SetlXgrammarParser.T__43)
                self.state = 827
                localctx._collectionAccessParams = self.collectionAccessParams(localctx.enableIgnore)
                self.state = 828
                self.match(SetlXgrammarParser.T__44)
                localctx.c = CollectionAccess(localctx._collectionAccessParams.p,localctx.callable) 
                pass
            elif token in [SetlXgrammarParser.T__3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 831
                self.match(SetlXgrammarParser.T__3)
                self.state = 832
                localctx._expr = self.expr(localctx.enableIgnore)
                self.state = 833
                self.match(SetlXgrammarParser.T__5)
                localctx.c = CollectMap(localctx._expr.ex,localctx.callable) 
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionAccessParamsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.p = None
            self.e1 = None # ExprContext
            self.e2 = None # ExprContext
            self.e3 = None # ExprContext
            self._expr = None # ExprContext
            self.enableIgnore = enableIgnore

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,i)


        def RANGE_SIGN(self):
            return self.getToken(SetlXgrammarParser.RANGE_SIGN, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_collectionAccessParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionAccessParams" ):
                listener.enterCollectionAccessParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionAccessParams" ):
                listener.exitCollectionAccessParams(self)




    def collectionAccessParams(self, enableIgnore):

        localctx = SetlXgrammarParser.CollectionAccessParamsContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 62, self.RULE_collectionAccessParams)

        params = []
            
        self._la = 0 # Token type
        try:
            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                localctx.e1 = self.expr(localctx.enableIgnore)
                self.state = 857
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.RANGE_SIGN]:
                    self.state = 839
                    self.match(SetlXgrammarParser.RANGE_SIGN)
                    self.state = 844
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 840
                        localctx.e2 = self.expr(localctx.enableIgnore)
                        localctx.p = ListRange(localctx.e1.ex,localctx.e2.ex) 
                        pass

                    elif la_ == 2:
                        localctx.p = ListRange(localctx.e1.ex,None) 
                        pass


                    pass
                elif token in [SetlXgrammarParser.T__29]:
                    self.state = 850 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 846
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 847
                        localctx.e3 = self.expr(False)
                        params.append(localctx.e3.ex) 
                        self.state = 852 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SetlXgrammarParser.T__29):
                            break

                    localctx.p = params 
                    pass
                elif token in [SetlXgrammarParser.T__44]:
                    localctx.p = localctx.e1.ex 
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.match(SetlXgrammarParser.RANGE_SIGN)
                self.state = 860
                localctx._expr = self.expr(localctx.enableIgnore)
                localctx.p = ListRange(None,localctx._expr.ex) 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.params = None
            self._exprList = None # ExprListContext
            self._exprContent = None # ExprContentContext
            self.enableIgnore = enableIgnore

        def exprList(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,0)


        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_callParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallParameters" ):
                listener.enterCallParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallParameters" ):
                listener.exitCallParameters(self)




    def callParameters(self, enableIgnore):

        localctx = SetlXgrammarParser.CallParametersContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 64, self.RULE_callParameters)

        localctx.params = []
            
        self._la = 0 # Token type
        try:
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                localctx._exprList = self.exprList(localctx.enableIgnore)
                localctx.params = localctx._exprList.exprs
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__29:
                    self.state = 867
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 868
                    self.match(SetlXgrammarParser.T__63)
                    self.state = 869
                    localctx._exprContent = self.exprContent(False)
                    localctx.params.append(OperatorExpression(localctx._exprContent.ex))


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(SetlXgrammarParser.T__63)
                self.state = 875
                localctx._exprContent = self.exprContent(False)
                localctx.params = [OperatorExpression(localctx._exprContent.ex)]
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.v = None
            self._collectionBuilder = None # CollectionBuilderContext
            self._STRING = None # Token
            self._LITERAL = None # Token
            self._matrix = None # MatrixContext
            self._vector = None # VectorContext
            self._atomicValue = None # AtomicValueContext
            self.enableIgnore = enableIgnore

        def collectionBuilder(self):
            return self.getTypedRuleContext(SetlXgrammarParser.CollectionBuilderContext,0)


        def STRING(self):
            return self.getToken(SetlXgrammarParser.STRING, 0)

        def LITERAL(self):
            return self.getToken(SetlXgrammarParser.LITERAL, 0)

        def matrix(self):
            return self.getTypedRuleContext(SetlXgrammarParser.MatrixContext,0)


        def vector(self):
            return self.getTypedRuleContext(SetlXgrammarParser.VectorContext,0)


        def atomicValue(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AtomicValueContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self, enableIgnore):

        localctx = SetlXgrammarParser.ValueContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 66, self.RULE_value)

        cb = None
            
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.match(SetlXgrammarParser.T__43)
                self.state = 885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 882
                    localctx._collectionBuilder = self.collectionBuilder(localctx.enableIgnore)
                    cb = localctx._collectionBuilder.cb; 


                self.state = 887
                self.match(SetlXgrammarParser.T__44)
                localctx.v = SetlXList(cb) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.match(SetlXgrammarParser.T__3)
                self.state = 893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 890
                    localctx._collectionBuilder = self.collectionBuilder(localctx.enableIgnore)
                    cb = localctx._collectionBuilder.cb; 


                self.state = 895
                self.match(SetlXgrammarParser.T__5)
                localctx.v = SetListConstructor(cb) 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                localctx._STRING = self.match(SetlXgrammarParser.STRING)
                localctx.v = SetlXString((None if localctx._STRING is None else localctx._STRING.text)) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 899
                localctx._LITERAL = self.match(SetlXgrammarParser.LITERAL)
                localctx.v = SetlXLiteral((None if localctx._LITERAL is None else localctx._LITERAL.text)) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 901
                localctx._matrix = self.matrix()
                localctx.v = localctx._matrix.m
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 904
                localctx._vector = self.vector()
                localctx.v = localctx._vector.v
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 907
                localctx._atomicValue = self.atomicValue()
                localctx.v = localctx._atomicValue.av 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 910
                if not localctx.enableIgnore:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$enableIgnore")
                self.state = 911
                self.match(SetlXgrammarParser.T__45)
                localctx.v = VariableIgnore() 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionBuilderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.cb = None
            self.e1 = None # ExprContext
            self.e2 = None # ExprContext
            self.e3 = None # ExprContext
            self.e4 = None # ExprContext
            self._iteratorChain = None # IteratorChainContext
            self.c1 = None # ConditionContext
            self.enableIgnore = enableIgnore

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,i)


        def RANGE_SIGN(self):
            return self.getToken(SetlXgrammarParser.RANGE_SIGN, 0)

        def iteratorChain(self):
            return self.getTypedRuleContext(SetlXgrammarParser.IteratorChainContext,0)


        def condition(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_collectionBuilder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionBuilder" ):
                listener.enterCollectionBuilder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionBuilder" ):
                listener.exitCollectionBuilder(self)




    def collectionBuilder(self, enableIgnore):

        localctx = SetlXgrammarParser.CollectionBuilderContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 68, self.RULE_collectionBuilder)
        exprs = []
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            localctx.e1 = self.expr(localctx.enableIgnore)
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__29]:
                self.state = 916
                self.match(SetlXgrammarParser.T__29)
                self.state = 917
                localctx.e2 = self.expr(localctx.enableIgnore)
                self.state = 939
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.RANGE_SIGN]:
                    self.state = 918
                    self.match(SetlXgrammarParser.RANGE_SIGN)
                    self.state = 919
                    localctx.e3 = self.expr(localctx.enableIgnore)
                    localctx.cb = Range(localctx.e1.ex, localctx.e2.ex, localctx.e3.ex) 
                    pass
                elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__13, SetlXgrammarParser.T__29, SetlXgrammarParser.T__44]:
                    exprs.append(localctx.e1.ex); exprs.append(localctx.e2.ex) 
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SetlXgrammarParser.T__29:
                        self.state = 923
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 924
                        localctx.e3 = self.expr(localctx.enableIgnore)
                        exprs.append(localctx.e3.ex) 
                        self.state = 931
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 937
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SetlXgrammarParser.T__13]:
                        self.state = 932
                        self.match(SetlXgrammarParser.T__13)
                        self.state = 933
                        localctx.e4 = self.expr(False)
                        localctx.cb = ExplicitListWithRest(exprs, localctx.e4.ex) 
                        pass
                    elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__44]:
                        localctx.cb = ExplicitList(exprs)         
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SetlXgrammarParser.RANGE_SIGN]:
                self.state = 941
                self.match(SetlXgrammarParser.RANGE_SIGN)
                self.state = 942
                localctx.e3 = self.expr(localctx.enableIgnore)
                localctx.cb = Range(localctx.e1.ex, None, localctx.e3.ex) 
                pass
            elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__13, SetlXgrammarParser.T__44]:
                exprs.append(localctx.e1.ex) 
                self.state = 951
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__13]:
                    self.state = 946
                    self.match(SetlXgrammarParser.T__13)
                    self.state = 947
                    localctx.e2 = self.expr(False)
                    localctx.cb = ExplicitListWithRest(exprs, localctx.e2.ex) 
                    pass
                elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__44]:
                    localctx.cb = ExplicitList(exprs)         
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SetlXgrammarParser.T__10]:
                self.state = 953
                self.match(SetlXgrammarParser.T__10)
                self.state = 954
                localctx._iteratorChain = self.iteratorChain(localctx.enableIgnore)
                self.state = 960
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__13]:
                    self.state = 955
                    self.match(SetlXgrammarParser.T__13)
                    self.state = 956
                    localctx.c1 = self.condition()
                    localctx.cb = SetlIteration(localctx.e1.ex, localctx._iteratorChain.ic, localctx.c1.cnd) 
                    pass
                elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__44]:
                    localctx.cb = SetlIteration(localctx.e1.ex, localctx._iteratorChain.ic, None) 
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IteratorChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.ic = None
            self.i1 = None # IteratorContext
            self.i2 = None # IteratorContext
            self.enableIgnore = enableIgnore

        def iterator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.IteratorContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.IteratorContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_iteratorChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorChain" ):
                listener.enterIteratorChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorChain" ):
                listener.exitIteratorChain(self)




    def iteratorChain(self, enableIgnore):

        localctx = SetlXgrammarParser.IteratorChainContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 70, self.RULE_iteratorChain)

        localctx.ic = []
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            localctx.i1 = self.iterator(localctx.enableIgnore)
            localctx.ic.append(localctx.i1.iter)
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__29:
                self.state = 966
                self.match(SetlXgrammarParser.T__29)
                self.state = 967
                localctx.i2 = self.iterator(localctx.enableIgnore)
                localctx.ic.append(localctx.i2.iter) 
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IteratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.iter = None
            self._assignable = None # AssignableContext
            self._expr = None # ExprContext
            self.enableIgnore = enableIgnore

        def assignable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)




    def iterator(self, enableIgnore):

        localctx = SetlXgrammarParser.IteratorContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 72, self.RULE_iterator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            localctx._assignable = self.assignable(True)
            self.state = 976
            self.match(SetlXgrammarParser.T__59)
            self.state = 977
            localctx._expr = self.expr(localctx.enableIgnore)
            localctx.iter = SetlIterator(localctx._assignable.a, localctx._expr.ex) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatrixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None
            self._vector = None # VectorContext

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VectorContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)




    def matrix(self):

        localctx = SetlXgrammarParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_matrix)
        vectors = []
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(SetlXgrammarParser.T__79)
            self.state = 984 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 981
                localctx._vector = self.vector()
                vectors.append(localctx._vector.v)
                self.state = 986 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SetlXgrammarParser.T__79):
                    break

            self.state = 988
            self.match(SetlXgrammarParser.T__80)
            localctx.m = SetlMatrix(vectors)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.v = None
            self.n1 = None # Token
            self._DOUBLE = None # Token
            self.n2 = None # Token

        def DOUBLE(self, i:int=None):
            if i is None:
                return self.getTokens(SetlXgrammarParser.DOUBLE)
            else:
                return self.getToken(SetlXgrammarParser.DOUBLE, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(SetlXgrammarParser.NUMBER)
            else:
                return self.getToken(SetlXgrammarParser.NUMBER, i)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)




    def vector(self):

        localctx = SetlXgrammarParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vector)

        doubles  = []
        negative = ""
        dbl      = 0.0
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(SetlXgrammarParser.T__79)
            self.state = 1009 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 995
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__62]:
                    self.state = 992
                    self.match(SetlXgrammarParser.T__62)
                    negative = "-" 
                    pass
                elif token in [SetlXgrammarParser.NUMBER, SetlXgrammarParser.DOUBLE]:
                    negative = ""  
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1001
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.NUMBER]:
                    self.state = 997
                    localctx.n1 = self.match(SetlXgrammarParser.NUMBER)
                    dbl = SetlXFraction(negative + (None if localctx.n1 is None else localctx.n1.text))     
                    pass
                elif token in [SetlXgrammarParser.DOUBLE]:
                    self.state = 999
                    localctx._DOUBLE = self.match(SetlXgrammarParser.DOUBLE)
                    dbl = SetlXDouble(negative + (None if localctx._DOUBLE is None else localctx._DOUBLE.text)) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__64:
                    self.state = 1003
                    self.match(SetlXgrammarParser.T__64)
                    self.state = 1004
                    localctx.n2 = self.match(SetlXgrammarParser.NUMBER)
                    dbl /= SetlXFraction(negative + (None if localctx.n2 is None else localctx.n2.text)) 


                doubles.append(dbl) 
                self.state = 1011 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (SetlXgrammarParser.T__62 - 63)) | (1 << (SetlXgrammarParser.NUMBER - 63)) | (1 << (SetlXgrammarParser.DOUBLE - 63)))) != 0)):
                    break

            self.state = 1013
            self.match(SetlXgrammarParser.T__80)
            localctx.v = SetlVector(doubles) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.av = None
            self._NUMBER = None # Token
            self._DOUBLE = None # Token

        def NUMBER(self):
            return self.getToken(SetlXgrammarParser.NUMBER, 0)

        def DOUBLE(self):
            return self.getToken(SetlXgrammarParser.DOUBLE, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_atomicValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicValue" ):
                listener.enterAtomicValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicValue" ):
                listener.exitAtomicValue(self)




    def atomicValue(self):

        localctx = SetlXgrammarParser.AtomicValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atomicValue)
        try:
            self.state = 1026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                localctx._NUMBER = self.match(SetlXgrammarParser.NUMBER)
                localctx.av = SetlXFraction((None if localctx._NUMBER is None else localctx._NUMBER.text)) 
                pass
            elif token in [SetlXgrammarParser.DOUBLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1018
                localctx._DOUBLE = self.match(SetlXgrammarParser.DOUBLE)
                localctx.av = SetlXDouble((None if localctx._DOUBLE is None else localctx._DOUBLE.text)) 
                pass
            elif token in [SetlXgrammarParser.T__81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1020
                self.match(SetlXgrammarParser.T__81)
                localctx.av = SetlXOm() 
                pass
            elif token in [SetlXgrammarParser.T__82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1022
                self.match(SetlXgrammarParser.T__82)
                localctx.av = SetlXTrue() 
                pass
            elif token in [SetlXgrammarParser.T__83]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1024
                self.match(SetlXgrammarParser.T__83)
                localctx.av = SetlXFalse() 
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.v = None
            self._ID = None # Token

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = SetlXgrammarParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            localctx._ID = self.match(SetlXgrammarParser.ID)
            localctx.v = Variable((None if localctx._ID is None else localctx._ID.text)) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cnd = None
            self._expr = None # ExprContext

        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = SetlXgrammarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            localctx._expr = self.expr(False)
            localctx.cnd = Condition(localctx._expr.ex) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.al = None
            self.a1 = None # AssignableContext
            self.a2 = None # AssignableContext

        def assignable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.AssignableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = SetlXgrammarParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignmentList)

        localctx.al = []
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            localctx.a1 = self.assignable(True)
            localctx.al.append(localctx.a1.a) 
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__29:
                self.state = 1036
                self.match(SetlXgrammarParser.T__29)
                self.state = 1037
                localctx.a2 = self.assignable(True)
                localctx.al.append(localctx.a2.a) 
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[8] = self.assignable_sempred
        self._predicates[27] = self.procedureParameter_sempred
        self._predicates[33] = self.value_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def assignable_sempred(self, localctx:AssignableContext, predIndex:int):
            if predIndex == 0:
                return localctx.enableIgnore
         

    def procedureParameter_sempred(self, localctx:ProcedureParameterContext, predIndex:int):
            if predIndex == 1:
                return localctx.enableRw
         

    def value_sempred(self, localctx:ValueContext, predIndex:int):
            if predIndex == 2:
                return localctx.enableIgnore
         




