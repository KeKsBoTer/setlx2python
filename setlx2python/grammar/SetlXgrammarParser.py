# Generated from grammar/SetlXgrammar.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


from .types import *

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3a")
        buf.write("\u0415\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\3\2\7")
        buf.write("\2\\\n\2\f\2\16\2_\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3p\n\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\7\3\u0086\n\3\f\3\16\3\u0089\13\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u0091\n\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\7\3\u009d\n\3\f\3\16\3\u00a0\13\3\3\3")
        buf.write("\3\3\3\3\5\3\u00a5\n\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00b6\n\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\7\3\u00e7\n\3\f\3\16\3\u00ea\13\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00f5\n\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0103\n\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u0117\n\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\5\3\u0130\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\5\4\u014b\n\4\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u0156\n\5\3\5\3\5\3\5\3\5\6\5\u015c")
        buf.write("\n\5\r\5\16\5\u015d\3\5\3\5\3\5\3\5\3\5\5\5\u0165\n\5")
        buf.write("\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0170\n\6\3\6")
        buf.write("\3\6\6\6\u0174\n\6\r\6\16\6\u0175\3\6\3\6\3\6\5\6\u017b")
        buf.write("\n\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0184\n\7\3\7\3\7")
        buf.write("\5\7\u0188\n\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u0195\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t")
        buf.write("\u019f\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\7\n\u01ac\n\n\f\n\16\n\u01af\13\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u01b9\n\n\3\13\3\13\3\13\3\f\3\f\3\f")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u01c7\n\r\f\r\16\r\u01ca")
        buf.write("\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u01d9\n\16\5\16\u01db\n\16\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u01e6\n\17")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20")
        buf.write("\u01f2\n\20\f\20\16\20\u01f5\13\20\5\20\u01f7\n\20\3\20")
        buf.write("\5\20\u01fa\n\20\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0202")
        buf.write("\n\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u020a\n\22\f")
        buf.write("\22\16\22\u020d\13\22\3\23\3\23\3\23\3\23\3\23\3\23\7")
        buf.write("\23\u0215\n\23\f\23\16\23\u0218\13\23\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u023c")
        buf.write("\n\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\7\25\u0248\n\25\f\25\16\25\u024b\13\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0263\n")
        buf.write("\26\f\26\16\26\u0266\13\26\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\7\27\u0272\n\27\f\27\16\27\u0275")
        buf.write("\13\27\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u027d\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u028f\n\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u02b6\n\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\7\31\u02bf\n\31\f\31\16\31\u02c2\13\31\3\31\3")
        buf.write("\31\5\31\u02c6\n\31\3\31\3\31\3\31\3\31\5\31\u02cc\n\31")
        buf.write("\5\31\u02ce\n\31\3\32\3\32\5\32\u02d2\n\32\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\5\33\u02ef\n\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\7\34\u02f7\n\34\f\34\16\34\u02fa\13\34\3\34\3")
        buf.write("\34\3\34\3\34\7\34\u0300\n\34\f\34\16\34\u0303\13\34\3")
        buf.write("\34\3\34\3\34\3\34\5\34\u0309\n\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\7\34\u0311\n\34\f\34\16\34\u0314\13\34\3\34")
        buf.write("\3\34\3\34\3\34\5\34\u031a\n\34\3\34\3\34\3\34\3\34\5")
        buf.write("\34\u0320\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u032a\n\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3")
        buf.write("\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write("\5 \u0344\n \3!\3!\3!\3!\3!\3!\5!\u034c\n!\3!\3!\3!\3")
        buf.write("!\6!\u0352\n!\r!\16!\u0353\3!\3!\3!\5!\u0359\n!\3!\3!")
        buf.write("\3!\3!\5!\u035f\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0368")
        buf.write("\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u036f\n\"\3#\3#\3#\3#\5#")
        buf.write("\u0375\n#\3#\3#\3#\3#\3#\3#\5#\u037d\n#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0391\n#\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\7$\u039f\n$\f$\16$")
        buf.write("\u03a2\13$\3$\3$\3$\3$\3$\5$\u03a9\n$\5$\u03ab\n$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u03b7\n$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\5$\u03c0\n$\5$\u03c2\n$\3%\3%\3%\3%\3%\3%\7%\u03ca")
        buf.write("\n%\f%\16%\u03cd\13%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\6")
        buf.write("\'\u03d8\n\'\r\'\16\'\u03d9\3\'\3\'\3\'\3(\3(\3(\3(\5")
        buf.write("(\u03e3\n(\3(\3(\3(\3(\5(\u03e9\n(\3(\3(\3(\5(\u03ee\n")
        buf.write("(\3(\6(\u03f1\n(\r(\16(\u03f2\3(\3(\3(\3)\3)\3)\3)\3)")
        buf.write("\3)\3)\3)\3)\3)\5)\u0402\n)\3*\3*\3*\3+\3+\3+\3,\3,\3")
        buf.write(",\3,\3,\3,\7,\u0410\n,\f,\16,\u0413\13,\3,\2\2-\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTV\2\2\2\u0478\2]\3\2\2\2\4\u012f\3\2\2")
        buf.write("\2\6\u0131\3\2\2\2\b\u014c\3\2\2\2\n\u0169\3\2\2\2\f\u017f")
        buf.write("\3\2\2\2\16\u0194\3\2\2\2\20\u0196\3\2\2\2\22\u01b8\3")
        buf.write("\2\2\2\24\u01ba\3\2\2\2\26\u01bd\3\2\2\2\30\u01c0\3\2")
        buf.write("\2\2\32\u01da\3\2\2\2\34\u01dc\3\2\2\2\36\u01f9\3\2\2")
        buf.write("\2 \u01fb\3\2\2\2\"\u0203\3\2\2\2$\u020e\3\2\2\2&\u0219")
        buf.write("\3\2\2\2(\u023d\3\2\2\2*\u024c\3\2\2\2,\u0267\3\2\2\2")
        buf.write(".\u028e\3\2\2\2\60\u02cd\3\2\2\2\62\u02d1\3\2\2\2\64\u02ee")
        buf.write("\3\2\2\2\66\u031f\3\2\2\28\u0329\3\2\2\2:\u032b\3\2\2")
        buf.write("\2<\u0330\3\2\2\2>\u0343\3\2\2\2@\u035e\3\2\2\2B\u036e")
        buf.write("\3\2\2\2D\u0390\3\2\2\2F\u0392\3\2\2\2H\u03c3\3\2\2\2")
        buf.write("J\u03ce\3\2\2\2L\u03d3\3\2\2\2N\u03de\3\2\2\2P\u0401\3")
        buf.write("\2\2\2R\u0403\3\2\2\2T\u0406\3\2\2\2V\u0409\3\2\2\2XY")
        buf.write("\5\4\3\2YZ\b\2\1\2Z\\\3\2\2\2[X\3\2\2\2\\_\3\2\2\2][\3")
        buf.write("\2\2\2]^\3\2\2\2^`\3\2\2\2_]\3\2\2\2`a\b\2\1\2a\3\3\2")
        buf.write("\2\2bc\7\3\2\2cd\7W\2\2de\7\4\2\2ef\5\66\34\2fg\7\5\2")
        buf.write("\2gh\7\6\2\2ho\5\2\2\2ij\7\7\2\2jk\7\6\2\2kl\5\2\2\2l")
        buf.write("m\7\b\2\2mn\b\3\1\2np\3\2\2\2oi\3\2\2\2op\3\2\2\2pq\3")
        buf.write("\2\2\2qr\7\b\2\2rs\b\3\1\2s\u0130\3\2\2\2tu\7\t\2\2uv")
        buf.write("\7\4\2\2vw\5T+\2wx\7\5\2\2xy\7\6\2\2yz\5\2\2\2z\u0087")
        buf.write("\7\b\2\2{|\7\n\2\2|}\7\t\2\2}~\7\4\2\2~\177\5T+\2\177")
        buf.write("\u0080\7\5\2\2\u0080\u0081\7\6\2\2\u0081\u0082\5\2\2\2")
        buf.write("\u0082\u0083\7\b\2\2\u0083\u0084\b\3\1\2\u0084\u0086\3")
        buf.write("\2\2\2\u0085{\3\2\2\2\u0086\u0089\3\2\2\2\u0087\u0085")
        buf.write("\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u0090\3\2\2\2\u0089")
        buf.write("\u0087\3\2\2\2\u008a\u008b\7\n\2\2\u008b\u008c\7\6\2\2")
        buf.write("\u008c\u008d\5\2\2\2\u008d\u008e\7\b\2\2\u008e\u008f\b")
        buf.write("\3\1\2\u008f\u0091\3\2\2\2\u0090\u008a\3\2\2\2\u0090\u0091")
        buf.write("\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0093\b\3\1\2\u0093")
        buf.write("\u0130\3\2\2\2\u0094\u0095\7\13\2\2\u0095\u009e\7\6\2")
        buf.write("\2\u0096\u0097\7\f\2\2\u0097\u0098\5T+\2\u0098\u0099\7")
        buf.write("\r\2\2\u0099\u009a\5\2\2\2\u009a\u009b\b\3\1\2\u009b\u009d")
        buf.write("\3\2\2\2\u009c\u0096\3\2\2\2\u009d\u00a0\3\2\2\2\u009e")
        buf.write("\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a4\3\2\2\2")
        buf.write("\u00a0\u009e\3\2\2\2\u00a1\u00a2\7\16\2\2\u00a2\u00a3")
        buf.write("\7\r\2\2\u00a3\u00a5\5\2\2\2\u00a4\u00a1\3\2\2\2\u00a4")
        buf.write("\u00a5\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a7\7\b\2\2")
        buf.write("\u00a7\u0130\b\3\1\2\u00a8\u00a9\5\b\5\2\u00a9\u00aa\b")
        buf.write("\3\1\2\u00aa\u0130\3\2\2\2\u00ab\u00ac\5\n\6\2\u00ac\u00ad")
        buf.write("\b\3\1\2\u00ad\u0130\3\2\2\2\u00ae\u00af\7\17\2\2\u00af")
        buf.write("\u00b0\7\4\2\2\u00b0\u00b5\5H%\2\u00b1\u00b2\7\20\2\2")
        buf.write("\u00b2\u00b3\5T+\2\u00b3\u00b4\b\3\1\2\u00b4\u00b6\3\2")
        buf.write("\2\2\u00b5\u00b1\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b7")
        buf.write("\3\2\2\2\u00b7\u00b8\7\5\2\2\u00b8\u00b9\7\6\2\2\u00b9")
        buf.write("\u00ba\5\2\2\2\u00ba\u00bb\7\b\2\2\u00bb\u00bc\b\3\1\2")
        buf.write("\u00bc\u0130\3\2\2\2\u00bd\u00be\7\21\2\2\u00be\u00bf")
        buf.write("\7\4\2\2\u00bf\u00c0\5T+\2\u00c0\u00c1\7\5\2\2\u00c1\u00c2")
        buf.write("\7\6\2\2\u00c2\u00c3\5\2\2\2\u00c3\u00c4\7\b\2\2\u00c4")
        buf.write("\u00c5\b\3\1\2\u00c5\u0130\3\2\2\2\u00c6\u00c7\7\22\2")
        buf.write("\2\u00c7\u00c8\7\6\2\2\u00c8\u00c9\5\2\2\2\u00c9\u00ca")
        buf.write("\7\b\2\2\u00ca\u00cb\7\21\2\2\u00cb\u00cc\7\4\2\2\u00cc")
        buf.write("\u00cd\5T+\2\u00cd\u00ce\7\5\2\2\u00ce\u00cf\7\23\2\2")
        buf.write("\u00cf\u00d0\b\3\1\2\u00d0\u0130\3\2\2\2\u00d1\u00d2\7")
        buf.write("\24\2\2\u00d2\u00d3\7\6\2\2\u00d3\u00d4\5\2\2\2\u00d4")
        buf.write("\u00e8\7\b\2\2\u00d5\u00d6\7\25\2\2\u00d6\u00d7\7\4\2")
        buf.write("\2\u00d7\u00d8\5\24\13\2\u00d8\u00d9\7\5\2\2\u00d9\u00da")
        buf.write("\7\6\2\2\u00da\u00db\5\2\2\2\u00db\u00dc\7\b\2\2\u00dc")
        buf.write("\u00dd\b\3\1\2\u00dd\u00de\7\26\2\2\u00de\u00df\7\4\2")
        buf.write("\2\u00df\u00e0\5\24\13\2\u00e0\u00e1\7\5\2\2\u00e1\u00e2")
        buf.write("\7\6\2\2\u00e2\u00e3\5\2\2\2\u00e3\u00e4\7\b\2\2\u00e4")
        buf.write("\u00e5\b\3\1\2\u00e5\u00e7\3\2\2\2\u00e6\u00d5\3\2\2\2")
        buf.write("\u00e7\u00ea\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3")
        buf.write("\2\2\2\u00e9\u00f4\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ec")
        buf.write("\7\27\2\2\u00ec\u00ed\7\4\2\2\u00ed\u00ee\5\24\13\2\u00ee")
        buf.write("\u00ef\7\5\2\2\u00ef\u00f0\7\6\2\2\u00f0\u00f1\5\2\2\2")
        buf.write("\u00f1\u00f2\7\b\2\2\u00f2\u00f3\b\3\1\2\u00f3\u00f5\3")
        buf.write("\2\2\2\u00f4\u00eb\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6")
        buf.write("\3\2\2\2\u00f6\u00f7\b\3\1\2\u00f7\u0130\3\2\2\2\u00f8")
        buf.write("\u00f9\7\30\2\2\u00f9\u00fa\7\6\2\2\u00fa\u00fb\5\2\2")
        buf.write("\2\u00fb\u0102\7\b\2\2\u00fc\u00fd\7\31\2\2\u00fd\u00fe")
        buf.write("\7\6\2\2\u00fe\u00ff\5\2\2\2\u00ff\u0100\b\3\1\2\u0100")
        buf.write("\u0101\7\b\2\2\u0101\u0103\3\2\2\2\u0102\u00fc\3\2\2\2")
        buf.write("\u0102\u0103\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0105\b")
        buf.write("\3\1\2\u0105\u0130\3\2\2\2\u0106\u0107\7\32\2\2\u0107")
        buf.write("\u0108\7\23\2\2\u0108\u0130\b\3\1\2\u0109\u010a\7\33\2")
        buf.write("\2\u010a\u010b\7\23\2\2\u010b\u0130\b\3\1\2\u010c\u010d")
        buf.write("\7\34\2\2\u010d\u010e\7\23\2\2\u010e\u0130\b\3\1\2\u010f")
        buf.write("\u0110\7\35\2\2\u0110\u0111\7\23\2\2\u0111\u0130\b\3\1")
        buf.write("\2\u0112\u0116\7\36\2\2\u0113\u0114\5\26\f\2\u0114\u0115")
        buf.write("\b\3\1\2\u0115\u0117\3\2\2\2\u0116\u0113\3\2\2\2\u0116")
        buf.write("\u0117\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119\7\23\2")
        buf.write("\2\u0119\u0130\b\3\1\2\u011a\u011b\7\37\2\2\u011b\u011c")
        buf.write("\7\4\2\2\u011c\u011d\5T+\2\u011d\u011e\7 \2\2\u011e\u011f")
        buf.write("\5\26\f\2\u011f\u0120\7\5\2\2\u0120\u0121\7\23\2\2\u0121")
        buf.write("\u0122\b\3\1\2\u0122\u0130\3\2\2\2\u0123\u0124\5\6\4\2")
        buf.write("\u0124\u0125\7\23\2\2\u0125\u0126\b\3\1\2\u0126\u0130")
        buf.write("\3\2\2\2\u0127\u0128\5\16\b\2\u0128\u0129\7\23\2\2\u0129")
        buf.write("\u012a\b\3\1\2\u012a\u0130\3\2\2\2\u012b\u012c\5\26\f")
        buf.write("\2\u012c\u012d\7\23\2\2\u012d\u012e\b\3\1\2\u012e\u0130")
        buf.write("\3\2\2\2\u012fb\3\2\2\2\u012ft\3\2\2\2\u012f\u0094\3\2")
        buf.write("\2\2\u012f\u00a8\3\2\2\2\u012f\u00ab\3\2\2\2\u012f\u00ae")
        buf.write("\3\2\2\2\u012f\u00bd\3\2\2\2\u012f\u00c6\3\2\2\2\u012f")
        buf.write("\u00d1\3\2\2\2\u012f\u00f8\3\2\2\2\u012f\u0106\3\2\2\2")
        buf.write("\u012f\u0109\3\2\2\2\u012f\u010c\3\2\2\2\u012f\u010f\3")
        buf.write("\2\2\2\u012f\u0112\3\2\2\2\u012f\u011a\3\2\2\2\u012f\u0123")
        buf.write("\3\2\2\2\u012f\u0127\3\2\2\2\u012f\u012b\3\2\2\2\u0130")
        buf.write("\5\3\2\2\2\u0131\u014a\5\22\n\2\u0132\u0133\7!\2\2\u0133")
        buf.write("\u0134\5\26\f\2\u0134\u0135\b\4\1\2\u0135\u014b\3\2\2")
        buf.write("\2\u0136\u0137\7\"\2\2\u0137\u0138\5\26\f\2\u0138\u0139")
        buf.write("\b\4\1\2\u0139\u014b\3\2\2\2\u013a\u013b\7#\2\2\u013b")
        buf.write("\u013c\5\26\f\2\u013c\u013d\b\4\1\2\u013d\u014b\3\2\2")
        buf.write("\2\u013e\u013f\7$\2\2\u013f\u0140\5\26\f\2\u0140\u0141")
        buf.write("\b\4\1\2\u0141\u014b\3\2\2\2\u0142\u0143\7%\2\2\u0143")
        buf.write("\u0144\5\26\f\2\u0144\u0145\b\4\1\2\u0145\u014b\3\2\2")
        buf.write("\2\u0146\u0147\7&\2\2\u0147\u0148\5\26\f\2\u0148\u0149")
        buf.write("\b\4\1\2\u0149\u014b\3\2\2\2\u014a\u0132\3\2\2\2\u014a")
        buf.write("\u0136\3\2\2\2\u014a\u013a\3\2\2\2\u014a\u013e\3\2\2\2")
        buf.write("\u014a\u0142\3\2\2\2\u014a\u0146\3\2\2\2\u014b\7\3\2\2")
        buf.write("\2\u014c\u014d\7\'\2\2\u014d\u014e\7\4\2\2\u014e\u014f")
        buf.write("\5\26\f\2\u014f\u0150\7\5\2\2\u0150\u015b\7\6\2\2\u0151")
        buf.write("\u0152\7\f\2\2\u0152\u0155\5\30\r\2\u0153\u0154\7\20\2")
        buf.write("\2\u0154\u0156\5T+\2\u0155\u0153\3\2\2\2\u0155\u0156\3")
        buf.write("\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\7\r\2\2\u0158\u0159")
        buf.write("\5\2\2\2\u0159\u015c\3\2\2\2\u015a\u015c\5\f\7\2\u015b")
        buf.write("\u0151\3\2\2\2\u015b\u015a\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0164\3")
        buf.write("\2\2\2\u015f\u0160\7\16\2\2\u0160\u0161\7\r\2\2\u0161")
        buf.write("\u0162\5\2\2\2\u0162\u0163\b\5\1\2\u0163\u0165\3\2\2\2")
        buf.write("\u0164\u015f\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0166\3")
        buf.write("\2\2\2\u0166\u0167\7\b\2\2\u0167\u0168\b\5\1\2\u0168\t")
        buf.write("\3\2\2\2\u0169\u016a\7(\2\2\u016a\u016b\7\4\2\2\u016b")
        buf.write("\u016c\5\26\f\2\u016c\u016f\7\5\2\2\u016d\u016e\7)\2\2")
        buf.write("\u016e\u0170\5\24\13\2\u016f\u016d\3\2\2\2\u016f\u0170")
        buf.write("\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0173\7\6\2\2\u0172")
        buf.write("\u0174\5\f\7\2\u0173\u0172\3\2\2\2\u0174\u0175\3\2\2\2")
        buf.write("\u0175\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u017a\3")
        buf.write("\2\2\2\u0177\u0178\7\16\2\2\u0178\u0179\7\r\2\2\u0179")
        buf.write("\u017b\5\2\2\2\u017a\u0177\3\2\2\2\u017a\u017b\3\2\2\2")
        buf.write("\u017b\u017c\3\2\2\2\u017c\u017d\7\b\2\2\u017d\u017e\b")
        buf.write("\6\1\2\u017e\13\3\2\2\2\u017f\u0180\7*\2\2\u0180\u0183")
        buf.write("\5\26\f\2\u0181\u0182\7+\2\2\u0182\u0184\5\26\f\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0187\3\2\2\2")
        buf.write("\u0185\u0186\7\20\2\2\u0186\u0188\5T+\2\u0187\u0185\3")
        buf.write("\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a")
        buf.write("\7\r\2\2\u018a\u018b\5\2\2\2\u018b\r\3\2\2\2\u018c\u018d")
        buf.write("\7W\2\2\u018d\u018e\7,\2\2\u018e\u018f\5\64\33\2\u018f")
        buf.write("\u0190\b\b\1\2\u0190\u0195\3\2\2\2\u0191\u0192\5\20\t")
        buf.write("\2\u0192\u0193\b\b\1\2\u0193\u0195\3\2\2\2\u0194\u018c")
        buf.write("\3\2\2\2\u0194\u0191\3\2\2\2\u0195\17\3\2\2\2\u0196\u0197")
        buf.write("\5\22\n\2\u0197\u019e\7,\2\2\u0198\u0199\5\20\t\2\u0199")
        buf.write("\u019a\b\t\1\2\u019a\u019f\3\2\2\2\u019b\u019c\5\32\16")
        buf.write("\2\u019c\u019d\b\t\1\2\u019d\u019f\3\2\2\2\u019e\u0198")
        buf.write("\3\2\2\2\u019e\u019b\3\2\2\2\u019f\21\3\2\2\2\u01a0\u01a1")
        buf.write("\5\24\13\2\u01a1\u01ad\b\n\1\2\u01a2\u01a3\7-\2\2\u01a3")
        buf.write("\u01a4\5R*\2\u01a4\u01a5\b\n\1\2\u01a5\u01ac\3\2\2\2\u01a6")
        buf.write("\u01a7\7.\2\2\u01a7\u01a8\5\30\r\2\u01a8\u01a9\7/\2\2")
        buf.write("\u01a9\u01aa\b\n\1\2\u01aa\u01ac\3\2\2\2\u01ab\u01a2\3")
        buf.write("\2\2\2\u01ab\u01a6\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab")
        buf.write("\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b9\3\2\2\2\u01af")
        buf.write("\u01ad\3\2\2\2\u01b0\u01b1\7.\2\2\u01b1\u01b2\5V,\2\u01b2")
        buf.write("\u01b3\7/\2\2\u01b3\u01b4\b\n\1\2\u01b4\u01b9\3\2\2\2")
        buf.write("\u01b5\u01b6\6\n\2\3\u01b6\u01b7\7\60\2\2\u01b7\u01b9")
        buf.write("\b\n\1\2\u01b8\u01a0\3\2\2\2\u01b8\u01b0\3\2\2\2\u01b8")
        buf.write("\u01b5\3\2\2\2\u01b9\23\3\2\2\2\u01ba\u01bb\7W\2\2\u01bb")
        buf.write("\u01bc\b\13\1\2\u01bc\25\3\2\2\2\u01bd\u01be\5\32\16\2")
        buf.write("\u01be\u01bf\b\f\1\2\u01bf\27\3\2\2\2\u01c0\u01c1\5\32")
        buf.write("\16\2\u01c1\u01c8\b\r\1\2\u01c2\u01c3\7 \2\2\u01c3\u01c4")
        buf.write("\5\32\16\2\u01c4\u01c5\b\r\1\2\u01c5\u01c7\3\2\2\2\u01c6")
        buf.write("\u01c2\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\31\3\2\2\2\u01ca\u01c8\3\2")
        buf.write("\2\2\u01cb\u01cc\5\34\17\2\u01cc\u01cd\b\16\1\2\u01cd")
        buf.write("\u01db\3\2\2\2\u01ce\u01cf\5 \21\2\u01cf\u01d8\b\16\1")
        buf.write("\2\u01d0\u01d1\7\61\2\2\u01d1\u01d2\5 \21\2\u01d2\u01d3")
        buf.write("\b\16\1\2\u01d3\u01d9\3\2\2\2\u01d4\u01d5\7\62\2\2\u01d5")
        buf.write("\u01d6\5 \21\2\u01d6\u01d7\b\16\1\2\u01d7\u01d9\3\2\2")
        buf.write("\2\u01d8\u01d0\3\2\2\2\u01d8\u01d4\3\2\2\2\u01d8\u01d9")
        buf.write("\3\2\2\2\u01d9\u01db\3\2\2\2\u01da\u01cb\3\2\2\2\u01da")
        buf.write("\u01ce\3\2\2\2\u01db\33\3\2\2\2\u01dc\u01e5\5\36\20\2")
        buf.write("\u01dd\u01de\7\63\2\2\u01de\u01df\5\26\f\2\u01df\u01e0")
        buf.write("\b\17\1\2\u01e0\u01e6\3\2\2\2\u01e1\u01e2\7\64\2\2\u01e2")
        buf.write("\u01e3\5\26\f\2\u01e3\u01e4\b\17\1\2\u01e4\u01e6\3\2\2")
        buf.write("\2\u01e5\u01dd\3\2\2\2\u01e5\u01e1\3\2\2\2\u01e6\35\3")
        buf.write("\2\2\2\u01e7\u01e8\5R*\2\u01e8\u01e9\b\20\1\2\u01e9\u01fa")
        buf.write("\3\2\2\2\u01ea\u01f6\7.\2\2\u01eb\u01ec\5R*\2\u01ec\u01f3")
        buf.write("\b\20\1\2\u01ed\u01ee\7 \2\2\u01ee\u01ef\5R*\2\u01ef\u01f0")
        buf.write("\b\20\1\2\u01f0\u01f2\3\2\2\2\u01f1\u01ed\3\2\2\2\u01f2")
        buf.write("\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01eb\3")
        buf.write("\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa")
        buf.write("\7/\2\2\u01f9\u01e7\3\2\2\2\u01f9\u01ea\3\2\2\2\u01fa")
        buf.write("\37\3\2\2\2\u01fb\u01fc\5\"\22\2\u01fc\u0201\b\21\1\2")
        buf.write("\u01fd\u01fe\7\65\2\2\u01fe\u01ff\5 \21\2\u01ff\u0200")
        buf.write("\b\21\1\2\u0200\u0202\3\2\2\2\u0201\u01fd\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202!\3\2\2\2\u0203\u0204\5$\23\2\u0204")
        buf.write("\u020b\b\22\1\2\u0205\u0206\7\66\2\2\u0206\u0207\5$\23")
        buf.write("\2\u0207\u0208\b\22\1\2\u0208\u020a\3\2\2\2\u0209\u0205")
        buf.write("\3\2\2\2\u020a\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020b")
        buf.write("\u020c\3\2\2\2\u020c#\3\2\2\2\u020d\u020b\3\2\2\2\u020e")
        buf.write("\u020f\5&\24\2\u020f\u0216\b\23\1\2\u0210\u0211\7\67\2")
        buf.write("\2\u0211\u0212\5&\24\2\u0212\u0213\b\23\1\2\u0213\u0215")
        buf.write("\3\2\2\2\u0214\u0210\3\2\2\2\u0215\u0218\3\2\2\2\u0216")
        buf.write("\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217%\3\2\2\2\u0218")
        buf.write("\u0216\3\2\2\2\u0219\u021a\5(\25\2\u021a\u023b\b\24\1")
        buf.write("\2\u021b\u021c\78\2\2\u021c\u021d\5(\25\2\u021d\u021e")
        buf.write("\b\24\1\2\u021e\u023c\3\2\2\2\u021f\u0220\79\2\2\u0220")
        buf.write("\u0221\5(\25\2\u0221\u0222\b\24\1\2\u0222\u023c\3\2\2")
        buf.write("\2\u0223\u0224\7:\2\2\u0224\u0225\5(\25\2\u0225\u0226")
        buf.write("\b\24\1\2\u0226\u023c\3\2\2\2\u0227\u0228\7;\2\2\u0228")
        buf.write("\u0229\5(\25\2\u0229\u022a\b\24\1\2\u022a\u023c\3\2\2")
        buf.write("\2\u022b\u022c\7<\2\2\u022c\u022d\5(\25\2\u022d\u022e")
        buf.write("\b\24\1\2\u022e\u023c\3\2\2\2\u022f\u0230\7=\2\2\u0230")
        buf.write("\u0231\5(\25\2\u0231\u0232\b\24\1\2\u0232\u023c\3\2\2")
        buf.write("\2\u0233\u0234\7>\2\2\u0234\u0235\5(\25\2\u0235\u0236")
        buf.write("\b\24\1\2\u0236\u023c\3\2\2\2\u0237\u0238\7?\2\2\u0238")
        buf.write("\u0239\5(\25\2\u0239\u023a\b\24\1\2\u023a\u023c\3\2\2")
        buf.write("\2\u023b\u021b\3\2\2\2\u023b\u021f\3\2\2\2\u023b\u0223")
        buf.write("\3\2\2\2\u023b\u0227\3\2\2\2\u023b\u022b\3\2\2\2\u023b")
        buf.write("\u022f\3\2\2\2\u023b\u0233\3\2\2\2\u023b\u0237\3\2\2\2")
        buf.write("\u023b\u023c\3\2\2\2\u023c\'\3\2\2\2\u023d\u023e\5*\26")
        buf.write("\2\u023e\u0249\b\25\1\2\u023f\u0240\7@\2\2\u0240\u0241")
        buf.write("\5*\26\2\u0241\u0242\b\25\1\2\u0242\u0248\3\2\2\2\u0243")
        buf.write("\u0244\7A\2\2\u0244\u0245\5*\26\2\u0245\u0246\b\25\1\2")
        buf.write("\u0246\u0248\3\2\2\2\u0247\u023f\3\2\2\2\u0247\u0243\3")
        buf.write("\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2\u0249\u024a")
        buf.write("\3\2\2\2\u024a)\3\2\2\2\u024b\u0249\3\2\2\2\u024c\u024d")
        buf.write("\5,\27\2\u024d\u0264\b\26\1\2\u024e\u024f\7B\2\2\u024f")
        buf.write("\u0250\5,\27\2\u0250\u0251\b\26\1\2\u0251\u0263\3\2\2")
        buf.write("\2\u0252\u0253\7C\2\2\u0253\u0254\5,\27\2\u0254\u0255")
        buf.write("\b\26\1\2\u0255\u0263\3\2\2\2\u0256\u0257\7D\2\2\u0257")
        buf.write("\u0258\5,\27\2\u0258\u0259\b\26\1\2\u0259\u0263\3\2\2")
        buf.write("\2\u025a\u025b\7E\2\2\u025b\u025c\5,\27\2\u025c\u025d")
        buf.write("\b\26\1\2\u025d\u0263\3\2\2\2\u025e\u025f\7F\2\2\u025f")
        buf.write("\u0260\5,\27\2\u0260\u0261\b\26\1\2\u0261\u0263\3\2\2")
        buf.write("\2\u0262\u024e\3\2\2\2\u0262\u0252\3\2\2\2\u0262\u0256")
        buf.write("\3\2\2\2\u0262\u025a\3\2\2\2\u0262\u025e\3\2\2\2\u0263")
        buf.write("\u0266\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2")
        buf.write("\u0265+\3\2\2\2\u0266\u0264\3\2\2\2\u0267\u0268\5.\30")
        buf.write("\2\u0268\u0273\b\27\1\2\u0269\u026a\7G\2\2\u026a\u026b")
        buf.write("\5.\30\2\u026b\u026c\b\27\1\2\u026c\u0272\3\2\2\2\u026d")
        buf.write("\u026e\7H\2\2\u026e\u026f\5.\30\2\u026f\u0270\b\27\1\2")
        buf.write("\u0270\u0272\3\2\2\2\u0271\u0269\3\2\2\2\u0271\u026d\3")
        buf.write("\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274")
        buf.write("\3\2\2\2\u0274-\3\2\2\2\u0275\u0273\3\2\2\2\u0276\u0277")
        buf.write("\5\60\31\2\u0277\u027c\b\30\1\2\u0278\u0279\7I\2\2\u0279")
        buf.write("\u027a\5.\30\2\u027a\u027b\b\30\1\2\u027b\u027d\3\2\2")
        buf.write("\2\u027c\u0278\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u028f")
        buf.write("\3\2\2\2\u027e\u027f\7G\2\2\u027f\u0280\5.\30\2\u0280")
        buf.write("\u0281\b\30\1\2\u0281\u028f\3\2\2\2\u0282\u0283\7H\2\2")
        buf.write("\u0283\u0284\5.\30\2\u0284\u0285\b\30\1\2\u0285\u028f")
        buf.write("\3\2\2\2\u0286\u0287\7J\2\2\u0287\u0288\5.\30\2\u0288")
        buf.write("\u0289\b\30\1\2\u0289\u028f\3\2\2\2\u028a\u028b\7A\2\2")
        buf.write("\u028b\u028c\5.\30\2\u028c\u028d\b\30\1\2\u028d\u028f")
        buf.write("\3\2\2\2\u028e\u0276\3\2\2\2\u028e\u027e\3\2\2\2\u028e")
        buf.write("\u0282\3\2\2\2\u028e\u0286\3\2\2\2\u028e\u028a\3\2\2\2")
        buf.write("\u028f/\3\2\2\2\u0290\u0291\7K\2\2\u0291\u0292\5\60\31")
        buf.write("\2\u0292\u0293\b\31\1\2\u0293\u02ce\3\2\2\2\u0294\u0295")
        buf.write("\7X\2\2\u0295\u0296\7\4\2\2\u0296\u0297\5\62\32\2\u0297")
        buf.write("\u0298\7\5\2\2\u0298\u0299\b\31\1\2\u0299\u02ce\3\2\2")
        buf.write("\2\u029a\u029b\7L\2\2\u029b\u029c\7\4\2\2\u029c\u029d")
        buf.write("\5H%\2\u029d\u029e\7\20\2\2\u029e\u029f\5T+\2\u029f\u02a0")
        buf.write("\7\5\2\2\u02a0\u02a1\b\31\1\2\u02a1\u02ce\3\2\2\2\u02a2")
        buf.write("\u02a3\7M\2\2\u02a3\u02a4\7\4\2\2\u02a4\u02a5\5H%\2\u02a5")
        buf.write("\u02a6\7\20\2\2\u02a6\u02a7\5T+\2\u02a7\u02a8\7\5\2\2")
        buf.write("\u02a8\u02a9\b\31\1\2\u02a9\u02ce\3\2\2\2\u02aa\u02ab")
        buf.write("\7\4\2\2\u02ab\u02ac\5\32\16\2\u02ac\u02ad\7\5\2\2\u02ad")
        buf.write("\u02ae\b\31\1\2\u02ae\u02b6\3\2\2\2\u02af\u02b0\5\64\33")
        buf.write("\2\u02b0\u02b1\b\31\1\2\u02b1\u02b6\3\2\2\2\u02b2\u02b3")
        buf.write("\5R*\2\u02b3\u02b4\b\31\1\2\u02b4\u02b6\3\2\2\2\u02b5")
        buf.write("\u02aa\3\2\2\2\u02b5\u02af\3\2\2\2\u02b5\u02b2\3\2\2\2")
        buf.write("\u02b6\u02c0\3\2\2\2\u02b7\u02b8\7-\2\2\u02b8\u02b9\5")
        buf.write("R*\2\u02b9\u02ba\b\31\1\2\u02ba\u02bf\3\2\2\2\u02bb\u02bc")
        buf.write("\5> \2\u02bc\u02bd\b\31\1\2\u02bd\u02bf\3\2\2\2\u02be")
        buf.write("\u02b7\3\2\2\2\u02be\u02bb\3\2\2\2\u02bf\u02c2\3\2\2\2")
        buf.write("\u02c0\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c5\3")
        buf.write("\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c4\7K\2\2\u02c4\u02c6")
        buf.write("\b\31\1\2\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6")
        buf.write("\u02ce\3\2\2\2\u02c7\u02c8\5D#\2\u02c8\u02cb\b\31\1\2")
        buf.write("\u02c9\u02ca\7K\2\2\u02ca\u02cc\b\31\1\2\u02cb\u02c9\3")
        buf.write("\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd\u0290")
        buf.write("\3\2\2\2\u02cd\u0294\3\2\2\2\u02cd\u029a\3\2\2\2\u02cd")
        buf.write("\u02a2\3\2\2\2\u02cd\u02b5\3\2\2\2\u02cd\u02c7\3\2\2\2")
        buf.write("\u02ce\61\3\2\2\2\u02cf\u02d2\5\30\r\2\u02d0\u02d2\3\2")
        buf.write("\2\2\u02d1\u02cf\3\2\2\2\u02d1\u02d0\3\2\2\2\u02d2\63")
        buf.write("\3\2\2\2\u02d3\u02d4\7N\2\2\u02d4\u02d5\7\4\2\2\u02d5")
        buf.write("\u02d6\5\66\34\2\u02d6\u02d7\7\5\2\2\u02d7\u02d8\7\6\2")
        buf.write("\2\u02d8\u02d9\5\2\2\2\u02d9\u02da\7\b\2\2\u02da\u02db")
        buf.write("\b\33\1\2\u02db\u02ef\3\2\2\2\u02dc\u02dd\7O\2\2\u02dd")
        buf.write("\u02de\7\4\2\2\u02de\u02df\5\66\34\2\u02df\u02e0\7\5\2")
        buf.write("\2\u02e0\u02e1\7\6\2\2\u02e1\u02e2\5\2\2\2\u02e2\u02e3")
        buf.write("\7\b\2\2\u02e3\u02e4\b\33\1\2\u02e4\u02ef\3\2\2\2\u02e5")
        buf.write("\u02e6\7P\2\2\u02e6\u02e7\7\4\2\2\u02e7\u02e8\5\66\34")
        buf.write("\2\u02e8\u02e9\7\5\2\2\u02e9\u02ea\7\6\2\2\u02ea\u02eb")
        buf.write("\5\2\2\2\u02eb\u02ec\7\b\2\2\u02ec\u02ed\b\33\1\2\u02ed")
        buf.write("\u02ef\3\2\2\2\u02ee\u02d3\3\2\2\2\u02ee\u02dc\3\2\2\2")
        buf.write("\u02ee\u02e5\3\2\2\2\u02ef\65\3\2\2\2\u02f0\u02f1\58\35")
        buf.write("\2\u02f1\u02f8\b\34\1\2\u02f2\u02f3\7 \2\2\u02f3\u02f4")
        buf.write("\58\35\2\u02f4\u02f5\b\34\1\2\u02f5\u02f7\3\2\2\2\u02f6")
        buf.write("\u02f2\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8\u02f6\3\2\2\2")
        buf.write("\u02f8\u02f9\3\2\2\2\u02f9\u0301\3\2\2\2\u02fa\u02f8\3")
        buf.write("\2\2\2\u02fb\u02fc\7 \2\2\u02fc\u02fd\5:\36\2\u02fd\u02fe")
        buf.write("\b\34\1\2\u02fe\u0300\3\2\2\2\u02ff\u02fb\3\2\2\2\u0300")
        buf.write("\u0303\3\2\2\2\u0301\u02ff\3\2\2\2\u0301\u0302\3\2\2\2")
        buf.write("\u0302\u0308\3\2\2\2\u0303\u0301\3\2\2\2\u0304\u0305\7")
        buf.write(" \2\2\u0305\u0306\5<\37\2\u0306\u0307\b\34\1\2\u0307\u0309")
        buf.write("\3\2\2\2\u0308\u0304\3\2\2\2\u0308\u0309\3\2\2\2\u0309")
        buf.write("\u0320\3\2\2\2\u030a\u030b\5:\36\2\u030b\u0312\b\34\1")
        buf.write("\2\u030c\u030d\7 \2\2\u030d\u030e\5:\36\2\u030e\u030f")
        buf.write("\b\34\1\2\u030f\u0311\3\2\2\2\u0310\u030c\3\2\2\2\u0311")
        buf.write("\u0314\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0313\3\2\2\2")
        buf.write("\u0313\u0319\3\2\2\2\u0314\u0312\3\2\2\2\u0315\u0316\7")
        buf.write(" \2\2\u0316\u0317\5<\37\2\u0317\u0318\b\34\1\2\u0318\u031a")
        buf.write("\3\2\2\2\u0319\u0315\3\2\2\2\u0319\u031a\3\2\2\2\u031a")
        buf.write("\u0320\3\2\2\2\u031b\u031c\5<\37\2\u031c\u031d\b\34\1")
        buf.write("\2\u031d\u0320\3\2\2\2\u031e\u0320\3\2\2\2\u031f\u02f0")
        buf.write("\3\2\2\2\u031f\u030a\3\2\2\2\u031f\u031b\3\2\2\2\u031f")
        buf.write("\u031e\3\2\2\2\u0320\67\3\2\2\2\u0321\u0322\6\35\3\3\u0322")
        buf.write("\u0323\7Q\2\2\u0323\u0324\5\24\13\2\u0324\u0325\b\35\1")
        buf.write("\2\u0325\u032a\3\2\2\2\u0326\u0327\5R*\2\u0327\u0328\b")
        buf.write("\35\1\2\u0328\u032a\3\2\2\2\u0329\u0321\3\2\2\2\u0329")
        buf.write("\u0326\3\2\2\2\u032a9\3\2\2\2\u032b\u032c\5\24\13\2\u032c")
        buf.write("\u032d\7,\2\2\u032d\u032e\5\26\f\2\u032e\u032f\b\36\1")
        buf.write("\2\u032f;\3\2\2\2\u0330\u0331\7B\2\2\u0331\u0332\5R*\2")
        buf.write("\u0332\u0333\b\37\1\2\u0333=\3\2\2\2\u0334\u0335\7\4\2")
        buf.write("\2\u0335\u0336\5B\"\2\u0336\u0337\7\5\2\2\u0337\u0338")
        buf.write("\b \1\2\u0338\u0344\3\2\2\2\u0339\u033a\7.\2\2\u033a\u033b")
        buf.write("\5@!\2\u033b\u033c\7/\2\2\u033c\u033d\b \1\2\u033d\u0344")
        buf.write("\3\2\2\2\u033e\u033f\7\6\2\2\u033f\u0340\5\26\f\2\u0340")
        buf.write("\u0341\7\b\2\2\u0341\u0342\b \1\2\u0342\u0344\3\2\2\2")
        buf.write("\u0343\u0334\3\2\2\2\u0343\u0339\3\2\2\2\u0343\u033e\3")
        buf.write("\2\2\2\u0344?\3\2\2\2\u0345\u0358\5\26\f\2\u0346\u034b")
        buf.write("\7[\2\2\u0347\u0348\5\26\f\2\u0348\u0349\b!\1\2\u0349")
        buf.write("\u034c\3\2\2\2\u034a\u034c\b!\1\2\u034b\u0347\3\2\2\2")
        buf.write("\u034b\u034a\3\2\2\2\u034c\u0359\3\2\2\2\u034d\u034e\7")
        buf.write(" \2\2\u034e\u034f\5\26\f\2\u034f\u0350\b!\1\2\u0350\u0352")
        buf.write("\3\2\2\2\u0351\u034d\3\2\2\2\u0352\u0353\3\2\2\2\u0353")
        buf.write("\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2")
        buf.write("\u0355\u0356\b!\1\2\u0356\u0359\3\2\2\2\u0357\u0359\b")
        buf.write("!\1\2\u0358\u0346\3\2\2\2\u0358\u0351\3\2\2\2\u0358\u0357")
        buf.write("\3\2\2\2\u0359\u035f\3\2\2\2\u035a\u035b\7[\2\2\u035b")
        buf.write("\u035c\5\26\f\2\u035c\u035d\b!\1\2\u035d\u035f\3\2\2\2")
        buf.write("\u035e\u0345\3\2\2\2\u035e\u035a\3\2\2\2\u035fA\3\2\2")
        buf.write("\2\u0360\u0361\5\30\r\2\u0361\u0367\b\"\1\2\u0362\u0363")
        buf.write("\7 \2\2\u0363\u0364\7B\2\2\u0364\u0365\5\32\16\2\u0365")
        buf.write("\u0366\b\"\1\2\u0366\u0368\3\2\2\2\u0367\u0362\3\2\2\2")
        buf.write("\u0367\u0368\3\2\2\2\u0368\u036f\3\2\2\2\u0369\u036a\7")
        buf.write("B\2\2\u036a\u036b\5\32\16\2\u036b\u036c\b\"\1\2\u036c")
        buf.write("\u036f\3\2\2\2\u036d\u036f\3\2\2\2\u036e\u0360\3\2\2\2")
        buf.write("\u036e\u0369\3\2\2\2\u036e\u036d\3\2\2\2\u036fC\3\2\2")
        buf.write("\2\u0370\u0374\7.\2\2\u0371\u0372\5F$\2\u0372\u0373\b")
        buf.write("#\1\2\u0373\u0375\3\2\2\2\u0374\u0371\3\2\2\2\u0374\u0375")
        buf.write("\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0377\7/\2\2\u0377")
        buf.write("\u0391\b#\1\2\u0378\u037c\7\6\2\2\u0379\u037a\5F$\2\u037a")
        buf.write("\u037b\b#\1\2\u037b\u037d\3\2\2\2\u037c\u0379\3\2\2\2")
        buf.write("\u037c\u037d\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\7")
        buf.write("\b\2\2\u037f\u0391\b#\1\2\u0380\u0381\7\\\2\2\u0381\u0391")
        buf.write("\b#\1\2\u0382\u0383\7]\2\2\u0383\u0391\b#\1\2\u0384\u0385")
        buf.write("\5L\'\2\u0385\u0386\b#\1\2\u0386\u0391\3\2\2\2\u0387\u0388")
        buf.write("\5N(\2\u0388\u0389\b#\1\2\u0389\u0391\3\2\2\2\u038a\u038b")
        buf.write("\5P)\2\u038b\u038c\b#\1\2\u038c\u0391\3\2\2\2\u038d\u038e")
        buf.write("\6#\4\3\u038e\u038f\7\60\2\2\u038f\u0391\b#\1\2\u0390")
        buf.write("\u0370\3\2\2\2\u0390\u0378\3\2\2\2\u0390\u0380\3\2\2\2")
        buf.write("\u0390\u0382\3\2\2\2\u0390\u0384\3\2\2\2\u0390\u0387\3")
        buf.write("\2\2\2\u0390\u038a\3\2\2\2\u0390\u038d\3\2\2\2\u0391E")
        buf.write("\3\2\2\2\u0392\u03c1\5\26\f\2\u0393\u0394\7 \2\2\u0394")
        buf.write("\u03aa\5\26\f\2\u0395\u0396\7[\2\2\u0396\u0397\5\26\f")
        buf.write("\2\u0397\u0398\b$\1\2\u0398\u03ab\3\2\2\2\u0399\u03a0")
        buf.write("\b$\1\2\u039a\u039b\7 \2\2\u039b\u039c\5\26\f\2\u039c")
        buf.write("\u039d\b$\1\2\u039d\u039f\3\2\2\2\u039e\u039a\3\2\2\2")
        buf.write("\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3")
        buf.write("\2\2\2\u03a1\u03a8\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a4")
        buf.write("\7\20\2\2\u03a4\u03a5\5\26\f\2\u03a5\u03a6\b$\1\2\u03a6")
        buf.write("\u03a9\3\2\2\2\u03a7\u03a9\b$\1\2\u03a8\u03a3\3\2\2\2")
        buf.write("\u03a8\u03a7\3\2\2\2\u03a9\u03ab\3\2\2\2\u03aa\u0395\3")
        buf.write("\2\2\2\u03aa\u0399\3\2\2\2\u03ab\u03c2\3\2\2\2\u03ac\u03ad")
        buf.write("\7[\2\2\u03ad\u03ae\5\26\f\2\u03ae\u03af\b$\1\2\u03af")
        buf.write("\u03c2\3\2\2\2\u03b0\u03b6\b$\1\2\u03b1\u03b2\7\20\2\2")
        buf.write("\u03b2\u03b3\5\26\f\2\u03b3\u03b4\b$\1\2\u03b4\u03b7\3")
        buf.write("\2\2\2\u03b5\u03b7\b$\1\2\u03b6\u03b1\3\2\2\2\u03b6\u03b5")
        buf.write("\3\2\2\2\u03b7\u03c2\3\2\2\2\u03b8\u03b9\7\r\2\2\u03b9")
        buf.write("\u03bf\5H%\2\u03ba\u03bb\7\20\2\2\u03bb\u03bc\5T+\2\u03bc")
        buf.write("\u03bd\b$\1\2\u03bd\u03c0\3\2\2\2\u03be\u03c0\b$\1\2\u03bf")
        buf.write("\u03ba\3\2\2\2\u03bf\u03be\3\2\2\2\u03c0\u03c2\3\2\2\2")
        buf.write("\u03c1\u0393\3\2\2\2\u03c1\u03ac\3\2\2\2\u03c1\u03b0\3")
        buf.write("\2\2\2\u03c1\u03b8\3\2\2\2\u03c2G\3\2\2\2\u03c3\u03c4")
        buf.write("\5J&\2\u03c4\u03cb\b%\1\2\u03c5\u03c6\7 \2\2\u03c6\u03c7")
        buf.write("\5J&\2\u03c7\u03c8\b%\1\2\u03c8\u03ca\3\2\2\2\u03c9\u03c5")
        buf.write("\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb")
        buf.write("\u03cc\3\2\2\2\u03ccI\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03cf\5\22\n\2\u03cf\u03d0\7>\2\2\u03d0\u03d1\5\26\f")
        buf.write("\2\u03d1\u03d2\b&\1\2\u03d2K\3\2\2\2\u03d3\u03d7\7R\2")
        buf.write("\2\u03d4\u03d5\5N(\2\u03d5\u03d6\b\'\1\2\u03d6\u03d8\3")
        buf.write("\2\2\2\u03d7\u03d4\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03d7")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db\3\2\2\2\u03db")
        buf.write("\u03dc\7S\2\2\u03dc\u03dd\b\'\1\2\u03ddM\3\2\2\2\u03de")
        buf.write("\u03f0\7R\2\2\u03df\u03e0\7A\2\2\u03e0\u03e3\b(\1\2\u03e1")
        buf.write("\u03e3\b(\1\2\u03e2\u03df\3\2\2\2\u03e2\u03e1\3\2\2\2")
        buf.write("\u03e3\u03e8\3\2\2\2\u03e4\u03e5\7Y\2\2\u03e5\u03e9\b")
        buf.write("(\1\2\u03e6\u03e7\7Z\2\2\u03e7\u03e9\b(\1\2\u03e8\u03e4")
        buf.write("\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e9\u03ed\3\2\2\2\u03ea")
        buf.write("\u03eb\7C\2\2\u03eb\u03ec\7Y\2\2\u03ec\u03ee\b(\1\2\u03ed")
        buf.write("\u03ea\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2")
        buf.write("\u03ef\u03f1\b(\1\2\u03f0\u03e2\3\2\2\2\u03f1\u03f2\3")
        buf.write("\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4")
        buf.write("\3\2\2\2\u03f4\u03f5\7S\2\2\u03f5\u03f6\b(\1\2\u03f6O")
        buf.write("\3\2\2\2\u03f7\u03f8\7Y\2\2\u03f8\u0402\b)\1\2\u03f9\u03fa")
        buf.write("\7Z\2\2\u03fa\u0402\b)\1\2\u03fb\u03fc\7T\2\2\u03fc\u0402")
        buf.write("\b)\1\2\u03fd\u03fe\7U\2\2\u03fe\u0402\b)\1\2\u03ff\u0400")
        buf.write("\7V\2\2\u0400\u0402\b)\1\2\u0401\u03f7\3\2\2\2\u0401\u03f9")
        buf.write("\3\2\2\2\u0401\u03fb\3\2\2\2\u0401\u03fd\3\2\2\2\u0401")
        buf.write("\u03ff\3\2\2\2\u0402Q\3\2\2\2\u0403\u0404\7W\2\2\u0404")
        buf.write("\u0405\b*\1\2\u0405S\3\2\2\2\u0406\u0407\5\26\f\2\u0407")
        buf.write("\u0408\b+\1\2\u0408U\3\2\2\2\u0409\u040a\5\22\n\2\u040a")
        buf.write("\u0411\b,\1\2\u040b\u040c\7 \2\2\u040c\u040d\5\22\n\2")
        buf.write("\u040d\u040e\b,\1\2\u040e\u0410\3\2\2\2\u040f\u040b\3")
        buf.write("\2\2\2\u0410\u0413\3\2\2\2\u0411\u040f\3\2\2\2\u0411\u0412")
        buf.write("\3\2\2\2\u0412W\3\2\2\2\u0413\u0411\3\2\2\2W]o\u0087\u0090")
        buf.write("\u009e\u00a4\u00b5\u00e8\u00f4\u0102\u0116\u012f\u014a")
        buf.write("\u0155\u015b\u015d\u0164\u016f\u0175\u017a\u0183\u0187")
        buf.write("\u0194\u019e\u01ab\u01ad\u01b8\u01c8\u01d8\u01da\u01e5")
        buf.write("\u01f3\u01f6\u01f9\u0201\u020b\u0216\u023b\u0247\u0249")
        buf.write("\u0262\u0264\u0271\u0273\u027c\u028e\u02b5\u02be\u02c0")
        buf.write("\u02c5\u02cb\u02cd\u02d1\u02ee\u02f8\u0301\u0308\u0312")
        buf.write("\u0319\u031f\u0329\u0343\u034b\u0353\u0358\u035e\u0367")
        buf.write("\u036e\u0374\u037c\u0390\u03a0\u03a8\u03aa\u03b6\u03bf")
        buf.write("\u03c1\u03cb\u03d9\u03e2\u03e8\u03ed\u03f2\u0401\u0411")
        return buf.getvalue()


class SetlXgrammarParser ( Parser ):

    grammarFileName = "SetlXgrammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'class'", "'('", "')'", "'{'", "'static'", 
                     "'}'", "'if'", "'else'", "'switch'", "'case'", "':'", 
                     "'default'", "'for'", "'|'", "'while'", "'do'", "';'", 
                     "'try'", "'catchLng'", "'catchUsr'", "'catch'", "'check'", 
                     "'afterBacktrack'", "'backtrack'", "'break'", "'continue'", 
                     "'exit'", "'return'", "'assert'", "','", "'+='", "'-='", 
                     "'*='", "'/='", "'\\='", "'%='", "'match'", "'scan'", 
                     "'using'", "'regex'", "'as'", "':='", "'.'", "'['", 
                     "']'", "'_'", "'<==>'", "'<!=>'", "'|->'", "'|=>'", 
                     "'=>'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'in'", "'notin'", "'+'", "'-'", "'*'", 
                     "'/'", "'\\'", "'%'", "'><'", "'+/'", "'*/'", "'**'", 
                     "'#'", "'!'", "'forall'", "'exists'", "'procedure'", 
                     "'cachedProcedure'", "'closure'", "'rw'", "'<<'", "'>>'", 
                     "'om'", "'true'", "'false'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'..'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ID", "TERM", "NUMBER", "DOUBLE", "RANGE_SIGN", 
                      "STRING", "LITERAL", "LINE_COMMENT", "MULTI_COMMENT", 
                      "WS", "REMAINDER" ]

    RULE_block = 0
    RULE_statement = 1
    RULE_assignmentOther = 2
    RULE_setlxmatch = 3
    RULE_scan = 4
    RULE_regexBranch = 5
    RULE_assignment = 6
    RULE_assignmentDirect = 7
    RULE_assignable = 8
    RULE_assignableVariable = 9
    RULE_expr = 10
    RULE_exprList = 11
    RULE_exprContent = 12
    RULE_lambdaProcedure = 13
    RULE_lambdaParameters = 14
    RULE_implication = 15
    RULE_disjunction = 16
    RULE_conjunction = 17
    RULE_comparison = 18
    RULE_setlxSum = 19
    RULE_product = 20
    RULE_setlxReduce = 21
    RULE_prefixOperation = 22
    RULE_factor = 23
    RULE_termArguments = 24
    RULE_procedure = 25
    RULE_procedureParameters = 26
    RULE_procedureParameter = 27
    RULE_procedureDefaultParameter = 28
    RULE_procedureListParameter = 29
    RULE_call = 30
    RULE_collectionAccessParams = 31
    RULE_callParameters = 32
    RULE_value = 33
    RULE_collectionBuilder = 34
    RULE_iteratorChain = 35
    RULE_iterator = 36
    RULE_matrix = 37
    RULE_vector = 38
    RULE_atomicValue = 39
    RULE_variable = 40
    RULE_condition = 41
    RULE_assignmentList = 42

    ruleNames =  [ "block", "statement", "assignmentOther", "setlxmatch", 
                   "scan", "regexBranch", "assignment", "assignmentDirect", 
                   "assignable", "assignableVariable", "expr", "exprList", 
                   "exprContent", "lambdaProcedure", "lambdaParameters", 
                   "implication", "disjunction", "conjunction", "comparison", 
                   "setlxSum", "product", "setlxReduce", "prefixOperation", 
                   "factor", "termArguments", "procedure", "procedureParameters", 
                   "procedureParameter", "procedureDefaultParameter", "procedureListParameter", 
                   "call", "collectionAccessParams", "callParameters", "value", 
                   "collectionBuilder", "iteratorChain", "iterator", "matrix", 
                   "vector", "atomicValue", "variable", "condition", "assignmentList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    ID=85
    TERM=86
    NUMBER=87
    DOUBLE=88
    RANGE_SIGN=89
    STRING=90
    LITERAL=91
    LINE_COMMENT=92
    MULTI_COMMENT=93
    WS=94
    REMAINDER=95

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blk = None
            self._statement = None # StatementContext

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.StatementContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SetlXgrammarParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_block)

        stmnts = []
            
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 86
                    localctx._statement = self.statement()
                    stmnts.append(localctx._statement.stmnt) 
                self.state = 93
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            localctx.blk = Block(stmnts)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stmnt = None
            self._ID = None # Token
            self._procedureParameters = None # ProcedureParametersContext
            self.b1 = None # BlockContext
            self.b2 = None # BlockContext
            self.c1 = None # ConditionContext
            self.c2 = None # ConditionContext
            self.b3 = None # BlockContext
            self._setlxmatch = None # SetlxmatchContext
            self._scan = None # ScanContext
            self._iteratorChain = None # IteratorChainContext
            self._condition = None # ConditionContext
            self._block = None # BlockContext
            self.v1 = None # AssignableVariableContext
            self.v2 = None # AssignableVariableContext
            self._expr = None # ExprContext
            self._assignmentOther = None # AssignmentOtherContext
            self._assignment = None # AssignmentContext

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def procedureParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureParametersContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.BlockContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,i)


        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ConditionContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,i)


        def setlxmatch(self):
            return self.getTypedRuleContext(SetlXgrammarParser.SetlxmatchContext,0)


        def scan(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ScanContext,0)


        def iteratorChain(self):
            return self.getTypedRuleContext(SetlXgrammarParser.IteratorChainContext,0)


        def assignableVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.AssignableVariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,i)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def assignmentOther(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentOtherContext,0)


        def assignment(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SetlXgrammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)

        else_list = []
        caseList = []
        tryList = []
        expression = None
        condition = None
        static = None
        block = None
            
        self._la = 0 # Token type
        try:
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 96
                self.match(SetlXgrammarParser.T__0)
                self.state = 97
                localctx._ID = self.match(SetlXgrammarParser.ID)
                self.state = 98
                self.match(SetlXgrammarParser.T__1)
                self.state = 99
                localctx._procedureParameters = self.procedureParameters(True)
                self.state = 100
                self.match(SetlXgrammarParser.T__2)
                self.state = 101
                self.match(SetlXgrammarParser.T__3)
                self.state = 102
                localctx.b1 = self.block()
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__4:
                    self.state = 103
                    self.match(SetlXgrammarParser.T__4)
                    self.state = 104
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 105
                    localctx.b2 = self.block()
                    self.state = 106
                    self.match(SetlXgrammarParser.T__5)
                    static = localctx.b2.blk


                self.state = 111
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = ClassConstructor((None if localctx._ID is None else localctx._ID.text), localctx._procedureParameters.paramList, localctx.b1.blk, static)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 114
                self.match(SetlXgrammarParser.T__6)
                self.state = 115
                self.match(SetlXgrammarParser.T__1)
                self.state = 116
                localctx.c1 = self.condition()
                self.state = 117
                self.match(SetlXgrammarParser.T__2)
                self.state = 118
                self.match(SetlXgrammarParser.T__3)
                self.state = 119
                localctx.b1 = self.block()
                self.state = 120
                self.match(SetlXgrammarParser.T__5)
                self.state = 133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 121
                        self.match(SetlXgrammarParser.T__7)
                        self.state = 122
                        self.match(SetlXgrammarParser.T__6)
                        self.state = 123
                        self.match(SetlXgrammarParser.T__1)
                        self.state = 124
                        localctx.c2 = self.condition()
                        self.state = 125
                        self.match(SetlXgrammarParser.T__2)
                        self.state = 126
                        self.match(SetlXgrammarParser.T__3)
                        self.state = 127
                        localctx.b2 = self.block()
                        self.state = 128
                        self.match(SetlXgrammarParser.T__5)
                        else_list.append(IfThenBranch(localctx.c2.cnd,localctx.b2.blk,[])) 
                        			 
                    self.state = 135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 142
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 136
                    self.match(SetlXgrammarParser.T__7)
                    self.state = 137
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 138
                    localctx.b3 = self.block()
                    self.state = 139
                    self.match(SetlXgrammarParser.T__5)
                    else_list.append(localctx.b3.blk) 


                localctx.stmnt = IfThen(localctx.c1.cnd,localctx.b1.blk,else_list) 
                		
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 146
                self.match(SetlXgrammarParser.T__8)
                self.state = 147
                self.match(SetlXgrammarParser.T__3)
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SetlXgrammarParser.T__9:
                    self.state = 148
                    self.match(SetlXgrammarParser.T__9)
                    self.state = 149
                    localctx.c1 = self.condition()
                    self.state = 150
                    self.match(SetlXgrammarParser.T__10)
                    self.state = 151
                    localctx.b1 = self.block()
                    caseList.append((localctx.c1.cnd, localctx.b1.blk)) 
                    self.state = 158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__11:
                    self.state = 159
                    self.match(SetlXgrammarParser.T__11)
                    self.state = 160
                    self.match(SetlXgrammarParser.T__10)
                    self.state = 161
                    localctx.b2 = self.block()


                self.state = 164
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = Switch(caseList,localctx.b2.blk) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 166
                localctx._setlxmatch = self.setlxmatch()
                localctx.stmnt = localctx._setlxmatch.m
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 169
                localctx._scan = self.scan()
                localctx.stmnt = localctx._scan.s
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 172
                self.match(SetlXgrammarParser.T__12)
                self.state = 173
                self.match(SetlXgrammarParser.T__1)
                self.state = 174
                localctx._iteratorChain = self.iteratorChain(False)
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__13:
                    self.state = 175
                    self.match(SetlXgrammarParser.T__13)
                    self.state = 176
                    localctx._condition = self.condition()
                    condition = localctx._condition.cnd


                self.state = 181
                self.match(SetlXgrammarParser.T__2)
                self.state = 182
                self.match(SetlXgrammarParser.T__3)
                self.state = 183
                localctx._block = self.block()
                self.state = 184
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = SetlXFor(localctx._iteratorChain.ic, condition, localctx._block.blk) 
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 187
                self.match(SetlXgrammarParser.T__14)
                self.state = 188
                self.match(SetlXgrammarParser.T__1)
                self.state = 189
                localctx._condition = self.condition()
                self.state = 190
                self.match(SetlXgrammarParser.T__2)
                self.state = 191
                self.match(SetlXgrammarParser.T__3)
                self.state = 192
                localctx._block = self.block()
                self.state = 193
                self.match(SetlXgrammarParser.T__5)
                localctx.stmnt = SetlXWhile(localctx._condition.cnd, localctx._block.blk) 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 196
                self.match(SetlXgrammarParser.T__15)
                self.state = 197
                self.match(SetlXgrammarParser.T__3)
                self.state = 198
                localctx._block = self.block()
                self.state = 199
                self.match(SetlXgrammarParser.T__5)
                self.state = 200
                self.match(SetlXgrammarParser.T__14)
                self.state = 201
                self.match(SetlXgrammarParser.T__1)
                self.state = 202
                localctx._condition = self.condition()
                self.state = 203
                self.match(SetlXgrammarParser.T__2)
                self.state = 204
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = DoWhile(localctx._condition.cnd, localctx._block.blk) 
                		
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 207
                self.match(SetlXgrammarParser.T__17)
                self.state = 208
                self.match(SetlXgrammarParser.T__3)
                self.state = 209
                localctx.b1 = self.block()
                self.state = 210
                self.match(SetlXgrammarParser.T__5)
                self.state = 230
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 211
                        self.match(SetlXgrammarParser.T__18)
                        self.state = 212
                        self.match(SetlXgrammarParser.T__1)
                        self.state = 213
                        localctx.v1 = self.assignableVariable()
                        self.state = 214
                        self.match(SetlXgrammarParser.T__2)
                        self.state = 215
                        self.match(SetlXgrammarParser.T__3)
                        self.state = 216
                        localctx.b2 = self.block()
                        self.state = 217
                        self.match(SetlXgrammarParser.T__5)
                        tryList.append( TryCatchLngBranch(localctx.v1.v, localctx.b2.blk))
                        self.state = 219
                        self.match(SetlXgrammarParser.T__19)
                        self.state = 220
                        self.match(SetlXgrammarParser.T__1)
                        self.state = 221
                        localctx.v1 = self.assignableVariable()
                        self.state = 222
                        self.match(SetlXgrammarParser.T__2)
                        self.state = 223
                        self.match(SetlXgrammarParser.T__3)
                        self.state = 224
                        localctx.b2 = self.block()
                        self.state = 225
                        self.match(SetlXgrammarParser.T__5)
                        tryList.append( TryCatchUsrBranch(localctx.v1.v, localctx.b2.blk)) 
                    self.state = 232
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 233
                    self.match(SetlXgrammarParser.T__20)
                    self.state = 234
                    self.match(SetlXgrammarParser.T__1)
                    self.state = 235
                    localctx.v2 = self.assignableVariable()
                    self.state = 236
                    self.match(SetlXgrammarParser.T__2)
                    self.state = 237
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 238
                    localctx.b3 = self.block()
                    self.state = 239
                    self.match(SetlXgrammarParser.T__5)
                    tryList.append(TryCatchBranch(localctx.v2.v, localctx.b3.blk)) 


                localctx.stmnt = TryCatch(localctx.b1.blk, tryList) 
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 246
                self.match(SetlXgrammarParser.T__21)
                self.state = 247
                self.match(SetlXgrammarParser.T__3)
                self.state = 248
                localctx.b1 = self.block()
                self.state = 249
                self.match(SetlXgrammarParser.T__5)
                self.state = 256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 250
                    self.match(SetlXgrammarParser.T__22)
                    self.state = 251
                    self.match(SetlXgrammarParser.T__3)
                    self.state = 252
                    localctx.b2 = self.block()
                    block = localctx.b2.blk
                    self.state = 254
                    self.match(SetlXgrammarParser.T__5)


                localctx.stmnt = Check(localctx.b1.blk, block) 
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 260
                self.match(SetlXgrammarParser.T__23)
                self.state = 261
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = Backtrack() 
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 263
                self.match(SetlXgrammarParser.T__24)
                self.state = 264
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXBreak() 
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 266
                self.match(SetlXgrammarParser.T__25)
                self.state = 267
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXContinue() 
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 269
                self.match(SetlXgrammarParser.T__26)
                self.state = 270
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = Exit() 
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 272
                self.match(SetlXgrammarParser.T__27)
                self.state = 276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 273
                    localctx._expr = self.expr(False)
                    expression = localctx._expr.ex 


                self.state = 278
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXReturn(expression) 
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 280
                self.match(SetlXgrammarParser.T__28)
                self.state = 281
                self.match(SetlXgrammarParser.T__1)
                self.state = 282
                localctx._condition = self.condition()
                self.state = 283
                self.match(SetlXgrammarParser.T__29)
                self.state = 284
                localctx._expr = self.expr(False)
                self.state = 285
                self.match(SetlXgrammarParser.T__2)
                self.state = 286
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = SetlXAssert(localctx._condition.cnd, localctx._expr.ex)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 289
                localctx._assignmentOther = self.assignmentOther()
                self.state = 290
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = localctx._assignmentOther.assign 
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 293
                localctx._assignment = self.assignment()
                self.state = 294
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = localctx._assignment.assign 
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 297
                localctx._expr = self.expr(False)
                self.state = 298
                self.match(SetlXgrammarParser.T__16)
                localctx.stmnt = localctx._expr.ex
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOtherContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None
            self._assignable = None # AssignableContext
            self.e = None # ExprContext

        def assignable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignmentOther

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOther" ):
                listener.enterAssignmentOther(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOther" ):
                listener.exitAssignmentOther(self)




    def assignmentOther(self):

        localctx = SetlXgrammarParser.AssignmentOtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_assignmentOther)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            localctx._assignable = self.assignable(False)
            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__30]:
                self.state = 304
                self.match(SetlXgrammarParser.T__30)
                self.state = 305
                localctx.e = self.expr(False)
                localctx.assign = SumAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__31]:
                self.state = 308
                self.match(SetlXgrammarParser.T__31)
                self.state = 309
                localctx.e = self.expr(False)
                localctx.assign = DifferenceAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__32]:
                self.state = 312
                self.match(SetlXgrammarParser.T__32)
                self.state = 313
                localctx.e = self.expr(False)
                localctx.assign = ProductAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__33]:
                self.state = 316
                self.match(SetlXgrammarParser.T__33)
                self.state = 317
                localctx.e = self.expr(False)
                localctx.assign = QuotientAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__34]:
                self.state = 320
                self.match(SetlXgrammarParser.T__34)
                self.state = 321
                localctx.e = self.expr(False)
                localctx.assign = IntegerDivisionAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            elif token in [SetlXgrammarParser.T__35]:
                self.state = 324
                self.match(SetlXgrammarParser.T__35)
                self.state = 325
                localctx.e = self.expr(False)
                localctx.assign = ModuloAssignment(localctx._assignable.a, localctx.e.ex) 
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetlxmatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None
            self.c1 = None # ConditionContext
            self.b1 = None # BlockContext
            self.b4 = None # BlockContext

        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprListContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,i)


        def regexBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.RegexBranchContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.RegexBranchContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.BlockContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,i)


        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ConditionContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_setlxmatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetlxmatch" ):
                listener.enterSetlxmatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetlxmatch" ):
                listener.exitSetlxmatch(self)




    def setlxmatch(self):

        localctx = SetlXgrammarParser.SetlxmatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_setlxmatch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(SetlXgrammarParser.T__36)
            self.state = 331
            self.match(SetlXgrammarParser.T__1)
            self.state = 332
            self.expr(False)
            self.state = 333
            self.match(SetlXgrammarParser.T__2)
            self.state = 334
            self.match(SetlXgrammarParser.T__3)
            self.state = 345 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__9]:
                    self.state = 335
                    self.match(SetlXgrammarParser.T__9)
                    self.state = 336
                    self.exprList(True)
                    self.state = 339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SetlXgrammarParser.T__13:
                        self.state = 337
                        self.match(SetlXgrammarParser.T__13)
                        self.state = 338
                        localctx.c1 = self.condition()


                    self.state = 341
                    self.match(SetlXgrammarParser.T__10)
                    self.state = 342
                    localctx.b1 = self.block()
                    pass
                elif token in [SetlXgrammarParser.T__39]:
                    self.state = 344
                    self.regexBranch()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 347 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SetlXgrammarParser.T__9 or _la==SetlXgrammarParser.T__39):
                    break

            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__11:
                self.state = 349
                self.match(SetlXgrammarParser.T__11)
                self.state = 350
                self.match(SetlXgrammarParser.T__10)
                self.state = 351
                localctx.b4 = self.block()



            self.state = 356
            self.match(SetlXgrammarParser.T__5)
            localctx.m = Match()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s = None

        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def regexBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.RegexBranchContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.RegexBranchContext,i)


        def block(self):
            return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_scan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScan" ):
                listener.enterScan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScan" ):
                listener.exitScan(self)




    def scan(self):

        localctx = SetlXgrammarParser.ScanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_scan)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(SetlXgrammarParser.T__37)
            self.state = 360
            self.match(SetlXgrammarParser.T__1)
            self.state = 361
            self.expr(False)
            self.state = 362
            self.match(SetlXgrammarParser.T__2)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__38:
                self.state = 363
                self.match(SetlXgrammarParser.T__38)
                self.state = 364
                self.assignableVariable()


            self.state = 367
            self.match(SetlXgrammarParser.T__3)
            self.state = 369 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 368
                self.regexBranch()
                self.state = 371 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SetlXgrammarParser.T__39):
                    break

            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__11:
                self.state = 373
                self.match(SetlXgrammarParser.T__11)
                self.state = 374
                self.match(SetlXgrammarParser.T__10)
                self.state = 375
                self.block()


            self.state = 378
            self.match(SetlXgrammarParser.T__5)
            localctx.s = Scan()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RegexBranchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rb = None

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,i)


        def block(self):
            return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,0)


        def condition(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_regexBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexBranch" ):
                listener.enterRegexBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexBranch" ):
                listener.exitRegexBranch(self)




    def regexBranch(self):

        localctx = SetlXgrammarParser.RegexBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_regexBranch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(SetlXgrammarParser.T__39)
            self.state = 382
            self.expr(False)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__40:
                self.state = 383
                self.match(SetlXgrammarParser.T__40)
                self.state = 384
                self.expr(True)


            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__13:
                self.state = 387
                self.match(SetlXgrammarParser.T__13)
                self.state = 388
                self.condition()


            self.state = 391
            self.match(SetlXgrammarParser.T__10)
            self.state = 392
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None
            self._ID = None # Token
            self._procedure = None # ProcedureContext
            self._assignmentDirect = None # AssignmentDirectContext

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def procedure(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureContext,0)


        def assignmentDirect(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentDirectContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = SetlXgrammarParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_assignment)
        try:
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                localctx._ID = self.match(SetlXgrammarParser.ID)
                self.state = 395
                self.match(SetlXgrammarParser.T__41)
                self.state = 396
                localctx._procedure = self.procedure((None if localctx._ID is None else localctx._ID.text))
                localctx.assign = localctx._procedure.pd 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                localctx._assignmentDirect = self.assignmentDirect()
                localctx.assign = localctx._assignmentDirect.assign 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentDirectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None
            self._assignable = None # AssignableContext
            self._assignmentDirect = None # AssignmentDirectContext
            self._exprContent = None # ExprContentContext

        def assignable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,0)


        def assignmentDirect(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentDirectContext,0)


        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignmentDirect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentDirect" ):
                listener.enterAssignmentDirect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentDirect" ):
                listener.exitAssignmentDirect(self)




    def assignmentDirect(self):

        localctx = SetlXgrammarParser.AssignmentDirectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assignmentDirect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            localctx._assignable = self.assignable(False)
            self.state = 405
            self.match(SetlXgrammarParser.T__41)
            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 406
                localctx._assignmentDirect = self.assignmentDirect()
                localctx.assign = Assignment([localctx._assignable.a]+localctx._assignmentDirect.assign.assignables, localctx._assignmentDirect.assign.right_hand_side) 
                pass

            elif la_ == 2:
                self.state = 409
                localctx._exprContent = self.exprContent(False)
                localctx.assign = Assignment([localctx._assignable.a], localctx._exprContent.ex) 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.a = None
            self._assignableVariable = None # AssignableVariableContext
            self._variable = None # VariableContext
            self._exprList = None # ExprListContext
            self._assignmentList = None # AssignmentListContext
            self.enableIgnore = enableIgnore

        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,i)


        def exprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprListContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,i)


        def assignmentList(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)




    def assignable(self, enableIgnore):

        localctx = SetlXgrammarParser.AssignableContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 16, self.RULE_assignable)
        self._la = 0 # Token type
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                localctx._assignableVariable = self.assignableVariable()
                localctx.a = localctx._assignableVariable.v
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SetlXgrammarParser.T__42 or _la==SetlXgrammarParser.T__43:
                    self.state = 425
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SetlXgrammarParser.T__42]:
                        self.state = 416
                        self.match(SetlXgrammarParser.T__42)
                        self.state = 417
                        localctx._variable = self.variable()
                        localctx.a = AssignableMember(localctx.a, localctx._variable.v)
                        pass
                    elif token in [SetlXgrammarParser.T__43]:
                        self.state = 420
                        self.match(SetlXgrammarParser.T__43)
                        self.state = 421
                        localctx._exprList = self.exprList(False)
                        self.state = 422
                        self.match(SetlXgrammarParser.T__44)
                        localctx.a = AssignableCollectionAccess(localctx.a, localctx._exprList.exprs)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.match(SetlXgrammarParser.T__43)
                self.state = 431
                localctx._assignmentList = self.assignmentList()
                self.state = 432
                self.match(SetlXgrammarParser.T__44)
                localctx.a = AssignableList(localctx._assignmentList.al)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                if not localctx.enableIgnore:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$enableIgnore")
                self.state = 436
                self.match(SetlXgrammarParser.T__45)
                localctx.a = AssignableIgnore()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignableVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.v = None
            self._ID = None # Token

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignableVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableVariable" ):
                listener.enterAssignableVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableVariable" ):
                listener.exitAssignableVariable(self)




    def assignableVariable(self):

        localctx = SetlXgrammarParser.AssignableVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_assignableVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            localctx._ID = self.match(SetlXgrammarParser.ID)
            localctx.v = AssignableVariable((None if localctx._ID is None else localctx._ID.text)) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.ex = None
            self._exprContent = None # ExprContentContext
            self.enableIgnore = enableIgnore

        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self, enableIgnore):

        localctx = SetlXgrammarParser.ExprContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 20, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            localctx._exprContent = self.exprContent(localctx.enableIgnore)
            localctx.ex = localctx._exprContent.ex 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.exprs = None
            self._exprContent = None # ExprContentContext
            self.enableIgnore = enableIgnore

        def exprContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContentContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)




    def exprList(self, enableIgnore):

        localctx = SetlXgrammarParser.ExprListContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 22, self.RULE_exprList)

        localctx.exprs = []
            
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            localctx._exprContent = self.exprContent(localctx.enableIgnore)
            localctx.exprs.append(localctx._exprContent.ex)
            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 448
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 449
                    localctx._exprContent = self.exprContent(localctx.enableIgnore)
                    localctx.exprs.append(localctx._exprContent.ex) 
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.ex = None
            self._lambdaProcedure = None # LambdaProcedureContext
            self._implication = None # ImplicationContext
            self.enableIgnore = enableIgnore

        def lambdaProcedure(self):
            return self.getTypedRuleContext(SetlXgrammarParser.LambdaProcedureContext,0)


        def implication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ImplicationContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ImplicationContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_exprContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprContent" ):
                listener.enterExprContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprContent" ):
                listener.exitExprContent(self)




    def exprContent(self, enableIgnore):

        localctx = SetlXgrammarParser.ExprContentContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 24, self.RULE_exprContent)
        try:
            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                localctx._lambdaProcedure = self.lambdaProcedure()
                localctx.ex = localctx._lambdaProcedure.lp 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                localctx._implication = self.implication(localctx.enableIgnore)
                localctx.ex = localctx._implication.i
                self.state = 470
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__46]:
                    self.state = 462
                    self.match(SetlXgrammarParser.T__46)
                    self.state = 463
                    localctx._implication = self.implication(localctx.enableIgnore)
                    localctx.ex = BooleanEqual(localctx.ex,localctx._implication.i) 
                    pass
                elif token in [SetlXgrammarParser.T__47]:
                    self.state = 466
                    self.match(SetlXgrammarParser.T__47)
                    self.state = 467
                    localctx._implication = self.implication(localctx.enableIgnore)
                    localctx.ex = BooleanNotEqual(localctx.ex,localctx._implication.i) 
                    pass
                elif token in [SetlXgrammarParser.T__2, SetlXgrammarParser.T__5, SetlXgrammarParser.T__10, SetlXgrammarParser.T__13, SetlXgrammarParser.T__16, SetlXgrammarParser.T__29, SetlXgrammarParser.T__40, SetlXgrammarParser.T__44, SetlXgrammarParser.RANGE_SIGN]:
                    pass
                else:
                    pass
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lp = None
            self._lambdaParameters = None # LambdaParametersContext
            self._expr = None # ExprContext

        def lambdaParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.LambdaParametersContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_lambdaProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaProcedure" ):
                listener.enterLambdaProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaProcedure" ):
                listener.exitLambdaProcedure(self)




    def lambdaProcedure(self):

        localctx = SetlXgrammarParser.LambdaProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_lambdaProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            localctx._lambdaParameters = self.lambdaParameters()
            self.state = 483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__48]:
                self.state = 475
                self.match(SetlXgrammarParser.T__48)
                self.state = 476
                localctx._expr = self.expr(False)
                localctx.lp = LambdaProcedure(localctx._lambdaParameters.paramList, localctx._expr.ex)
                pass
            elif token in [SetlXgrammarParser.T__49]:
                self.state = 479
                self.match(SetlXgrammarParser.T__49)
                self.state = 480
                localctx._expr = self.expr(False)
                localctx.lp = LambdaClosure(localctx._lambdaParameters.paramList, localctx._expr.ex)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.paramList = None
            self._variable = None # VariableContext
            self.v1 = None # VariableContext
            self.v2 = None # VariableContext

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = SetlXgrammarParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdaParameters)

        localctx.paramList = []
            
        self._la = 0 # Token type
        try:
            self.state = 503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                localctx._variable = self.variable()
                localctx.paramList.append(Parameter(localctx._variable.v, None, False)) 
                pass
            elif token in [SetlXgrammarParser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.match(SetlXgrammarParser.T__43)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.ID:
                    self.state = 489
                    localctx.v1 = self.variable()
                    localctx.paramList.append(Parameter(localctx.v1.v, None, False))
                    self.state = 497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SetlXgrammarParser.T__29:
                        self.state = 491
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 492
                        localctx.v2 = self.variable()
                        localctx.paramList.append(Parameter(localctx.v2.v, None, False))
                        self.state = 499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 502
                self.match(SetlXgrammarParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.i = None
            self._disjunction = None # DisjunctionContext
            self._implication = None # ImplicationContext
            self.enableIgnore = enableIgnore

        def disjunction(self):
            return self.getTypedRuleContext(SetlXgrammarParser.DisjunctionContext,0)


        def implication(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ImplicationContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_implication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplication" ):
                listener.enterImplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplication" ):
                listener.exitImplication(self)




    def implication(self, enableIgnore):

        localctx = SetlXgrammarParser.ImplicationContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 30, self.RULE_implication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            localctx._disjunction = self.disjunction(localctx.enableIgnore)
            localctx.i = localctx._disjunction.d
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SetlXgrammarParser.T__50:
                self.state = 507
                self.match(SetlXgrammarParser.T__50)
                self.state = 508
                localctx._implication = self.implication(localctx.enableIgnore)
                localctx.i = Implication(localctx.i, localctx._implication.i) 


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.d = None
            self._conjunction = None # ConjunctionContext
            self.enableIgnore = enableIgnore

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ConjunctionContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self, enableIgnore):

        localctx = SetlXgrammarParser.DisjunctionContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 32, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            localctx._conjunction = self.conjunction(localctx.enableIgnore)
            localctx.d = localctx._conjunction.c
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__51:
                self.state = 515
                self.match(SetlXgrammarParser.T__51)
                self.state = 516
                localctx._conjunction = self.conjunction(localctx.enableIgnore)
                localctx.d = Disjunction(localctx.d, localctx._conjunction.c) 
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.c = None
            self._comparison = None # ComparisonContext
            self.enableIgnore = enableIgnore

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ComparisonContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self, enableIgnore):

        localctx = SetlXgrammarParser.ConjunctionContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 34, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            localctx._comparison = self.comparison(localctx.enableIgnore)
            localctx.c = localctx._comparison.c
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__52:
                self.state = 526
                self.match(SetlXgrammarParser.T__52)
                self.state = 527
                localctx._comparison = self.comparison(localctx.enableIgnore)
                localctx.c = Conjunction(localctx.c, localctx._comparison.c) 
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.c = None
            self.s1 = None # SetlxSumContext
            self.s2 = None # SetlxSumContext
            self.enableIgnore = enableIgnore

        def setlxSum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.SetlxSumContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.SetlxSumContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self, enableIgnore):

        localctx = SetlXgrammarParser.ComparisonContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 36, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            localctx.s1 = self.setlxSum(localctx.enableIgnore)
            localctx.c = localctx.s1.s 
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__53]:
                self.state = 537
                self.match(SetlXgrammarParser.T__53)
                self.state = 538
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = Equal(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__54]:
                self.state = 541
                self.match(SetlXgrammarParser.T__54)
                self.state = 542
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = NotEqual(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__55]:
                self.state = 545
                self.match(SetlXgrammarParser.T__55)
                self.state = 546
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = LessThan(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__56]:
                self.state = 549
                self.match(SetlXgrammarParser.T__56)
                self.state = 550
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = LessOrEqual(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__57]:
                self.state = 553
                self.match(SetlXgrammarParser.T__57)
                self.state = 554
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = GreaterThan(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__58]:
                self.state = 557
                self.match(SetlXgrammarParser.T__58)
                self.state = 558
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = GreaterOrEqual(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__59]:
                self.state = 561
                self.match(SetlXgrammarParser.T__59)
                self.state = 562
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = SetlXIn(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__60]:
                self.state = 565
                self.match(SetlXgrammarParser.T__60)
                self.state = 566
                localctx.s2 = self.setlxSum(localctx.enableIgnore)
                localctx.c = NotIn(localctx.s1.s,localctx.s2.s) 
                pass
            elif token in [SetlXgrammarParser.T__2, SetlXgrammarParser.T__5, SetlXgrammarParser.T__10, SetlXgrammarParser.T__13, SetlXgrammarParser.T__16, SetlXgrammarParser.T__29, SetlXgrammarParser.T__40, SetlXgrammarParser.T__44, SetlXgrammarParser.T__46, SetlXgrammarParser.T__47, SetlXgrammarParser.T__50, SetlXgrammarParser.T__51, SetlXgrammarParser.T__52, SetlXgrammarParser.RANGE_SIGN]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetlxSumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.s = None
            self.p1 = None # ProductContext
            self.p2 = None # ProductContext
            self.enableIgnore = enableIgnore

        def product(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ProductContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ProductContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_setlxSum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetlxSum" ):
                listener.enterSetlxSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetlxSum" ):
                listener.exitSetlxSum(self)




    def setlxSum(self, enableIgnore):

        localctx = SetlXgrammarParser.SetlxSumContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 38, self.RULE_setlxSum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            localctx.p1 = self.product(localctx.enableIgnore)
            localctx.s = localctx.p1.p
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__61 or _la==SetlXgrammarParser.T__62:
                self.state = 581
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__61]:
                    self.state = 573
                    self.match(SetlXgrammarParser.T__61)
                    self.state = 574
                    localctx.p2 = self.product(localctx.enableIgnore)
                    localctx.s = Sum(localctx.s,localctx.p2.p) 
                    pass
                elif token in [SetlXgrammarParser.T__62]:
                    self.state = 577
                    self.match(SetlXgrammarParser.T__62)
                    self.state = 578
                    localctx.p2 = self.product(localctx.enableIgnore)
                    localctx.s = Difference(localctx.s,localctx.p2.p) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.p = None
            self.r1 = None # SetlxReduceContext
            self.r2 = None # SetlxReduceContext
            self.enableIgnore = enableIgnore

        def setlxReduce(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.SetlxReduceContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.SetlxReduceContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct" ):
                listener.enterProduct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct" ):
                listener.exitProduct(self)




    def product(self, enableIgnore):

        localctx = SetlXgrammarParser.ProductContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 40, self.RULE_product)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            localctx.r1 = self.setlxReduce(localctx.enableIgnore)
            localctx.p = localctx.r1.r
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SetlXgrammarParser.T__63 - 64)) | (1 << (SetlXgrammarParser.T__64 - 64)) | (1 << (SetlXgrammarParser.T__65 - 64)) | (1 << (SetlXgrammarParser.T__66 - 64)) | (1 << (SetlXgrammarParser.T__67 - 64)))) != 0):
                self.state = 608
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__63]:
                    self.state = 588
                    self.match(SetlXgrammarParser.T__63)
                    self.state = 589
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = Product(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__64]:
                    self.state = 592
                    self.match(SetlXgrammarParser.T__64)
                    self.state = 593
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = Quotient(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__65]:
                    self.state = 596
                    self.match(SetlXgrammarParser.T__65)
                    self.state = 597
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = IntegerDivision(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__66]:
                    self.state = 600
                    self.match(SetlXgrammarParser.T__66)
                    self.state = 601
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = Modulo(localctx.p,localctx.r2.r) 
                    pass
                elif token in [SetlXgrammarParser.T__67]:
                    self.state = 604
                    self.match(SetlXgrammarParser.T__67)
                    self.state = 605
                    localctx.r2 = self.setlxReduce(localctx.enableIgnore)
                    localctx.p = CartesianProduct(localctx.p,localctx.r2.r) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetlxReduceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.r = None
            self.p1 = None # PrefixOperationContext
            self.p2 = None # PrefixOperationContext
            self.enableIgnore = enableIgnore

        def prefixOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.PrefixOperationContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.PrefixOperationContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_setlxReduce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetlxReduce" ):
                listener.enterSetlxReduce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetlxReduce" ):
                listener.exitSetlxReduce(self)




    def setlxReduce(self, enableIgnore):

        localctx = SetlXgrammarParser.SetlxReduceContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 42, self.RULE_setlxReduce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            localctx.p1 = self.prefixOperation(localctx.enableIgnore)
            localctx.r = localctx.p1.p
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__68 or _la==SetlXgrammarParser.T__69:
                self.state = 623
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__68]:
                    self.state = 615
                    self.match(SetlXgrammarParser.T__68)
                    self.state = 616
                    localctx.p2 = self.prefixOperation(localctx.enableIgnore)
                    localctx.r = SumOfMembersBinary(localctx.r,localctx.p2.p) 
                    pass
                elif token in [SetlXgrammarParser.T__69]:
                    self.state = 619
                    self.match(SetlXgrammarParser.T__69)
                    self.state = 620
                    localctx.p2 = self.prefixOperation(localctx.enableIgnore)
                    localctx.r = ProductOfMembersBinary(localctx.r,localctx.p2.p) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.p = None
            self._factor = None # FactorContext
            self._prefixOperation = None # PrefixOperationContext
            self.enableIgnore = enableIgnore

        def factor(self):
            return self.getTypedRuleContext(SetlXgrammarParser.FactorContext,0)


        def prefixOperation(self):
            return self.getTypedRuleContext(SetlXgrammarParser.PrefixOperationContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_prefixOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperation" ):
                listener.enterPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperation" ):
                listener.exitPrefixOperation(self)




    def prefixOperation(self, enableIgnore):

        localctx = SetlXgrammarParser.PrefixOperationContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 44, self.RULE_prefixOperation)
        self._la = 0 # Token type
        try:
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                localctx._factor = self.factor(localctx.enableIgnore)
                localctx.p = localctx._factor.f
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__70:
                    self.state = 630
                    self.match(SetlXgrammarParser.T__70)
                    self.state = 631
                    localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                    localctx.p = Power(localctx.p,localctx._prefixOperation.p) 


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.match(SetlXgrammarParser.T__68)
                self.state = 637
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = SumOfMembers(localctx._prefixOperation.p) 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 640
                self.match(SetlXgrammarParser.T__69)
                self.state = 641
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = ProductOfMembers(localctx._prefixOperation.p) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 644
                self.match(SetlXgrammarParser.T__71)
                self.state = 645
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = Cardinality(localctx._prefixOperation.p) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 648
                self.match(SetlXgrammarParser.T__62)
                self.state = 649
                localctx._prefixOperation = self.prefixOperation(localctx.enableIgnore)
                localctx.p = Minus(localctx._prefixOperation.p)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.f = None
            self._factor = None # FactorContext
            self._iteratorChain = None # IteratorChainContext
            self._condition = None # ConditionContext
            self._exprContent = None # ExprContentContext
            self._procedure = None # ProcedureContext
            self._variable = None # VariableContext
            self._call = None # CallContext
            self._value = None # ValueContext
            self.enableIgnore = enableIgnore

        def factor(self):
            return self.getTypedRuleContext(SetlXgrammarParser.FactorContext,0)


        def TERM(self):
            return self.getToken(SetlXgrammarParser.TERM, 0)

        def termArguments(self):
            return self.getTypedRuleContext(SetlXgrammarParser.TermArgumentsContext,0)


        def iteratorChain(self):
            return self.getTypedRuleContext(SetlXgrammarParser.IteratorChainContext,0)


        def condition(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,0)


        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def procedure(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VariableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,i)


        def call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.CallContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.CallContext,i)


        def value(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ValueContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self, enableIgnore):

        localctx = SetlXgrammarParser.FactorContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 46, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.match(SetlXgrammarParser.T__72)
                self.state = 655
                localctx._factor = self.factor(localctx.enableIgnore)
                localctx.f = SetlXNot(localctx._factor.f) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.match(SetlXgrammarParser.TERM)
                self.state = 659
                self.match(SetlXgrammarParser.T__1)
                self.state = 660
                self.termArguments()
                self.state = 661
                self.match(SetlXgrammarParser.T__2)
                localctx.f = Term()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 664
                self.match(SetlXgrammarParser.T__73)
                self.state = 665
                self.match(SetlXgrammarParser.T__1)
                self.state = 666
                localctx._iteratorChain = self.iteratorChain(localctx.enableIgnore)
                self.state = 667
                self.match(SetlXgrammarParser.T__13)
                self.state = 668
                localctx._condition = self.condition()
                self.state = 669
                self.match(SetlXgrammarParser.T__2)
                localctx.f = Forall(localctx._iteratorChain.ic,localctx._condition.cnd)
                		
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 672
                self.match(SetlXgrammarParser.T__74)
                self.state = 673
                self.match(SetlXgrammarParser.T__1)
                self.state = 674
                localctx._iteratorChain = self.iteratorChain(localctx.enableIgnore)
                self.state = 675
                self.match(SetlXgrammarParser.T__13)
                self.state = 676
                localctx._condition = self.condition()
                self.state = 677
                self.match(SetlXgrammarParser.T__2)
                localctx.f = Exists(localctx._iteratorChain.ic,localctx._condition.cnd)
                		
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 691
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__1]:
                    self.state = 680
                    self.match(SetlXgrammarParser.T__1)
                    self.state = 681
                    localctx._exprContent = self.exprContent(localctx.enableIgnore)
                    self.state = 682
                    self.match(SetlXgrammarParser.T__2)
                    localctx.f = localctx._exprContent.ex 
                    pass
                elif token in [SetlXgrammarParser.T__75, SetlXgrammarParser.T__76, SetlXgrammarParser.T__77]:
                    self.state = 685
                    localctx._procedure = self.procedure(None)
                    localctx.f = localctx._procedure.pd 
                    pass
                elif token in [SetlXgrammarParser.ID]:
                    self.state = 688
                    localctx._variable = self.variable()
                    localctx.f = localctx._variable.v 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SetlXgrammarParser.T__1) | (1 << SetlXgrammarParser.T__3) | (1 << SetlXgrammarParser.T__42) | (1 << SetlXgrammarParser.T__43))) != 0):
                    self.state = 700
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SetlXgrammarParser.T__42]:
                        self.state = 693
                        self.match(SetlXgrammarParser.T__42)
                        self.state = 694
                        localctx._variable = self.variable()
                        localctx.f = MemberAccess(localctx.f,localctx._variable.v) 
                        pass
                    elif token in [SetlXgrammarParser.T__1, SetlXgrammarParser.T__3, SetlXgrammarParser.T__43]:
                        self.state = 697
                        localctx._call = self.call(localctx.enableIgnore,localctx.f)
                        localctx.f = localctx._call.c 
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__72:
                    self.state = 705
                    self.match(SetlXgrammarParser.T__72)
                    localctx.f = Factorial(localctx.f) 


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 709
                localctx._value = self.value(localctx.enableIgnore)
                localctx.f = localctx._value.v 
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__72:
                    self.state = 711
                    self.match(SetlXgrammarParser.T__72)
                    localctx.f = Factorial(localctx._value.v) 


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None

        def exprList(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_termArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermArguments" ):
                listener.enterTermArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermArguments" ):
                listener.exitTermArguments(self)




    def termArguments(self):

        localctx = SetlXgrammarParser.TermArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_termArguments)
        try:
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.exprList(True)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, name=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None
            self.pd = None
            self._procedureParameters = None # ProcedureParametersContext
            self._block = None # BlockContext
            self.name = name

        def procedureParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(SetlXgrammarParser.BlockContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure" ):
                listener.enterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure" ):
                listener.exitProcedure(self)




    def procedure(self, name):

        localctx = SetlXgrammarParser.ProcedureContext(self, self._ctx, self.state, name)
        self.enterRule(localctx, 50, self.RULE_procedure)
        try:
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.match(SetlXgrammarParser.T__75)
                self.state = 722
                self.match(SetlXgrammarParser.T__1)
                self.state = 723
                localctx._procedureParameters = self.procedureParameters(True)
                self.state = 724
                self.match(SetlXgrammarParser.T__2)
                self.state = 725
                self.match(SetlXgrammarParser.T__3)
                self.state = 726
                localctx._block = self.block()
                self.state = 727
                self.match(SetlXgrammarParser.T__5)
                localctx.pd = Procedure(localctx._procedureParameters.paramList, localctx._block.blk,localctx.name,None) 
                		
                pass
            elif token in [SetlXgrammarParser.T__76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.match(SetlXgrammarParser.T__76)
                self.state = 731
                self.match(SetlXgrammarParser.T__1)
                self.state = 732
                localctx._procedureParameters = self.procedureParameters(False)
                self.state = 733
                self.match(SetlXgrammarParser.T__2)
                self.state = 734
                self.match(SetlXgrammarParser.T__3)
                self.state = 735
                localctx._block = self.block()
                self.state = 736
                self.match(SetlXgrammarParser.T__5)
                localctx.pd = CachedProcedure(localctx._procedureParameters.paramList, localctx._block.blk,localctx.name) 
                		
                pass
            elif token in [SetlXgrammarParser.T__77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.match(SetlXgrammarParser.T__77)
                self.state = 740
                self.match(SetlXgrammarParser.T__1)
                self.state = 741
                localctx._procedureParameters = self.procedureParameters(True)
                self.state = 742
                self.match(SetlXgrammarParser.T__2)
                self.state = 743
                self.match(SetlXgrammarParser.T__3)
                self.state = 744
                localctx._block = self.block()
                self.state = 745
                self.match(SetlXgrammarParser.T__5)
                localctx.pd = Closure(localctx._procedureParameters.paramList, localctx._block.blk) 
                		
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableRw=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableRw = None
            self.paramList = None
            self.pp1 = None # ProcedureParameterContext
            self.pp2 = None # ProcedureParameterContext
            self.dp1 = None # ProcedureDefaultParameterContext
            self.lp1 = None # ProcedureListParameterContext
            self.dp2 = None # ProcedureDefaultParameterContext
            self.dp3 = None # ProcedureDefaultParameterContext
            self.lp2 = None # ProcedureListParameterContext
            self.lp3 = None # ProcedureListParameterContext
            self.enableRw = enableRw

        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ProcedureParameterContext,i)


        def procedureDefaultParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ProcedureDefaultParameterContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ProcedureDefaultParameterContext,i)


        def procedureListParameter(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ProcedureListParameterContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameters" ):
                listener.enterProcedureParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameters" ):
                listener.exitProcedureParameters(self)




    def procedureParameters(self, enableRw):

        localctx = SetlXgrammarParser.ProcedureParametersContext(self, self._ctx, self.state, enableRw)
        self.enterRule(localctx, 52, self.RULE_procedureParameters)

        localctx.paramList = []
            
        self._la = 0 # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                localctx.pp1 = self.procedureParameter(localctx.enableRw)
                localctx.paramList.append(localctx.pp1.param) 
                self.state = 758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 752
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 753
                        localctx.pp2 = self.procedureParameter(localctx.enableRw)
                        localctx.paramList.append(localctx.pp2.param)  
                    self.state = 760
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                self.state = 767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 761
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 762
                        localctx.dp1 = self.procedureDefaultParameter()
                        localctx.paramList.append(localctx.dp1.param)  
                    self.state = 769
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__29:
                    self.state = 770
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 771
                    localctx.lp1 = self.procedureListParameter()
                    localctx.paramList.append(localctx.lp1.param) 


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                localctx.dp2 = self.procedureDefaultParameter()
                localctx.paramList.append(localctx.dp2.param) 
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 778
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 779
                        localctx.dp3 = self.procedureDefaultParameter()
                        localctx.paramList.append(localctx.dp3.param)  
                    self.state = 786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__29:
                    self.state = 787
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 788
                    localctx.lp2 = self.procedureListParameter()
                    localctx.paramList.append(localctx.lp2.param) 


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 793
                localctx.lp3 = self.procedureListParameter()
                localctx.paramList.append(localctx.lp3.param) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableRw=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableRw = None
            self.param = None
            self._assignableVariable = None # AssignableVariableContext
            self._variable = None # VariableContext
            self.enableRw = enableRw

        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def variable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self, enableRw):

        localctx = SetlXgrammarParser.ProcedureParameterContext(self, self._ctx, self.state, enableRw)
        self.enterRule(localctx, 54, self.RULE_procedureParameter)
        try:
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                if not localctx.enableRw:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$enableRw")
                self.state = 800
                self.match(SetlXgrammarParser.T__78)
                self.state = 801
                localctx._assignableVariable = self.assignableVariable()
                localctx.param = ReadWriteParameter(localctx._assignableVariable.v) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                localctx._variable = self.variable()
                localctx.param = Parameter(localctx._variable.v, None, False) 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDefaultParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None
            self._assignableVariable = None # AssignableVariableContext
            self._expr = None # ExprContext

        def assignableVariable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableVariableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureDefaultParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDefaultParameter" ):
                listener.enterProcedureDefaultParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDefaultParameter" ):
                listener.exitProcedureDefaultParameter(self)




    def procedureDefaultParameter(self):

        localctx = SetlXgrammarParser.ProcedureDefaultParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_procedureDefaultParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            localctx._assignableVariable = self.assignableVariable()
            self.state = 810
            self.match(SetlXgrammarParser.T__41)
            self.state = 811
            localctx._expr = self.expr(False)
            localctx.param = Parameter(localctx._assignableVariable.v, localctx._expr.ex, False) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureListParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None
            self._variable = None # VariableContext

        def variable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.VariableContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_procedureListParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureListParameter" ):
                listener.enterProcedureListParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureListParameter" ):
                listener.exitProcedureListParameter(self)




    def procedureListParameter(self):

        localctx = SetlXgrammarParser.ProcedureListParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_procedureListParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(SetlXgrammarParser.T__63)
            self.state = 815
            localctx._variable = self.variable()
            localctx.param = ListParameter(localctx._variable.v) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None, callable=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.callable = None
            self.c = None
            self._callParameters = None # CallParametersContext
            self._collectionAccessParams = None # CollectionAccessParamsContext
            self._expr = None # ExprContext
            self.enableIgnore = enableIgnore
            self.callable = callable

        def callParameters(self):
            return self.getTypedRuleContext(SetlXgrammarParser.CallParametersContext,0)


        def collectionAccessParams(self):
            return self.getTypedRuleContext(SetlXgrammarParser.CollectionAccessParamsContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)




    def call(self, enableIgnore, callable):

        localctx = SetlXgrammarParser.CallContext(self, self._ctx, self.state, enableIgnore, callable)
        self.enterRule(localctx, 60, self.RULE_call)
        try:
            self.state = 833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.match(SetlXgrammarParser.T__1)
                self.state = 819
                localctx._callParameters = self.callParameters(localctx.enableIgnore)
                self.state = 820
                self.match(SetlXgrammarParser.T__2)
                localctx.c = FunctionCall(localctx._callParameters.params,localctx.callable) 
                		
                pass
            elif token in [SetlXgrammarParser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(SetlXgrammarParser.T__43)
                self.state = 824
                localctx._collectionAccessParams = self.collectionAccessParams(localctx.enableIgnore)
                self.state = 825
                self.match(SetlXgrammarParser.T__44)
                localctx.c = CollectionAccess(localctx._collectionAccessParams.p,localctx.callable) 
                pass
            elif token in [SetlXgrammarParser.T__3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.match(SetlXgrammarParser.T__3)
                self.state = 829
                localctx._expr = self.expr(localctx.enableIgnore)
                self.state = 830
                self.match(SetlXgrammarParser.T__5)
                localctx.c = CollectMap(localctx._expr.ex,localctx.callable) 
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionAccessParamsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.p = None
            self.e1 = None # ExprContext
            self.e2 = None # ExprContext
            self.e3 = None # ExprContext
            self._expr = None # ExprContext
            self.enableIgnore = enableIgnore

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,i)


        def RANGE_SIGN(self):
            return self.getToken(SetlXgrammarParser.RANGE_SIGN, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_collectionAccessParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionAccessParams" ):
                listener.enterCollectionAccessParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionAccessParams" ):
                listener.exitCollectionAccessParams(self)




    def collectionAccessParams(self, enableIgnore):

        localctx = SetlXgrammarParser.CollectionAccessParamsContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 62, self.RULE_collectionAccessParams)

        params = []
            
        self._la = 0 # Token type
        try:
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                localctx.e1 = self.expr(localctx.enableIgnore)
                self.state = 854
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.RANGE_SIGN]:
                    self.state = 836
                    self.match(SetlXgrammarParser.RANGE_SIGN)
                    self.state = 841
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        self.state = 837
                        localctx.e2 = self.expr(localctx.enableIgnore)
                        localctx.p = ListRange(localctx.e1.ex,localctx.e2.ex) 
                        pass

                    elif la_ == 2:
                        localctx.p = ListRange(localctx.e1.ex,None) 
                        pass


                    pass
                elif token in [SetlXgrammarParser.T__29]:
                    self.state = 847 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 843
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 844
                        localctx.e3 = self.expr(False)
                        params.append(localctx.e3.ex) 
                        self.state = 849 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SetlXgrammarParser.T__29):
                            break

                    localctx.p = params 
                    pass
                elif token in [SetlXgrammarParser.T__44]:
                    localctx.p = localctx.e1.ex 
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(SetlXgrammarParser.RANGE_SIGN)
                self.state = 857
                localctx._expr = self.expr(localctx.enableIgnore)
                localctx.p = ListRange(None,localctx._expr.ex) 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.params = None
            self._exprList = None # ExprListContext
            self._exprContent = None # ExprContentContext
            self.enableIgnore = enableIgnore

        def exprList(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprListContext,0)


        def exprContent(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContentContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_callParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallParameters" ):
                listener.enterCallParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallParameters" ):
                listener.exitCallParameters(self)




    def callParameters(self, enableIgnore):

        localctx = SetlXgrammarParser.CallParametersContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 64, self.RULE_callParameters)

        localctx.params = []
            
        self._la = 0 # Token type
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                localctx._exprList = self.exprList(localctx.enableIgnore)
                localctx.params = localctx._exprList.exprs
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__29:
                    self.state = 864
                    self.match(SetlXgrammarParser.T__29)
                    self.state = 865
                    self.match(SetlXgrammarParser.T__63)
                    self.state = 866
                    localctx._exprContent = self.exprContent(False)
                    localctx.params.append(OperatorExpression(localctx._exprContent.ex))


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.match(SetlXgrammarParser.T__63)
                self.state = 872
                localctx._exprContent = self.exprContent(False)
                localctx.params = [OperatorExpression(localctx._exprContent.ex)]
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.v = None
            self._collectionBuilder = None # CollectionBuilderContext
            self._STRING = None # Token
            self._LITERAL = None # Token
            self._matrix = None # MatrixContext
            self._vector = None # VectorContext
            self._atomicValue = None # AtomicValueContext
            self.enableIgnore = enableIgnore

        def collectionBuilder(self):
            return self.getTypedRuleContext(SetlXgrammarParser.CollectionBuilderContext,0)


        def STRING(self):
            return self.getToken(SetlXgrammarParser.STRING, 0)

        def LITERAL(self):
            return self.getToken(SetlXgrammarParser.LITERAL, 0)

        def matrix(self):
            return self.getTypedRuleContext(SetlXgrammarParser.MatrixContext,0)


        def vector(self):
            return self.getTypedRuleContext(SetlXgrammarParser.VectorContext,0)


        def atomicValue(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AtomicValueContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self, enableIgnore):

        localctx = SetlXgrammarParser.ValueContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 66, self.RULE_value)

        cb = None
            
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(SetlXgrammarParser.T__43)
                self.state = 882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 879
                    localctx._collectionBuilder = self.collectionBuilder(localctx.enableIgnore)
                    cb = localctx._collectionBuilder.cb; 


                self.state = 884
                self.match(SetlXgrammarParser.T__44)
                localctx.v = SetlXList(cb) 
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(SetlXgrammarParser.T__3)
                self.state = 890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 887
                    localctx._collectionBuilder = self.collectionBuilder(localctx.enableIgnore)
                    cb = localctx._collectionBuilder.cb; 


                self.state = 892
                self.match(SetlXgrammarParser.T__5)
                localctx.v = SetListConstructor(cb) 
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                localctx._STRING = self.match(SetlXgrammarParser.STRING)
                localctx.v = SetlXString((None if localctx._STRING is None else localctx._STRING.text)) 
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                localctx._LITERAL = self.match(SetlXgrammarParser.LITERAL)
                localctx.v = SetlXLiteral((None if localctx._LITERAL is None else localctx._LITERAL.text)) 
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 898
                localctx._matrix = self.matrix()
                localctx.v = localctx._matrix.m
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 901
                localctx._vector = self.vector()
                localctx.v = localctx._vector.v
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 904
                localctx._atomicValue = self.atomicValue()
                localctx.v = localctx._atomicValue.av 
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 907
                if not localctx.enableIgnore:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "$enableIgnore")
                self.state = 908
                self.match(SetlXgrammarParser.T__45)
                localctx.v = VariableIgnore() 
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionBuilderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.cb = None
            self.e1 = None # ExprContext
            self.e2 = None # ExprContext
            self.e3 = None # ExprContext
            self.e4 = None # ExprContext
            self._iteratorChain = None # IteratorChainContext
            self.c1 = None # ConditionContext
            self.enableIgnore = enableIgnore

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.ExprContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,i)


        def RANGE_SIGN(self):
            return self.getToken(SetlXgrammarParser.RANGE_SIGN, 0)

        def iteratorChain(self):
            return self.getTypedRuleContext(SetlXgrammarParser.IteratorChainContext,0)


        def condition(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ConditionContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_collectionBuilder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionBuilder" ):
                listener.enterCollectionBuilder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionBuilder" ):
                listener.exitCollectionBuilder(self)




    def collectionBuilder(self, enableIgnore):

        localctx = SetlXgrammarParser.CollectionBuilderContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 68, self.RULE_collectionBuilder)

        exprs = []
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            localctx.e1 = self.expr(localctx.enableIgnore)
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.T__29]:
                self.state = 913
                self.match(SetlXgrammarParser.T__29)
                self.state = 914
                localctx.e2 = self.expr(localctx.enableIgnore)
                self.state = 936
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.RANGE_SIGN]:
                    self.state = 915
                    self.match(SetlXgrammarParser.RANGE_SIGN)
                    self.state = 916
                    localctx.e3 = self.expr(localctx.enableIgnore)
                    localctx.cb = Range(localctx.e1.ex, localctx.e2.ex, localctx.e3.ex) 
                    pass
                elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__13, SetlXgrammarParser.T__29, SetlXgrammarParser.T__44]:
                    exprs.append(localctx.e1.ex); exprs.append(localctx.e2.ex) 
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SetlXgrammarParser.T__29:
                        self.state = 920
                        self.match(SetlXgrammarParser.T__29)
                        self.state = 921
                        localctx.e3 = self.expr(localctx.enableIgnore)
                        exprs.append(localctx.e3.ex) 
                        self.state = 928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 934
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SetlXgrammarParser.T__13]:
                        self.state = 929
                        self.match(SetlXgrammarParser.T__13)
                        self.state = 930
                        localctx.e4 = self.expr(False)
                        localctx.cb = ExplicitListWithRest(exprs, localctx.e4.ex) 
                        pass
                    elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__44]:
                        localctx.cb = ExplicitList(exprs)         
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SetlXgrammarParser.RANGE_SIGN]:
                self.state = 938
                self.match(SetlXgrammarParser.RANGE_SIGN)
                self.state = 939
                localctx.e3 = self.expr(localctx.enableIgnore)
                localctx.cb = Range(localctx.e1.ex, None, localctx.e3.ex) 
                pass
            elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__13, SetlXgrammarParser.T__44]:
                exprs.append(localctx.e1.ex) 
                self.state = 948
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__13]:
                    self.state = 943
                    self.match(SetlXgrammarParser.T__13)
                    self.state = 944
                    localctx.e2 = self.expr(False)
                    localctx.cb = ExplicitListWithRest(exprs, localctx.e2.ex) 
                    pass
                elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__44]:
                    localctx.cb = ExplicitList(exprs)         
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SetlXgrammarParser.T__10]:
                self.state = 950
                self.match(SetlXgrammarParser.T__10)
                self.state = 951
                localctx._iteratorChain = self.iteratorChain(localctx.enableIgnore)
                self.state = 957
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__13]:
                    self.state = 952
                    self.match(SetlXgrammarParser.T__13)
                    self.state = 953
                    localctx.c1 = self.condition()
                    localctx.cb = SetlIteration(localctx.e1.ex, localctx._iteratorChain.ic, localctx.c1.cnd) 
                    pass
                elif token in [SetlXgrammarParser.T__5, SetlXgrammarParser.T__44]:
                    localctx.cb = SetlIteration(localctx.e1.ex, localctx._iteratorChain.ic, None) 
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IteratorChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.ic = None
            self.i1 = None # IteratorContext
            self.i2 = None # IteratorContext
            self.enableIgnore = enableIgnore

        def iterator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.IteratorContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.IteratorContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_iteratorChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorChain" ):
                listener.enterIteratorChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorChain" ):
                listener.exitIteratorChain(self)




    def iteratorChain(self, enableIgnore):

        localctx = SetlXgrammarParser.IteratorChainContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 70, self.RULE_iteratorChain)

        localctx.ic = []
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            localctx.i1 = self.iterator(localctx.enableIgnore)
            localctx.ic.append(localctx.i1.iter)
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__29:
                self.state = 963
                self.match(SetlXgrammarParser.T__29)
                self.state = 964
                localctx.i2 = self.iterator(localctx.enableIgnore)
                localctx.ic.append(localctx.i2.iter) 
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IteratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, enableIgnore=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.enableIgnore = None
            self.iter = None
            self._assignable = None # AssignableContext
            self._expr = None # ExprContext
            self.enableIgnore = enableIgnore

        def assignable(self):
            return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,0)


        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)




    def iterator(self, enableIgnore):

        localctx = SetlXgrammarParser.IteratorContext(self, self._ctx, self.state, enableIgnore)
        self.enterRule(localctx, 72, self.RULE_iterator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            localctx._assignable = self.assignable(True)
            self.state = 973
            self.match(SetlXgrammarParser.T__59)
            self.state = 974
            localctx._expr = self.expr(localctx.enableIgnore)
            localctx.iter = SetlIterator(localctx._assignable.a, localctx._expr.ex) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatrixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None
            self._vector = None # VectorContext

        def vector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.VectorContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.VectorContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_matrix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatrix" ):
                listener.enterMatrix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatrix" ):
                listener.exitMatrix(self)




    def matrix(self):

        localctx = SetlXgrammarParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_matrix)
        vectors = []
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(SetlXgrammarParser.T__79)
            self.state = 981 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 978
                localctx._vector = self.vector()
                vectors.append(localctx._vector.v)
                self.state = 983 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SetlXgrammarParser.T__79):
                    break

            self.state = 985
            self.match(SetlXgrammarParser.T__80)
            localctx.m = SetlMatrix(vectors)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.v = None
            self.n1 = None # Token
            self._DOUBLE = None # Token
            self.n2 = None # Token

        def DOUBLE(self, i:int=None):
            if i is None:
                return self.getTokens(SetlXgrammarParser.DOUBLE)
            else:
                return self.getToken(SetlXgrammarParser.DOUBLE, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(SetlXgrammarParser.NUMBER)
            else:
                return self.getToken(SetlXgrammarParser.NUMBER, i)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)




    def vector(self):

        localctx = SetlXgrammarParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vector)

        doubles  = []
        negative = ""
        dbl      = 0.0
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(SetlXgrammarParser.T__79)
            self.state = 1006 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 992
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.T__62]:
                    self.state = 989
                    self.match(SetlXgrammarParser.T__62)
                    negative = "-" 
                    pass
                elif token in [SetlXgrammarParser.NUMBER, SetlXgrammarParser.DOUBLE]:
                    negative = ""  
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 998
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SetlXgrammarParser.NUMBER]:
                    self.state = 994
                    localctx.n1 = self.match(SetlXgrammarParser.NUMBER)
                    dbl = SetlXFraction(negative + (None if localctx.n1 is None else localctx.n1.text))     
                    pass
                elif token in [SetlXgrammarParser.DOUBLE]:
                    self.state = 996
                    localctx._DOUBLE = self.match(SetlXgrammarParser.DOUBLE)
                    dbl = SetlXDouble(negative + (None if localctx._DOUBLE is None else localctx._DOUBLE.text)) 
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SetlXgrammarParser.T__64:
                    self.state = 1000
                    self.match(SetlXgrammarParser.T__64)
                    self.state = 1001
                    localctx.n2 = self.match(SetlXgrammarParser.NUMBER)
                    dbl /= SetlXFraction(negative + (None if localctx.n2 is None else localctx.n2.text)) 


                doubles.append(dbl) 
                self.state = 1008 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (SetlXgrammarParser.T__62 - 63)) | (1 << (SetlXgrammarParser.NUMBER - 63)) | (1 << (SetlXgrammarParser.DOUBLE - 63)))) != 0)):
                    break

            self.state = 1010
            self.match(SetlXgrammarParser.T__80)
            localctx.v = SetlVector(doubles) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.av = None
            self._NUMBER = None # Token
            self._DOUBLE = None # Token

        def NUMBER(self):
            return self.getToken(SetlXgrammarParser.NUMBER, 0)

        def DOUBLE(self):
            return self.getToken(SetlXgrammarParser.DOUBLE, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_atomicValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicValue" ):
                listener.enterAtomicValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicValue" ):
                listener.exitAtomicValue(self)




    def atomicValue(self):

        localctx = SetlXgrammarParser.AtomicValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_atomicValue)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SetlXgrammarParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                localctx._NUMBER = self.match(SetlXgrammarParser.NUMBER)
                localctx.av = SetlXFraction((None if localctx._NUMBER is None else localctx._NUMBER.text)) 
                pass
            elif token in [SetlXgrammarParser.DOUBLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                localctx._DOUBLE = self.match(SetlXgrammarParser.DOUBLE)
                localctx.av = SetlXDouble((None if localctx._DOUBLE is None else localctx._DOUBLE.text)) 
                pass
            elif token in [SetlXgrammarParser.T__81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1017
                self.match(SetlXgrammarParser.T__81)
                localctx.av = SetlXOm() 
                pass
            elif token in [SetlXgrammarParser.T__82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self.match(SetlXgrammarParser.T__82)
                localctx.av = SetlXTrue() 
                pass
            elif token in [SetlXgrammarParser.T__83]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1021
                self.match(SetlXgrammarParser.T__83)
                localctx.av = SetlXFalse() 
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.v = None
            self._ID = None # Token

        def ID(self):
            return self.getToken(SetlXgrammarParser.ID, 0)

        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = SetlXgrammarParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            localctx._ID = self.match(SetlXgrammarParser.ID)
            localctx.v = Variable((None if localctx._ID is None else localctx._ID.text)) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cnd = None
            self._expr = None # ExprContext

        def expr(self):
            return self.getTypedRuleContext(SetlXgrammarParser.ExprContext,0)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = SetlXgrammarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            localctx._expr = self.expr(False)
            localctx.cnd = Condition(localctx._expr.ex) 
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.al = None
            self.a1 = None # AssignableContext
            self.a2 = None # AssignableContext

        def assignable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SetlXgrammarParser.AssignableContext)
            else:
                return self.getTypedRuleContext(SetlXgrammarParser.AssignableContext,i)


        def getRuleIndex(self):
            return SetlXgrammarParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = SetlXgrammarParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignmentList)

        localctx.al = []
            
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            localctx.a1 = self.assignable(True)
            localctx.al.append(localctx.a1.a) 
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SetlXgrammarParser.T__29:
                self.state = 1033
                self.match(SetlXgrammarParser.T__29)
                self.state = 1034
                localctx.a2 = self.assignable(True)
                localctx.al.append(localctx.a2.a) 
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[8] = self.assignable_sempred
        self._predicates[27] = self.procedureParameter_sempred
        self._predicates[33] = self.value_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def assignable_sempred(self, localctx:AssignableContext, predIndex:int):
            if predIndex == 0:
                return localctx.enableIgnore
         

    def procedureParameter_sempred(self, localctx:ProcedureParameterContext, predIndex:int):
            if predIndex == 1:
                return localctx.enableRw
         

    def value_sempred(self, localctx:ValueContext, predIndex:int):
            if predIndex == 2:
                return localctx.enableIgnore
         




