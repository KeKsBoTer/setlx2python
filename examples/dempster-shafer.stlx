// This program computes evidences using Dempster-Shafer theory

// selects (names of) all offenders
omega := procedure() {
    return { row[1] : row in knowledge.data };
};

// select all offenders whose data in row i equals n
selectEq := procedure(i, n) {
    return { row[1] : row in knowledge.data | row[i] == n };
};

// select all offenders whose data in row i is in the set/list n
selectIn := procedure(i, n) {
    return { row[1] : row in knowledge.data | row[i] in n };
};

// adds evidences which are for the same set of offenders, but occur multiple times
// in the evidenceList l
unify := procedure(l) {
    return { [ x1, +/ [ y2 : [x2, y2] in l | x2 == x1 ] ]: [ x1, y1 ] in l };
};

// removes conflicts from the evidenceSet s (evidences for empty set of offenders)
removeConflict := procedure(s) {
    c := s[{}];    // c is evidence of conflict
    if (c == om) { // no conflict found
        return s;
    }
    s -= { [{}, c] }; // remove conflict from evidenceSet
    return { [ e[1], e[2] / (1 - c) ] : e in s };
};

// accumulation after Dempster-Shafer for two evidenceSets `x' and `y'
accumulate := procedure(x, y) {
    return removeConflict(unify([ [u[1]*v[1], u[2]*v[2]] : u in x, v in y ]));
};

// Dempster-Shafer for all evidenceSets in `x'
accumulateAll := procedure(x) {
    result := {[omega(), 1]}; // Sgt. Schultz: I know nothing, nothing!
    for (y in x) {
        result := accumulate(result, y);
    }
    return result;
};

plausibility := procedure(s, n) {
    return 0.0 +/ [ e[2] : e in s | n in e[1] || (isSet(n) && n >= e[1]) ];
};

believe := procedure(s, n) {
    return 0.0 +/ [ e[2] : e in s | { n } == e[1] || n == e[1] ];
};

// stuff for printing
prettyPrint := procedure(evidenceSet) {
    es := evidenceSet;
    print();
    if (#evidenceSet > 0) {
        while (#evidenceSet > 0) {
            mMax    := max(range(evidenceSet));
            for (e in evidenceSet) {
                if (e[2] == mMax) {
                    evidence    := e;
                    evidenceSet -= {e};
                    break;
                }
            }
            m := evidence[2];
            if (evidence[1] == omega()) {
                print("$nbrFormat(m)$ == m( Omega )");
            } else {
                print("$nbrFormat(m)$ == m( $evidence[1]$ )");
            }
        }
        print();
        print("Subject | Plausibility | Believe | Disbelieve");
        print("---------------------------------------------");
        for (subject in omega()) {
            pl := plausibility(es, subject);
            b  := believe(es, subject);
            print("$subject$\t|    $nbrFormat(pl)$     |  $nbrFormat(b)$  |   $nbrFormat(1 - pl)$");
        }
    } else {
        print("Evidence set is empty!");
    }
    print();
};

nbrFormat := procedure(value) {
    roundValue := 1000;
    rVal    := 1.0 * (round(value * roundValue) / roundValue);
    result  := str(rVal);
    n       := #str(roundValue);
    while (#result <= n + 1) {
        result += "0";
    }
    if (#result > n + 1) {
        result := result[1 .. n+1];
    }
    return result;
};

/******************************************************************************/
/**                               first example                              **/
/******************************************************************************/

// stores everything known about the possible offenders (see examples below)
class knowledge() {
    static {
        // all possible offenders
        data := {
            // name,   hight, age, hair color
            ["Tobias", 182,   30,  "brown" ],
            ["Ralf",   169,   55,  "black" ],
            ["Sabine", 195,   17,  "brown" ],
            ["Ulrike", 166,   61,  "gray"  ],
            ["Erna",   176,   41,  "blond" ],
            ["Frank",  181,   34,  "blond" ]
        };
    }
}

// first witness testifies offenders hair was "brown" or "black" and is 88% sure
one := {[selectIn(4, {"brown", "black"}), 0.88], [omega(), 0.12]};

prettyPrint(one);

// second witness testifies one offender was between 180 and 200cm high (45% sure), the other one was shorter as 170cm (45% sure)
two := {[selectIn(2, {180 .. 200}), 0.45], [selectIn(2, {0 .. 170}), 0.45], [omega(), 0.10]};

prettyPrint(two);

// third witness testifies offender was 40 years or older (65% sure)
three := {[selectIn(3, {40 .. 100}), 0.65], [omega(), 0.35]};

prettyPrint(three);

// who was the offender?
oneTwoThree := accumulateAll({one, two, three});

prettyPrint(oneTwoThree);

/******************************************************************************/
/**                              second example                              **/
/******************************************************************************/

print("-------------------------------------------------------------------------------");

// all possible offenders
knowledge.data := {
// name,    hair color, sex, age
 ["Alfons", "brown",    "m", 37],
 ["Klaus",  "black",    "m", 55],
 ["John",   "blond",    "m", 35],
 ["Ludger", "red",      "m", 29],
 ["Eva",    "blond",    "f", 41],
 ["Helge",  "blond",    "m", 25],
 ["Martin", "black",    "m", 31],
 ["Petra",  "red",      "f", 19],
 ["Franka", "brown",    "f", 51]
};

// first witness testifies offenders age was between 25 and 30 (40% sure)
one := {[selectIn(4, {25 .. 30}), 0.40], [omega(), 0.60]};

prettyPrint(one);

// second witness testifies offenders sex was female (80% sure)
two := {[selectEq(3, "f"), 0.80], [omega(), 0.20]};

prettyPrint(two);

// third witness testifies offenders hair was "black" (80% sure)
three := {[selectEq(2, "black"), 0.80], [omega(), 0.20]};

prettyPrint(three);

// accumulate first and second evidences
oneTwo := accumulate(one, two);

prettyPrint(oneTwo);

// accumulate first+second and third evidences
oneTwoThree := accumulate(oneTwo, three);

prettyPrint(oneTwoThree);

