// this program computes the towers of hanoi using A*

/* algorithm */
aStar := procedure(s, t) {
    g := predecessor := f := {};

    g[s]        := 0;
    f[s]        := h(s);
    openQueue   := { [f[s], s] };

    while(openQueue != {}) {
        [fx, x] := fromB(openQueue);
        if (x in t) {
            printPath(s, t, x, fx, predecessor);
            return;
        }
        for ( [y, yCost] in transition(x) | g[y] == om || g[x] + yCost < g[y]) {
            predecessor[y]  := x;
            g[y]            := g[x] + yCost;
            openQueue       -= { [f[y], y] };
            f[y]            := g[y] + h(y);
            openQueue       += { [f[y], y] };
        }
    }
    print("path $s$ -> $t$: no solution");
};

/* graph */
/* heuristic:
 *   a) actual cost is (2 ** numberOfDisks)-1
 *   b) having disks right (x[3]) is good, therefore costs nothing
 *   c) having disks in the middle (x[2]) is OK, therefore costs only 1/3
 *   d) having disks left (x[1]) is bad, therefore it costs the full ammount
 *   e) Sum over 2 ** (disk -1) is used, because the result of "all disks left"
 *      equals the acutal cost.
 */
h := procedure(x) {
    return   0 +/{2 ** (disk -1) : disk in x[1]}
           + 0 +/{2 ** (disk -1) : disk in x[2]} * 1/3;
};

// transitions
transition := procedure(x) {
    return {moveFromTo(x, from, to) : from in {1, 2, 3}, to in {1, 2, 3} - {from}};
};

moveFromTo := procedure(x, from, to) {
    origin := x[from];
    if (#origin > 0) {
        head   := origin[1];
        goal   := x[to];
        other  := arb({1,2,3} - { from, to });
        if (#goal == 0 || head < first(goal)) {
            new        := [];
            new[from]  := origin[2..];
            new[to]    := [head] + goal;
            new[other] := x[other];
            return [ new, 1];
        }
    }
};

/* print the path */
printPath := procedure(start, targets, end, cost, predecessor) {
    // rebuild path
    p    := end;
    path := [end];
    while(p != start) {
        p    := predecessor[p];
        path += [p];
    }
    // print path
    print("path $start$ -> $targets$:");
    while(#path > 0) {
        print(fromE(path));
    }
    print("cost: $cost$");
    print("nodes expanded: $#predecessor$");
};

/* query */
hanoi := procedure(n) {
    print("computing towers of hanoi with $n$ disks:");
    //start := now();
    aStar([[1 .. n],[],[]], {[[],[],[1 .. n]]});
    //print("computation took $nDecimalPlaces((now()-start)/1000, 2)$s");
};

hanoi(6);

