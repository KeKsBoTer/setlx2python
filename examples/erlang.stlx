// this program tests the factorial syntax

erlangB := procedure(a, n) {
	p := (a ** n) / n!;
	p /= +/{(a**i) / i!: i in {0 .. n}};
	return p;
};

solveA := procedure(n, p, step) {
	lastA := a := 0;
	while (true) {
		a += step;
		b := erlangB(a, n);
		if (b <= p) {
			lastA:= a;
		} else if (b > (p * 1.1)) { // allow to continue while just above the threshold
			break;
		}
	}
	return lastA;
};

solveN := procedure(a, p) {
	n := 0;
	while (true) {
		n += 1;
		b := erlangB(a, n);
		if (b <= p) {
			return n;
		}
	}
};

erlangC := procedure(a, n) {
	p := ((a ** n) * n) / (n! * (n - a));
	p /= (+/{(a**i) / i!: i in {0 .. n - 1}}) + p;
	return p;
};

print("maximum A (for N = 5,      P <= 5%) is ", solveA(5, 0.05, 0.0001), ".");

print("minimum N (for A = 1.75,   P <= 7%) is ", solveN(1.75, 0.07), ".");

print("Erlang B  (for A = 0.2*48, N = 20 ) is ", erlangB(0.2*48, 20), ".");

print("Erlang C  (for A = 0.2*48, N = 20 ) is ", erlangC(0.2*48, 20), ".");
