// convert a DFA into a string
dfa2string := procedure(dfa) {
    [states, sigma, deltaNew, q0, final] := dfa;
    result := "";
    n := 0;
    statesToNames := {};
    for (q in states) {
        statesToNames += { [q, "S" + n] };
        n += 1;
    }
    result += "states: { S0, ..., S$n-1$ }\n\n";   
    result += "start state: $statesToNames[q0]$\n\n";
    result += "state encoding:\n";
    for (q in states) {
        result += "$statesToNames[q]$ = $q$\n";
    }
    result += "\ntransitions:\n";
    for (q in states, c in sigma) {
        if (deltaNew[q, c] != om) {
            result += "delta($statesToNames[q]$, $c$) = $statesToNames[deltaNew[q, c]]$\n";
        }
    }
    result += "\nset of accepting states: {";
    result += join({ statesToNames[q] : q in final }, ", ");
    result += "}\n";
    return result;
};

// converts a dfa into dot-format
dfa2dot := procedure(dfa, file) {
    [states, sigma, deltaNew, q0, final] := dfa;
    result := "";
    n := 0;              // used to assign names to states
    statesToNames := {}; // assigns a name to every state
    for (q in states) {
        statesToNames += { [q, "S" + n] };
        n += 1;
    }
    startName := statesToNames[q0];
    result += "digraph G {\n";
    result += "    rankdir = LR;\n";
    result += "    size = \"5,7\";\n";
    result += "    1 -> $startName$;\n";
    result += "    1 [label=\"\",width=0.00001,height=0.00001];\n";
    for (q in states) {
        result += "    " + statesToNames[q];
        if (q in final) {
            result += " [peripheries=2]";
        }
        result += ";\n";
    }
    for (q in states, c in sigma) {
        p := deltaNew[q, c];
        if (p != om) {
            result += "    $statesToNames[q]$ -> $statesToNames[p]$ ";
            result += "[label = \"$c$\"];\n";
        }
    }
    result += "}\n";
    writeFile("$file$.dot", [ result ]);
    run("dot -Tps $file$.dot -o $file$.eps");
    run("open $file$.eps");
};  

// Computes the smallest set s such 
//   s0 <= s                   and
//   s = +/ { f(x) : x in s }  
// holds.  s is computed via fixpoint iteration.

fixpoint := procedure(s0, f) {
    result := newElements := s0;
    while (true) {
        newElements := {} +/ { f(q) : q in newElements };
        if (newElements <= result) {
            return result;
        }
        result += newElements;
    }
};

// This function minimizes the given finte automaton.
//    fa : finite automaton, codes as a 5-tuple of the form
//           [states, sigma, delta, q0, final]
// The algorithm performs the folllowing steps:
//   1. All states are eliminated that are not reachable.
//   2. States are separated as long as possible.
//   3. States that are equivalent are identified and grouped
//      in equivalence classes.

minimize := procedure(fa) {
    [states, sigma, delta, q0, accepting] := fa;
    states    := fixpoint({q0}, [q] |=> { delta[q, c] : c in sigma });
    separable := (states-accepting) >< accepting + accepting >< (states-accepting);
    moreSep   := 
        closure(knownSep) {
            return { [q1, q2] : [q1, q2] in states >< states
                   | exists (c in sigma | [delta[q1, c], delta[q2, c]] == knownSep)
                   };
        };
    allSeparable := fixpoint(separable, moreSep);
    equivalent   := states >< states - allSeparable;
    equivClasses := { { p : p in states | [p, q] in equivalent }: q in states };
    newQ0        := arb({ m : m in equivClasses | q0 in m });
    newAccept    := { m : m in equivClasses | arb(m) in accepting };   
    newDelta     := {};
    for (q in states, c in sigma) {
        p := delta[q, c];
        if (p != om) {
            classOfP := findEquiv(p, equivClasses);
            classOfQ := findEquiv(q, equivClasses);
            newDelta += { [[classOfQ, c], classOfP] };
        }
    }
    return [equivClasses, sigma, newDelta, newQ0, newAccept];
};
// Given a state p, find the equivalence class of p.
findEquiv := procedure(p, eqClasses) {
    return first({ cl : cl in eqClasses | p in cl });
};

delta := { [ [0, "a"], 1 ],
           [ [0, "b"], 6 ],
           [ [1, "a"], 2 ],
           [ [1, "b"], 7 ],
           [ [2, "a"], 3 ],
           [ [2, "b"], 6 ],
           [ [3, "a"], 0 ],
           [ [3, "b"], 7 ],
           [ [4, "a"], 5 ],
           [ [4, "b"], 2 ],
           [ [5, "a"], 6 ],
           [ [5, "b"], 8 ],
           [ [6, "a"], 7 ],
           [ [6, "b"], 2 ],
           [ [7, "a"], 0 ],
           [ [7, "b"], 3 ],
           [ [8, "a"], 4 ],
           [ [8, "b"], 8 ]
};

prettyPrintFA := procedure(fa) {
    [states, sigma, delta, q0, final] := fa;
    print();
    print("set of states:       $states$");
    print("start state:         $q0$"    );
    print("transition function:" );
    for (p in states) {
        for (c in sigma) {
            print("$p$ |-\"$c$\"-> $delta[p, c]$");
        }
    }
    print("accepting states:    $final$" );
};

fa := [ [0..8], {"a", "b"}, delta, 0, {2,3,6,7} ];
// dfa2dot(fa, "dfa-old");  // uncomment this to view fsm with graphviz
fm := minimize(fa);
prettyPrintFA(fm);
// dfa2dot(fm, "dfa");      // uncomment this to view fsm with graphviz




