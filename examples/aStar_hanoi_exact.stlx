// this program computes the towers of hanoi using A* and a 'perfect' heuristic

/* algorithm */
aStar := procedure(s, t) {
    g := predecessor := f := {};

    g[s]        := 0;
    f[s]        := h(s);
    openQueue   := { [f[s], s] };

    while(openQueue != {}) {
        [fx, x] := fromB(openQueue);
        if (x in t) {
            printPath(s, t, x, fx, predecessor);
            return;
        }
        for ( [y, yCost] in transition(x) | g[y] == om || g[x] + yCost < g[y]) {
            predecessor[y]  := x;
            g[y]            := g[x] + yCost;
            openQueue       -= { [f[y], y] };
            f[y]            := g[y] + h(y);
            openQueue       += { [f[y], y] };
        }
    }
    print("path $s$ -> $t$: no solution");
};

/* graph */
// heuristics
h := procedure(x) {
    n := max(+/ x);
    // as this problem was solved a long time ago, we simply compute the actual cost
    return numberSteps(x, n);
};

/* Computes the number of steps necessary to move all the disks onto the 3rd pole.
 *   x is the triple of lists describing the current configuration,
 *   n is the total number of disks.
 */
numberSteps := procedure(x, n) {
    if (n == 0) {
        return 0;
    }
    n3 := #x[3];
    if (n3 > 0 && last(x[3]) == n) {
        // biggest disk is already on pole 3, therefore we can ignore it
        // and compute how long it takes to move the other disks on top
        return numberSteps([x[1], x[2], x[3][1 .. n3 - 1]], n - 1);
    }
    // figure out if the biggest disk is on pole 1 or on pole2
    [ last1, last2 ] := [ 0, 0 ];
    if (#x[1] > 0) {
        last1 := last(x[1]);
    }
    if (#x[2] > 0) {
        last2 := last(x[2]);
    }
    if (last1 >= last2) {
        [ maxIdx, minIdx ] := [ 1, 2 ];
    } else {
        [ maxIdx, minIdx ] := [ 2, 1 ];
    }
    [ tMax, tMin ] := [ x[maxIdx], x[minIdx] ];
    m := #tMax;
    // to finish, all disks on top of the biggest disk (tMax) must be moved to
    // the other pole (tMin), which is computed using numberSteps(), again
    // ignoring the biggest disk
    //
    // then the biggest disk must be moved to pole 3 and all the other disks
    // need to be moved on top of it
    // moving the biggest disk costs 1 and moving the rest is the whole hanoi
    // problem all over again, for which we know it will cost (2 ** (n-1)) -1
    return numberSteps([tMax[1 .. m - 1], x[3], tMin], n-1) + 2 ** (n-1);
};

// transitions
transition := procedure(x) {
    return {moveFromTo(x, from, to) : from in {1, 2, 3}, to in {1, 2, 3} - {from}};
};

moveFromTo := procedure(x, from, to) {
    origin := x[from];
    if (#origin > 0) {
        head   := origin[1];
        goal   := x[to];
        other  := arb({1,2,3} - { from, to });
        if (#goal == 0 || head < first(goal)) {
            new        := [];
            new[from]  := origin[2..];
            new[to]    := [head] + goal;
            new[other] := x[other];
            return [ new, 1];
        }
    }
};

/* print the path */
printPath := procedure(start, targets, end, cost, predecessor) {
    // rebuild path
    p    := end;
    path := [end];
    while(p != start) {
        p    := predecessor[p];
        path += [p];
    }
    // print path
    print("path $start$ -> $targets$:");
    while(#path > 0) {
        print(fromE(path));
    }
    print("cost: $cost$");
    print("nodes expanded: $#predecessor$");
};

/* query */
hanoi := procedure(n) {
    print("computing towers of hanoi with $n$ disks:");
    //start := now();
    aStar([[1 .. n],[],[]], {[[],[],[1 .. n]]});
    //print("computation took $nDecimalPlaces((now()-start)/1000, 2)$s");
};

hanoi(6);

