// Compute the equivalence relation on the set M that is induced by the
// binary relation R.  It is assumed that R is a relation on M.  The
// The resulting equivalence relation is represented as a partition.
unionFind := procedure(M, R) {
    P := { { x } : x in M };  // start with the trivial partition
    for ([x, y] in R) {
        print("[$x$, $y$]");
        Sx := find(x, P);
        Sy := find(y, P);
        if (Sx != Sy) {
            P  -= { Sx, Sy };  // remove old sets
            P  += { Sx + Sy }; // add their union
            print(P);
        }
    }
    return P;
};
// Given a partition P of a set M and an element x of M, find the set S
// from P that conntains x.
find := procedure(x, P) {
    return arb({ S : S in P | x in S });  // there can be only one such S
};

demo := procedure() {
    M := { 1 .. 9 };
    R := { [1, 4], [7, 9], [3, 5], [2, 6], [5, 8], [1, 9], [4, 7] };
    print("R = $R$");
    P := unionFind(M, R);
    print("P = $P$");
};

demo();
