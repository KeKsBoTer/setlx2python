sort := procedure(lst) {
    match (lst) {
    case []     : return [];
    case [x]    : return [x];
    case [x,y|r]: [p1, p2] := [min({x,y}), max({x,y})];
                  [lst1,lst2,lst3] := partition(p1, p2, r);
                  return sort(lst1) + [p1] + sort(lst2) + [p2] + sort(lst3);
    }
};
partition := procedure(p1, p2, lst) {
    match (lst) {
    case []   : return [ [], [], [] ];
    case [x|r]: [ r1, r2, r3 ] := partition(p1, p2, r);
                if (x < p1) {
                    return [ [x|r1], r2, r3 ];
                } else if (x <= p2) {
                    return [ r1, [x|r2], r3 ];
                } else {
                    return [ r1, r2, [x|r3] ];
                }
    }
};

// code for testing

demo := procedure() {
    lst := [ rnd({1 .. 20}) : n in [1 .. 20] ];
    print("lst = $lst$");
    s := sort(lst);
    print("s = $s$");
};

// n iterations for lists of length k
testSort := procedure(n, k) {
    for (i in [1 .. n]) {
        lst := [ rnd({1 .. 200}) : x in [1 .. k] ];
        s := sort(lst);
        isOrdered(s);
        sameElements(s, lst);
        print(".");
    }
    print("All tests successful!");
};

isOrdered := procedure(lst) {
    for (i in [1 .. #lst-1]) {
        assert(lst[i] <= lst[i+1], "test lst[i] <= lst[i+1] failed for i = $i$, lst = $lst$");
    }
};

sameElements := procedure(lst, s) {
    assert(collect(lst) == collect(s), "different elements in $lst$ and $s$");
};

demo();

testSort(100, 200);
