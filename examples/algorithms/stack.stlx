class stack() {
    mStackElements := [];

  static {  
    push := procedure(e) {
        this.mStackElements += [e];
    };
    pop := procedure() {
        assert(#mStackElements > 0, "popping empty stack");
        this.mStackElements := mStackElements[1 .. -2];
    };
    top := procedure() {
        assert(#mStackElements > 0, "top of empty stack");
        return mStackElements[-1];
    };
    isEmpty := procedure() {
        return mStackElements == [];
    };
    f_str := procedure() {
         result := convert(this);
         dashes := "-" * #result;
         return join([dashes, result, dashes], "\n");
    };
    convert := procedure(s) {
        if (s.isEmpty()) {
            return "|";
        } 
        top := s.top();
        s.pop();
        return convert(s) + " " + top + " |";
    };
  }
}

createStack := procedure(l) {
    result := stack();
    for (i in [1 .. #l]) {
        result.push(l[-i]);
    }
    return result;
};

s := createStack([1..10]);
print(s);
while (!s.isEmpty()) {
    t := s.top();
    print(t);
    s.pop();
    print(s, "\n");
}
