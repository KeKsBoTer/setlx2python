sort := procedure(L) {
    if (#L < 2) {
        return L;
    }
    n := #L;
    [L1, L2] := [L[.. n\2], L[n\2+1 ..]];
    return merge(sort(L1), sort(L2));
};
merge := procedure(L1, L2) {
    match ([L1, L2]) {
        case [      [],       L2] : return L2;
        case [      L1,       []] : return L1;
        case [[x | R1], [y | R2]] : if (x <= y) {
                                        return [x] + merge(R1, L2);
                                    } else {
                                        return [y] + merge(L1, R2);
                                    }
    }
};























// code for testing
demo := procedure() {
    l := [ rnd({1 .. 200}) : n in [1 .. 20] ];
    print("l = $l$");
    s := sort(l);
    print("s = $s$");
};

// n iterations for lists of length k
testSort := procedure(n, k) {
    for (i in [1 .. n]) {
        l := [ rnd(2 * k) : x in [1 .. k] ];
        s := sort(l);
        isOrdered(s);
        sameElements(s, l);
        print(".");
    }
    print("All tests successful!");
};

isOrdered := procedure(l) {
    for (i in [1 .. #l-1]) {
        assert(l[i] <= l[i+1], "test l[i] <= l[i+1] failed for i = $i$, l = $l$");
    }
};

sameElements := procedure(l, s) {
    assert(collect(l) == collect(s), "wrong elements");
};

demo();

testSort(100, 200);
