sort := procedure(rw L) {
    A := L;
    mergeSort(L, 1, #L + 1, A); 
};
mergeSort := procedure(rw L, start, end, rw A) {
    if (end - start < 2) { return; }
    middle := (start + end) \ 2;
    mergeSort(L, start,  middle, A);  
    mergeSort(L, middle, end   , A);   
    merge(L, start, middle, end, A); 
};
merge := procedure(rw L, start, middle, end, rw A) {    
    for (i in [start .. end-1]) { A[i] := L[i]; }
    idx1 := start;
    idx2 := middle;
    i    := start;
    while (idx1 < middle && idx2 < end) {
        if (A[idx1] <= A[idx2]) {
            L[i] := A[idx1]; idx1 += 1;
        } else {
            L[i] := A[idx2]; idx2 += 1;
        }
        i += 1; 
    }
    while (idx1 < middle) { 
        L[i] := A[idx1]; idx1 += 1; i += 1; 
    }
    while (idx2 < end   ) { 
        L[i] := A[idx2]; idx2 += 1; i += 1; 
    }
    assert(idx1 == middle && idx2 == end, "idx1 == middle && idx2 == end failed");
};

sort([5,3,8,9,1,7,0,2,6,4]);

// code for testing
demo := procedure() {
    L := [ rnd({1 .. 200}) : n in [1 .. 20] ];
    print("L = $L$");
    sort(l);
    print("L = $L$");
};
// n iterations for lists of length k
testSort := procedure(n, k) {
    for (i in [1 .. n]) {
        L := [ rnd({1 .. 200}) : x in [1 .. k] ];
        C := L;  // copy
        sort(L);
        isOrdered(L);
        sameElements(C, L);
        print(".");
    }
    print("All tests successful!");
};
isOrdered := procedure(L) {
    for (i in [1 .. #L-1]) {
        assert(L[i] <= L[i+1], "test L[i] <= L[i+1] failed for i = $i$, L = $L$");
    }
};
sameElements := procedure(L, S) {
    assert(collect(L) == collect(S), "wrong elements");
};
demo();
testSort(100, 20);
