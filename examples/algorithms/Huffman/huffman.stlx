load("tree-2-dot.stlx");
// M = { [f1, Leaf(c1)], ..., [fn, Leaf(cn)] }
codingTree := procedure(M) {
    while (#M > 1) {
        a := first(M);
        M -= { a };
        b := first(M);
        M -= { b };
        M += { [ a[1] + b[1], @Node(a, b) ] };
    }
    return arb(M);
};
// h is the coding tree to print, while p is the coding prefix, n is the indent
toString := procedure(h, p, n) {
    [ count, tree ] := h;
    match (tree) {
        case @Leaf(chr): 
             return " " * n + "\"$chr$\": $p$ ($count$) \n";
        case @Node(a, b):
             return toString(a, p + "0", n + 4) + 
                    " " * n + "O" + " ($count$)\n" +
                    toString(b, p + "1", n + 4);
        default: abort("toString($h$, $p$, $n$)");
    }
};
// This function takes two arguments.
//   * h is a pair of the form [cnt, ct] where ct is a coding tree and
//     cnt is the sum of the frequencies of all characters in ct.
//   * p is prefix string prefixed to all codes computed.  This prefix is
//     needed because this function is implemented recursively.
// The function computes a set M of triples of the form
//     [chr, coding, count]
// Here chr is a character, coding is the encoding of this character, and
// count is the number of occurrences of this character in the string to encode.
extractCodes := procedure(h, p) {
    [ count, tree ] := h;
    match (tree) {
        case @Leaf(chr): 
            return { [ chr, p, count] };
        case @Node(a, b):
             return extractCodes(a, p + "0") + extractCodes(b, p + "1");
        default: abort("extractCodes($h$, $p$)");
    }    
};

demo := procedure(M, file) {
    print("-" * 80);
    h := codingTree(M);
    dcng := extractCodes(h, "");
    for ([char, code, _] in dcng) {
        print("\"$char$\": $code$");
    }
    costHuffman := +/ [ #p * cnt : [ _, p, cnt ] in dcng ];
    log2        := x |-> log(x) / log(2);
    n           := ceil(log2(#M));
    costNBit    := +/ [ f * n : [f, _] in M ];
    print("\ncost with Huffman encoding: $costHuffman$ bits");
    print("cost with $n$-Bit   encoding: $costNBit$ bits");
    saving := 100.0 * (costNBit - costHuffman) / costNBit + "";
    print("saving $saving[1..4]$% space when using Huffman code\n");
    print("Huffman tree\n");
    // print(toString(h, "", 0), "\n");
    graph2Dot(h, file);
};

M := { [ 1, @Leaf("a")],
       [ 1, @Leaf("b")],
       [ 2, @Leaf("c")],
       [ 3, @Leaf("d")],
       [ 5, @Leaf("e")],
       [ 8, @Leaf("f")],
       [13, @Leaf("g")] };

demo(M, "small");

demoFile := procedure(fn, outFile) {
    data      := readFile(fn);
    frequency := {};
    for (line in data) {
        cl := split(line + "\n", "");
        for (c in cl) {
            f := frequency[c];
            if (f != om) {
                frequency[c] := f + 1;
            } else {
                frequency[c] := 1;
            }
        }
    }
    M := { [ f, @Leaf(c) ] : [c, f] in frequency };
    demo(M, outFile);
};

demoFile("alice.txt",     "alice-huffman"    );
demoFile("moby-dick.txt", "moby-dick-huffman");

