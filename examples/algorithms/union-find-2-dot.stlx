
graph2Dot := procedure(Parent, file) {
    print(Parent);
    graph := "digraph G {\n";
    graph += "    ordering = out;\n";
    graph += "    node [shape = record];\n";
    graph += "    edge [dir   = back  ];\n";
    count := 0;
    M := { x : [x, _] in Parent } + { p : [_, p] in Parent };
    for (p in M) {
        CL := children(p, Parent);
        if (CL != {}) {
            graph += "    n$p$ -> " + join(["n$x$" : x in CL], ",");
            graph += ";\n";
        }
    }
    for (x in M) {
        graph += "    n$x$ [label = \"$x$\"];\n";
    }
    graph += "}\n";
    writeFile("$file$.dot", [ graph ]);
    run("dot -Tpdf $file$.dot -o $file$.pdf");
    run("open $file$.pdf");
};

// Return a list of the identifiers of all nodes that are children of this
// node.
children := procedure(x, Parent) {
    return { y : [y, p] in Parent | p == x };
};

