// A list based implementation of quick sort.
sort := procedure(L) {
    match (L) {
        case []   : return [];
        case [x|R]: S := [y: y in R | y <= x];
                    B := [y: y in R | y >  x];
                    return sort(S) + [x] + sort(B);
    }
};

// code for testing

demo := procedure() {
    l := [ rnd({1 .. 200}) : n in [1 .. 18] ];
    print("l = $l$");
    s := sort(l);
    print("s = $s$");
};

// n iterations for lists of length k
testSort := procedure(n, k) {
    for (i in [1 .. n]) {
        l := [ rnd({1 .. 200}) : x in [1 .. k] ];
        s := sort(l);
        isOrdered(s);
        sameElements(s, l);
        print(".");
    }
    print("All tests successful!");
};

isOrdered := procedure(l) {
    for (i in [1 .. #l-1]) {
        assert(l[i] <= l[i+1], "test l[i] <= l[i+1] failed for i = $i$, l = $l$");
    }
};

sameElements := procedure(l, s) {
    for (x in l) {
        assert(count(x, l) == count(x, s), "wrong count");
    }
    assert(#l == #s, "wrong size");
};

count := procedure(x, l) {
    match (l) {
        case []   : return 0;
        case [y|r]: if (x == y) {
                        return 1 + count(x, r);
                    }
                    return count(x, r);
    }
};

demo();

testSort(100, 20);
